<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualC.STLCLR</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualC.StlClr.BinaryDelegate`3">
      <summary>Описывает делегат с двумя аргументами.Используется для назначения аргументов и типа значения, возвращаемого делегатом.</summary>
      <returns>Тип значения, возвращаемый делегатом.</returns>
      <param name="param0">Первый аргумент.</param>
      <param name="param1">Второй аргумент.</param>
      <typeparam name="TArg1">Первый аргумент делегата.</typeparam>
      <typeparam name="TArg2">Второй аргумент делегата.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемый делегатом.</typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.DequeEnumerator`1">
      <summary>Поддерживает простую итерацию по любому объекту STL/CLR, реализующему интерфейс <see cref="T:Microsoft.VisualC.StlClr.IDeque`1" />.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.
   </typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.#ctor(Microsoft.VisualC.StlClr.IDeque{`0},System.Int32)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />.</summary>
      <param name="_Cont">Контейнер, по которому необходимо выполнить итерацию.</param>
      <param name="_First">Смещение текущего первого элемента в контейнере.</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.DequeEnumerator`1.Current">
      <summary>Возвращает или задает текущий элемент в наборе.</summary>
      <returns>Текущий элемент в наборе.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose">
      <summary>Освобождает, разблокирует или сбрасывает неуправляемые ресурсы, используемые объектом <see cref="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Dispose(System.Boolean)">
      <summary>Освобождает, разблокирует или сбрасывает неуправляемые ресурсы, используемые объектом <see cref="T:Microsoft.VisualC.StlClr.DequeEnumerator`1" />.</summary>
      <param name="__unnamed0">Значение true для удаления управляемых объектов; значение false для удаления неуправляемых объектов.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу набора.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца набора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumerator`1.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом набора.</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1">
      <summary>Поддерживает простую итерацию по любому объекту STL/CLR, реализующему интерфейс <see cref="T:Microsoft.VisualC.StlClr.IDeque`1" />.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.IDeque{`0},System.Int32)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1" />.</summary>
      <param name="_Cont">Контейнер, по которому выполняется итерация.</param>
      <param name="_First">Смещение текущего первого элемента в контейнере.</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Current">
      <summary>Возвращает или задает текущий элемент в наборе.</summary>
      <returns>Текущий элемент в наборе.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу набора.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца набора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.DequeEnumeratorBase`1.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом набора.</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.GenericPair`2">
      <summary>Описывает объект, который создает оболочку для пары значений.</summary>
      <typeparam name="TValue1">Тип первого значения в паре.</typeparam>
      <typeparam name="TValue2">Тип второго значения в паре.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor">
      <summary>Создает новый объект <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> со значениями по умолчанию для полей <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.first" /> и <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.second" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Создает новый объект <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> на основе существующего объекта <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" />.</summary>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" />, который необходимо скопировать в новый объект <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)">
      <summary>Создает новый объект <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> на основе существующего объекта <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</summary>
      <param name="_Right">Объект <see cref="T:System.Collections.Generic.KeyValuePair`2" />, который необходимо скопировать в новый объект <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0)">
      <summary>Создает новый объект <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> и присваивает его первое значение заданной величине.</summary>
      <param name="_Val1">Значение, которое необходимо сохранить в поле <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.first" />.Значению поля <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.second" /> присваивается значение по умолчанию для данного типа.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0,`1)">
      <summary>Создает новый объект <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> с двумя заданными значениями.</summary>
      <param name="_Val1">Значение, которое необходимо сохранить в поле <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.first" />.</param>
      <param name="_Val2">Значение, которое необходимо сохранить в поле <see cref="F:Microsoft.VisualC.StlClr.GenericPair`2.second" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.Equals(System.Object)">
      <summary>Определяет, равны ли два объекта <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" />.</summary>
      <returns>Если два объекта <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> равны, значение true, если нет, значение false.</returns>
      <param name="_Right_arg">Объект <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" />.</param>
    </member>
    <member name="F:Microsoft.VisualC.StlClr.GenericPair`2.first">
      <summary>Первое значение объекта <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" />, добавленное в оболочку.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.op_Assign(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Заменяет сохраненную пару значений в объекте <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" />.</summary>
      <returns>Этот метод возвращает значение *this.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" />, который необходимо скопировать.</param>
    </member>
    <member name="F:Microsoft.VisualC.StlClr.GenericPair`2.second">
      <summary>Второе значение объекта <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" />, добавленное в оболочку.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.GenericPair`2.swap(Microsoft.VisualC.StlClr.GenericPair{`0,`1}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Меняет местами содержимое двух объектов <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" />.</summary>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.GenericPair`2" /> для обмена содержимым.</param>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.HashEnumerator`2">
      <summary>Поддерживает простую итерацию по любому объекту STL/CLR, реализующему интерфейс <see cref="T:Microsoft.VisualC.StlClr.IHash`2" />.</summary>
      <typeparam name="TKey">Тип ключа итератора хэша. </typeparam>
      <typeparam name="TValue">Тип значения итератора хэша.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />.</summary>
      <param name="_First">Первый узел в контейнере, по которому выполняется итерация.</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.HashEnumerator`2.Current">
      <summary>Возвращает или задает текущий элемент в наборе.</summary>
      <returns>Текущий элемент в наборе.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose">
      <summary>Освобождает, разблокирует или сбрасывает неуправляемые ресурсы, используемые объектом <see cref="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Dispose(System.Boolean)">
      <summary>Освобождает, разблокирует или сбрасывает неуправляемые ресурсы, используемые объектом <see cref="T:Microsoft.VisualC.StlClr.HashEnumerator`2" />.</summary>
      <param name="__unnamed0">Значение true для удаления управляемых объектов; значение false для удаления неуправляемых объектов.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу набора.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца набора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumerator`2.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом набора.</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2">
      <summary>Поддерживает простую итерацию по любому объекту STL/CLR, реализующему интерфейс <see cref="T:Microsoft.VisualC.StlClr.IHash`2" />.</summary>
      <typeparam name="TKey">Тип ключа итератора хэша.</typeparam>
      <typeparam name="TValue">Тип значения итератора хэша.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.HashEnumeratorBase`2" />.</summary>
      <param name="_First">Первый узел в контейнере, по которому выполняется итерация.</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Current">
      <summary>Возвращает или задает текущий элемент в наборе.</summary>
      <returns>Текущий элемент в наборе.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу набора.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца набора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.HashEnumeratorBase`2.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом набора.</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IDeque`1">
      <summary>Определяет интерфейс для объекта deque библиотеки STL/CLR.</summary>
      <typeparam name="TValue">Содержащийся тип.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Заменяет все указанные элементы контейнера элементами в заданных объектах <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />.</summary>
      <param name="_First">Начальное положение диапазона, который необходимо вставить в контейнер.</param>
      <param name="_Last">Первое положение после диапазона элементов, который необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Collections.IEnumerable)">
      <summary>Заменяет все элементы контейнера элементами в заданном объекте <see cref="T:System.Collections.IEnumerable" />.</summary>
      <param name="_Right">Перечисление, которое необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.assign(System.Int32,`0)">
      <summary>Заменяет все элементы контейнера указанным количеством заданных элементов.</summary>
      <param name="_Count">Количество элементов, которые необходимо вставить в контейнер.</param>
      <param name="_Val">Значение элемента, который необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.at(System.Int32)">
      <summary>Осуществляет доступ к элементу, который находится в контейнере в заданном положении.</summary>
      <returns>Элемент управляемой последовательности в положении <paramref name="pos" />.</returns>
      <param name="_Pos">Положение элемента, к которому необходимо получить доступ.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.back">
      <summary>Осуществляет доступ к последнему элементу в контейнере.</summary>
      <returns>Последний элемент управляемой последовательности, который не должен быть пустым.</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IDeque`1.back_item">
      <summary>Осуществляет доступ к последнему элементу не пустого набора deque.</summary>
      <returns>Последний элемент управляемой последовательности.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>Задает начало управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор с произвольным доступом, который задает первый элемент управляемой последовательности или элемент, расположенный непосредственно после конца пустой последовательности.Используется для получения итератора, который задает начало управляемой последовательности с параметром <paramref name="current" />, однако в случае изменения длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.begin_bias">
      <summary>Возвращает сдвиг начала текущей последовательности.Сдвигом называется смещение относительно текущего нулевого элемента.</summary>
      <returns>Сдвиг начала текущей последовательности.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.clear">
      <summary>Удаляет все элементы в контейнере.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.empty">
      <summary>Проверяет, действительно ли в контейнере отсутствуют элементы.</summary>
      <returns>Если контейнер пуст, значение true, если нет, значение false.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>Задает конец управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор с произвольным доступом, который указывает на положение непосредственно после конца управляемой последовательности.Используется для получения итератора, который задает конец управляемой последовательности с параметром <paramref name="current" />, однако в случае изменения длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.end_bias">
      <summary>Возвращает сдвиг конца текущей последовательности.Сдвигом называется смещение относительно текущего нулевого элемента.</summary>
      <returns>Сдвиг конца текущей последовательности.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>Удаляет элемент в указанном положении.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает первый элемент из оставшихся после удаления, или элемент <see cref="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />, если таковой не существует.</param>
      <param name="_Where">Подлежащий удалению элемент.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>Удаляет элементы, находящиеся между заданными итераторами.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает первый элемент из оставшихся после удаления, или элемент <see cref="M:Microsoft.VisualC.StlClr.IDeque`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />, если таковой не существует.</param>
      <param name="_First_iter">Начальное положение диапазона для удаления.</param>
      <param name="_Last_iter">Первое положение после последнего элемента диапазона для удаления.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.front">
      <summary>Осуществляет доступ к первому элементу в контейнере.</summary>
      <returns>Первый элемент управляемой последовательности, который не должен быть пустым.</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IDeque`1.front_item">
      <summary>Осуществляет доступ к первому элементу не пустого набора deque.</summary>
      <returns>Первый элемент управляемой последовательности.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.get_generation">
      <summary>Возвращает текущее поколение изменений базового контейнера.</summary>
      <returns>Текущее поколение изменений базового контейнера.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <summary>Добавляет элемент в указанное положение контейнера.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает новый вставленный элемент.</param>
      <param name="_Where">Положение в контейнере, перед которым нужно вставить элементы.</param>
      <param name="_Val">Элемент, который нужно вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Добавляет элементы в указанное положение контейнера.</summary>
      <param name="_Where">Положение в контейнере, перед которым нужно вставить элементы.</param>
      <param name="_First">Начало диапазона, который необходимо вставить в контейнер.</param>
      <param name="_Last">Первое положение после диапазона элементов, который необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <summary>Добавляет элементы в указанное положение контейнера.</summary>
      <param name="_Where_iter">Положение в контейнере, перед которым нужно вставить элементы.</param>
      <param name="_Right">Перечисление элементов, которые необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <summary>Добавляет указанное количество элементов в заданное положение в контейнере.</summary>
      <param name="_Where">Положение в контейнере, перед которым нужно вставить элементы.</param>
      <param name="_Count">Количество элементов, которые необходимо вставить в контейнер.</param>
      <param name="_Val">Значения элементов, которые нужно вставить в контейнер.</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IDeque`1.Item(System.Int32)">
      <summary>Возвращает или задает элемент в указанном положении в контейнере.</summary>
      <returns>Элемент в указанном положении.</returns>
      <param name="_Pos">Положение элемента, которое необходимо получить или задать.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.pop_back">
      <summary>Удаляет последний элемент не пустого контейнера.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.pop_front">
      <summary>Удаляет первый элемент не пустого контейнера.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.push_back(`0)">
      <summary>Добавляет элемент в конец контейнера.</summary>
      <param name="_Val">Элемент, который необходимо добавить в конец контейнера.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.push_front(`0)">
      <summary>Добавляет элемент в начало контейнера.</summary>
      <param name="_Val">Элемент, который необходимо добавить в начало контейнера.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>Задает начало обратной управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Обратный итератор, который задает последний элемент управляемой последовательности или элемент, расположенный непосредственно перед началом пустой последовательности.Таким образом, он задает для обратной последовательности параметр <paramref name="beginning" />.Используется для получения итератора, который задает начало управляемой последовательности с параметром <paramref name="current" />, отображаемой в обратном порядке, однако в случае изменения длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>Задает конец обратной управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Обратный итератор, который задает положение перед началом управляемой последовательности.Таким образом, он задает для обратной последовательности параметр <paramref name="end" />.Используется для получения итератора, который задает конец управляемой последовательности с параметром <paramref name="current" />, отображаемой в обратном порядке, однако в случае изменения длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32)">
      <summary>Изменяет количество элементов.</summary>
      <param name="_Newsize">Новый размер управляемой последовательности.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.resize(System.Int32,`0)">
      <summary>Изменяет количество элементов.</summary>
      <param name="_Newsize">Новый размер управляемой последовательности.</param>
      <param name="_Val">Значение элемента-заполнителя.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.size">
      <summary>Подсчитывает количество элементов.</summary>
      <returns>Длина управляемой последовательности.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IDeque`1.swap(Microsoft.VisualC.StlClr.IDeque{`0})">
      <summary>Меняет местами содержимое двух контейнеров.</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IHash`2">
      <summary>Определяет интерфейс объектов hash_map, hash_multimap, hash_set и hash_multiset библиотеки STL/CLR.</summary>
      <typeparam name="TKey">Тип ключа для элемента в управляемой последовательности.</typeparam>
      <typeparam name="TValue">Тип значения для элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>Задает начало управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Двунаправленный итератор, который задает первый элемент управляемой последовательности или элемент, расположенный непосредственно после конца пустой последовательности.Используется для получения итератора, который задает начало управляемой последовательности с параметром <paramref name="current" />, однако в случае изменения длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.bucket_count">
      <summary>Подсчитывает количество сегментов в хэш-таблице.</summary>
      <returns>Текущее количество сегментов в хэш-таблице.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.clear">
      <summary>Удаляет все элементы из контейнера.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.count(`0)">
      <summary>Определяет количество элементов, которые соответствуют заданному ключу.</summary>
      <returns>Количество элементов управляемой последовательности с ключом <paramref name="_Keyval" />.Используется для определения количества элементов в управляемой последовательности, ключ которых в данный момент совпадает с заданным ключом.</returns>
      <param name="_Keyval">Значение ключа, по которому выполняется поиск.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.empty">
      <summary>Проверяет, действительно ли в контейнере нет элементов.</summary>
      <returns>Если элементов в контейнере нет, значение true, если есть, значение false.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>Задает конец управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Двунаправленный итератор, который указывает конец управляемой последовательности.Используется для получения итератора, который задает конец управляемой последовательности.При изменении длины управляемой последовательности его состояние не меняется.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)">
      <summary>Определяет диапазон, соответствующий указанному ключу.</summary>
      <returns>Пара итераторов.</returns>
      <param name="__unnamed0">Пара итераторов, которые определяют диапазон элементов в управляемой последовательности, ключ которых в данный момент совпадает с заданным ключом.</param>
      <param name="_Keyval">Значение ключа, по которому выполняется поиск.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>Удаляет из контейнера элемент, указанный данным итератором.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает первый элемент после удаленного элемента или элемент <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />, если таковой не существует.</param>
      <param name="_Where">Итератор, который указывает на элемент, подлежащий удалению.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>Удаляет из контейнера элементы, находящиеся между заданными итераторами.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает первый элемент после удаления элементов, или элемент <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />, если таковой не существует.</param>
      <param name="_First_iter">Итератор, который указывает на начало диапазона удаления.</param>
      <param name="_Last_iter">Итератор, который задает положение непосредственно после диапазона удаления.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.erase(`0)">
      <summary>Удаляет из контейнера элементы, которые соответствуют заданному ключу.</summary>
      <returns>Количество удаленных элементов.</returns>
      <param name="_Keyval">Значение ключа для удаления.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>Определяет элемент, соответствующий указанному ключу.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает один из найденных элементов или элемент <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />, если таковой не найден.</param>
      <param name="_Keyval">Значение ключа, по которому выполняется поиск.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.hash_delegate">
      <summary>Возвращает делегат, который используется для преобразования значения ключа в целочисленное значение.</summary>
      <returns>Делегат, который используется для преобразования значения ключа в целочисленное значение.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)">
      <summary>Добавляет в контейнер заданный элемент.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает новый вставленный элемент.</param>
      <param name="_Where">Итератор, который указывает положение в контейнере, в которое необходимо вставить элемент.Он нужен только как подсказка и используется для повышения производительности.Вставка элемента в это положение может не выполняться.</param>
      <param name="_Val">Значение ключа, которое необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})">
      <summary>Добавляет в контейнер элементы, указанные данными итераторами.</summary>
      <param name="_First">Итератор, который указывает на начало диапазона элементов для вставки.</param>
      <param name="_Last">Итератор, который указывает на элемент, расположенный непосредственно после элементов для вставки.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)">
      <summary>Добавляет в контейнер заданное значение.</summary>
      <returns>Пара итераторов.</returns>
      <param name="__unnamed0">Пара значений X.Если значение X.second равно true, значение X.first соответствует новому вставленному элементу; если нет, значение X.first соответствует уже существующему элементу с эквивалентным упорядочением и новый элемент не добавляется.</param>
      <param name="_Val">Значение ключа, которое необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.insert(System.Collections.IEnumerable)">
      <summary>Добавляет в контейнер заданное перечисление.</summary>
      <param name="_Right">Перечисление, которое необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.key_comp">
      <summary>Возвращает делегата упорядочения, который используется для упорядочения управляемой последовательности.Используется для сравнения двух ключей.</summary>
      <returns>Делегат упорядочения, который используется для упорядочения управляемой последовательности.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.load_factor">
      <summary>Подсчитывает среднее количество элементов на сегмент в хэш-таблице.</summary>
      <returns>Среднее количество элементов на сегмент в хэш-таблице.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>Ищет начало диапазона элементов, которые соответствуют заданному ключу.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, задающий первый элемент управляемой последовательности, который относится к тому же сегменту хэш-таблицы, что и ключ <paramref name="_Keyval" />, и упорядочен так же, как и элемент с ключом <paramref name="_Keyval" />.Если такого элемента нет, возвращает метод <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />.</param>
      <param name="_Keyval">Значение ключа, по которому выполняется поиск.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor">
      <summary>Возвращает максимальное количество элементов на сегмент в хэш-таблице.</summary>
      <returns>Максимальное количество элементов на сегмент в хэш-таблице.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.max_load_factor(System.Single)">
      <summary>Задает максимальное количество элементов на сегмент в хэш-таблице.</summary>
      <param name="_Newmax">Максимальное количество элементов на сегмент в хэш-таблице.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>Задает начало обратной управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Обратный итератор, который задает последний элемент управляемой последовательности или элемент, расположенный непосредственно перед началом пустой последовательности.Таким образом, он задает для обратной последовательности параметр <paramref name="beginning" />.Используется для получения итератора, который задает начало отображаемой в обратном порядке управляемой последовательности с параметром <paramref name="current" />.При изменении длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.rehash(System.Int32)">
      <summary>Повторно создает хэш-таблицу.</summary>
      <param name="_Buckets">Количество сегментов в хэш-таблице.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>Задает конец обратной управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Обратный итератор, который указывает начало управляемой последовательности.Таким образом, он задает для обратной последовательности параметр <paramref name="end" />.Используется для получения итератора, который задает конец отображаемой в обратном порядке управляемой последовательности с параметром <paramref name="current" />.При изменении длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.size">
      <summary>Подсчитывает количество элементов в контейнере.</summary>
      <returns>Длина управляемой последовательности.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.swap(Microsoft.VisualC.StlClr.IHash{`0,`1})">
      <summary>Меняет местами содержимое двух контейнеров.</summary>
      <param name="_Right">Контейнер, с которым производится обмен содержимым.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>Определяет конец диапазона элементов, которые соответствуют заданному ключу.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, задающий первый элемент, расположенный за последним элементом управляемой последовательности, который относится к тому же сегменту хэш-таблицы, что и ключ <paramref name="_Keyval" />, и упорядочен так же, как и элемент с ключом <paramref name="_Keyval" />.Если такого элемента нет, возвращает метод <see cref="M:Microsoft.VisualC.StlClr.IHash`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />.</param>
      <param name="_Keyval">Искомое значение ключа.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IHash`2.value_comp">
      <summary>Возвращает делегата упорядочения, который используется для упорядочения управляемой последовательности.</summary>
      <returns>Делегат упорядочения, который используется для упорядочения управляемой последовательности.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IList`1">
      <summary>Определяет интерфейс для объекта list библиотеки STL/CLR.</summary>
      <typeparam name="TValue">Тип элемента списка.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Заменяет управляемую последовательность последовательностью [<paramref name="_First" />, <paramref name="_Last" />).</summary>
      <param name="_First">Начальное положение диапазона элементов, который необходимо вставить в контейнер.</param>
      <param name="_Last">Первое положение перед диапазоном элементов, который необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)">
      <summary>Заменяет управляемую последовательность последовательностью, назначенной заданным перечислителем.</summary>
      <param name="_Right">Перечисление, элементы которого следует вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)">
      <summary>Заменяет управляемую последовательность заданным количеством указанных элементов.</summary>
      <param name="_Count">Количество элементов, которые необходимо вставить в контейнер.</param>
      <param name="_Val">Значения элементов, которые необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.back">
      <summary>Осуществляет доступ к последнему элементу в контейнере.</summary>
      <returns>Последний элемент управляемой последовательности, который не должен быть пустым.</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IList`1.back_item">
      <summary>Осуществляет доступ к последнему элементу в контейнере.</summary>
      <returns>Последний элемент управляемой последовательности, который не должен быть пустым.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>Задает начало управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор с произвольным доступом, который задает первый элемент управляемой последовательности или элемент, расположенный непосредственно после конца пустой последовательности.Используется для получения итератора, который задает начало управляемой последовательности с параметром <paramref name="current" />, однако в случае изменения длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.clear">
      <summary>Удаляет все элементы из контейнера.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.empty">
      <summary>Проверяет, действительно ли в контейнере отсутствуют элементы.</summary>
      <returns>Если элементы в контейнере отсутствуют, значение true, если они есть, значение false.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>Задает конец управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор с произвольным доступом, который указывает конец управляемой последовательности.Используется для получения итератора, который задает конец управляемой последовательности.При изменении длины управляемой последовательности его состояние остается неизменным.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>Удаляет один элемент управляемой последовательности, расположенный в положении, заданном указанным перечисилитем.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает первый элемент из оставшихся после удаления, или элемент <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />, если таковой не существует.</param>
      <param name="_Where">Положение элемента, который нужно удалить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>Удаляет элементы управляемой последовательности в диапазоне [<paramref name="_First_iter" />, <paramref name="_Last_iter" />).</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает первый элемент из оставшихся после удаления, или элемент <see cref="M:Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)" />, если таковой существует.</param>
      <param name="_First_iter">Начальное положение диапазона элементов для удаления.</param>
      <param name="_Last_iter">Первое положение после конца диапазона элементов для удаления.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.front">
      <summary>Осуществляет доступ к первому элементу в контейнере.</summary>
      <returns>Первый элемент управляемой последовательности, который не должен быть пустым.</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IList`1.front_item">
      <summary>Осуществляет доступ к первому элементу в контейнере.</summary>
      <returns>Первый элемент управляемой последовательности, который не должен быть пустым.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <summary>Вставляет в контейнер элемент с заданным значением.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает новый вставленный элемент.</param>
      <param name="_Where">Положение в контейнере непосредственно после новых вставленных элементов.</param>
      <param name="_Val">Значение элемента, который необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Вставляет в контейнер последовательность [<paramref name="_First" />, <paramref name="_Last" />).</summary>
      <param name="_Where">Положение в контейнере непосредственно после новых вставленных элементов.</param>
      <param name="_First">Начальное положение диапазона элементов, который необходимо вставить в контейнер.</param>
      <param name="_Last">Первое положение перед диапазоном элементов, который необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <summary>Вставляет в контейнер элементы заданного перечислителя.</summary>
      <param name="_Where_iter">Положение в контейнере, перед которым нужно вставить элементы.</param>
      <param name="_Right">Перечисление, элементы которого следует вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <summary>Вставляет в контейнер заданное количество элементов с указанным значением.</summary>
      <param name="_Where">Положение в контейнере непосредственно после новых вставленных элементов.</param>
      <param name="_Count">Количество элементов, которые необходимо вставить в контейнер.</param>
      <param name="_Val">Значения элементов, которые необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <summary>Объединяет две упорядоченные управляемые последовательности.</summary>
      <param name="_Right">Контейнер, который необходимо объединить с данным контейнером.</param>
      <param name="_Pred">Логическая функция для попарного сравнения элементов.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.pop_back">
      <summary>Удаляет последний элемент из контейнера.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.pop_front">
      <summary>Удаляет первый элемент из контейнера.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.push_back(`0)">
      <summary>Добавляет новый элемент в конец контейнера.</summary>
      <param name="_Val">Значение элемента, который необходимо добавить в конец контейнера.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.push_front(`0)">
      <summary>Добавляет новый элемент в начало контейнера.</summary>
      <param name="_Val">Значение элемента, который необходимо вставить в начале контейнера.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>Задает начало обратной управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Обратный итератор, который задает последний элемент управляемой последовательности, или положение непосредственно перед началом пустой последовательности.Таким образом, он задает для обратной последовательности параметр <paramref name="beginning" />.Используется для получения итератора, который задает начало управляемой последовательности с параметром <paramref name="current" />, которая отображается в обратном порядке, однако в случае изменения длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.remove(`0)">
      <summary>Удаляет из контейнера элемент с заданным значением.</summary>
      <param name="_Val">Значение элемента, который нужно удалить из контейнера.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.remove_if(Microsoft.VisualC.StlClr.UnaryDelegate{`0,System.Boolean})">
      <summary>Удаляет из контейнера элементы, которые прошли заданный тест.</summary>
      <param name="_Pred">Логический тест, позволяющий определить элементы, которые подлежат удалению.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>Задает конец обратной управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Обратный итератор, который задает положение перед началом управляемой последовательности.Таким образом, он задает для обратной последовательности параметр <paramref name="end" />.Используется для получения итератора, который задает конец управляемой последовательности с параметром <paramref name="current" />, отображаемой в обратном порядке, однако в случае изменения длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)">
      <summary>Изменяет количество элементов в контейнере до указанной величины.</summary>
      <param name="_Newsize">Новый размер контейнера.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)">
      <summary>Изменяет количество элементов в контейнере до указанной величины.Если новый размер больше старого, в конец контейнера будут вставлены заданные значения.</summary>
      <param name="_Newsize">Новый размер контейнера.</param>
      <param name="_Val">Значение элементов-заполнителей.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.reverse">
      <summary>Меняет порядок элементов в управляемой последовательности на противоположный.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.size">
      <summary>Подсчитывает количество элементов в контейнере.</summary>
      <returns>Длина управляемой последовательности.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <summary>Упорядочивает управляемую последовательность.</summary>
      <param name="_Pred">Оператор, который будет использоваться для сравнения элементов при упорядочении.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0})">
      <summary>Вставляет заданную последовательность в контейнер перед указанным положением.</summary>
      <param name="_Where">Положение в контейнере, перед которым необходимо присоединить элементы.</param>
      <param name="_Right">Контейнер, элементы которого необходимо присоединить.После операции присоединения все элементы в этом контейнере будут удалены.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>Удаляет элемент, положение которого определяется параметром <paramref name="_First" />, из заданного контейнера и вставляет его перед элементом в управляемой последовательности, положение которого соответствует значению параметра <paramref name="_Where" />.</summary>
      <param name="_Where">Положение в контейнере, перед которым необходимо присоединить элементы.</param>
      <param name="_Right">Контейнер, элементы которого необходимо присоединить.</param>
      <param name="_First">Положение элемента, который необходимо присоединить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>Удаляет диапазон элементов [<paramref name="_First" />, <paramref name="_Last" />) из заданного контейнера и вставляет его перед элементом в управляемой последовательности, положение которого соответствует значению параметра <paramref name="_Where" />.</summary>
      <param name="_Where">Положение в контейнере, перед которым необходимо присоединить элементы.</param>
      <param name="_Right">Контейнер, элементы которого необходимо присоединить.</param>
      <param name="_First">Начальное положение диапазона элементов для присоединения.</param>
      <param name="_Last">Первое положение после конца диапазона элементов для присоединения.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList{`0})">
      <summary>Меняет местами содержимое двух контейнеров.</summary>
      <param name="_Right">Контейнер для обмена содержимым.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})">
      <summary>Удаляет смежные элементы, которые прошли заданный тест.</summary>
      <param name="_Pred">Функция сравнения, которая проверяет уникальность пар элементов.Элемент, который не является уникальным, будет удален из контейнера.</param>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IPriorityQueue`2">
      <summary>Определяет интерфейс для объекта priority_queue библиотеки STL/CLR.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
      <typeparam name="TCont">Тип базового контейнера.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.assign(Microsoft.VisualC.StlClr.IPriorityQueue{`0,`1})">
      <summary>Заменяет все элементы контейнера.</summary>
      <param name="_Right">Адаптер контейнера, который необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.empty">
      <summary>Определяет, действительно ли в контейнере отсутствуют элементы.</summary>
      <returns>Если элементы в контейнере отсутствуют, значение true, если они есть, значение false.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.get_container">
      <summary>Осуществляет доступ к базовому контейнеру.</summary>
      <returns>Базовый контейнер.Можно использовать для обхода ограничений, налагаемых оболочкой контейнера.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.pop">
      <summary>Удаляет элемент контейнера с наивысшим приоритетом.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.push(`0)">
      <summary>Добавляет в контейнер новый элемент.</summary>
      <param name="_Val">Элемент, который необходимо вставить в управляемую последовательность.Затем управляемая последовательность упорядочивается повторно для сохранения дисциплины кучи.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.size">
      <summary>Подсчитывает количество элементов в контейнере.</summary>
      <returns>Длина управляемой последовательности.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.top">
      <summary>Осуществляет доступ к элементу контейнера с наивысшим приоритетом.</summary>
      <returns>Элемент управляемой последовательности высшего уровня (с наивысшим приоритетом), который не должен быть пустым.</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IPriorityQueue`2.top_item">
      <summary>Осуществляет доступ к элементу контейнера с наивысшим приоритетом.</summary>
      <returns>Элемент управляемой последовательности высшего уровня (с наивысшим приоритетом), который не должен быть пустым.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IPriorityQueue`2.value_comp">
      <summary>Копирует делегат упорядочения для двух элементов.</summary>
      <returns>Делегат упорядочения, используемый для упорядочения управляемой последовательности.Используется для сравнения двух значений.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IQueue`2">
      <summary>Определяет интерфейс для объекта queue библиотеки STL/CLR.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
      <typeparam name="TCont">Тип базового контейнера.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.assign(Microsoft.VisualC.StlClr.IQueue{`0,`1})">
      <summary>Заменяет все элементы контейнера содержимым предоставленного контейнера.</summary>
      <param name="_Right">Адаптер контейнера, элемент которого будет вставлен в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.back">
      <summary>Осуществляет доступ к последнему элементу в контейнере.</summary>
      <returns>Последний элемент управляемой последовательности, который не должен быть пустым.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.empty">
      <summary>Определяет, действительно ли в контейнере отсутствуют элементы.</summary>
      <returns>Если элементы в контейнере отсутствуют, значение true, если они есть, значение false.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.front">
      <summary>Осуществляет доступ к первому элементу в контейнере.</summary>
      <returns>Первый элемент управляемой последовательности, который не должен быть пустым.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.get_container">
      <summary>Осуществляет доступ к базовому контейнеру.</summary>
      <returns>Базовый контейнер.Используется, чтобы обойти ограничение, налагаемое на оболочку контейнера.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.pop">
      <summary>Удаляет последний элемент в контейнере.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.push(`0)">
      <summary>Добавляет элемент в начало контейнера.</summary>
      <param name="_Val">Значение, которое необходимо добавить в начало контейнера.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IQueue`2.size">
      <summary>Подсчитывает количество элементов в контейнере.</summary>
      <returns>Длина управляемой последовательности.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IStack`2">
      <summary>Определяет интерфейс для объекта stack библиотеки STL/CLR.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
      <typeparam name="TCont">Тип базового контейнера.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.assign(Microsoft.VisualC.StlClr.IStack{`0,`1})">
      <summary>Заменяет все элементы в контейнере элементами предоставленного контейнера.</summary>
      <param name="_Right">Адаптер контейнера, элементы которого следует вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.empty">
      <summary>Определяет, действительно ли в контейнере отсутствуют элементы.</summary>
      <returns>Если элементы в контейнере отсутствуют, значение true, если они есть, значение false.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.get_container">
      <summary>Осуществляет доступ к базовому контейнеру.</summary>
      <returns>Базовый контейнер.Используется, чтобы обойти ограничение, налагаемое на оболочку контейнера.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.pop">
      <summary>Удаляет последний элемент в контейнере.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.push(`0)">
      <summary>Добавляет в конец контейнера новый элемент.</summary>
      <param name="_Val">Значение, которое необходимо добавить в конец контейнера.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.size">
      <summary>Подсчитывает количество элементов в контейнере.</summary>
      <returns>Длина управляемой последовательности.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IStack`2.top">
      <summary>Осуществляет доступ к последнему элементу в контейнере.</summary>
      <returns>Последний элемент управляемой последовательности, который не должен быть пустым.</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IStack`2.top_item">
      <summary>Осуществляет доступ к последнему элементу в контейнере.</summary>
      <returns>Последний элемент управляемой последовательности, который не должен быть пустым.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.ITree`2">
      <summary>Определяет интерфейс объектов hash_map, hash_multimap, hash_set и hash_multiset библиотеки STL/CLR.</summary>
      <typeparam name="TKey">Тип ключа для элемента в управляемой последовательности.</typeparam>
      <typeparam name="TValue">Тип значения для элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>Задает начало управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Двунаправленный итератор, который задает первый элемент управляемой последовательности или элемент, расположенный непосредственно после конца пустой последовательности.Используется для получения итератора, который задает начало управляемой последовательности с параметром <paramref name="current" />, однако в случае изменения длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.clear">
      <summary>Удаляет все элементы из контейнера.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.count(`0)">
      <summary>Определяет количество элементов, которые соответствуют заданному ключу.</summary>
      <returns>Количество элементов управляемой последовательности с ключом <paramref name="_Keyval" />.Используется для определения количества элементов в управляемой последовательности, ключ которых в данный момент совпадает с заданным ключом.</returns>
      <param name="_Keyval">Значение ключа, по которому выполняется поиск.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.empty">
      <summary>Проверяет, действительно ли в контейнере нет элементов.</summary>
      <returns>Если элементов в контейнере нет, значение true, если есть, значение false.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)">
      <summary>Задает конец управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Двунаправленный итератор, который указывает конец управляемой последовательности.Используется для получения итератора, который задает конец управляемой последовательности.При изменении длины управляемой последовательности его состояние не меняется.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)">
      <summary>Определяет диапазон, соответствующий указанному ключу.</summary>
      <returns>Пара итераторов.</returns>
      <param name="__unnamed0">Пара итераторов, которые определяют диапазон элементов в управляемой последовательности, ключ которых в данный момент совпадает с заданным ключом.</param>
      <param name="_Keyval">Значение ключа, по которому выполняется поиск.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>Удаляет из контейнера элемент, указанный данным итератором.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает первый элемент после удаленного элемента или элемент <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />, если таковой не существует.</param>
      <param name="_Where">Итератор, который указывает на элемент, подлежащий удалению.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue)">
      <summary>Удаляет из контейнера элементы, находящиеся между заданными итераторами.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает первый элемент после удаленных элементов или элемент <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />, если таковой не существует.</param>
      <param name="_First_iter">Итератор, который указывает на начало диапазона удаления.</param>
      <param name="_Last_iter">Итератор, который задает положение непосредственно после диапазона удаления.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.erase(`0)">
      <summary>Удаляет из контейнера элементы, которые соответствуют заданному ключу.</summary>
      <returns>Количество удаленных элементов.</returns>
      <param name="_Keyval">Значение ключа для удаления.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>Определяет элемент, соответствующий указанному ключу.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает один из найденных элементов или элемент <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />, если таковой не найден.</param>
      <param name="_Keyval">Значение ключа, по которому выполняется поиск.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}|System.Runtime.CompilerServices.IsByValue,`1)">
      <summary>Добавляет в контейнер заданный элемент.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает новый вставленный элемент.</param>
      <param name="_Where">Итератор, который указывает положение в контейнере, в которое необходимо вставить элемент.Он нужен только как подсказка и используется для повышения производительности.Вставка элемента в это положение может не выполняться.</param>
      <param name="_Val">Значение ключа, которое необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator{`1},Microsoft.VisualC.StlClr.Generic.IInputIterator{`1})">
      <summary>Добавляет в контейнер элементы, указанные данными итераторами.</summary>
      <param name="_First">Итератор, который указывает на начало диапазона элементов для вставки.</param>
      <param name="_Last">Итератор, который указывает на элемент, расположенный непосредственно после элементов для вставки.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)">
      <summary>Добавляет в контейнер заданное значение.</summary>
      <returns>Пара итераторов.</returns>
      <param name="__unnamed0">Пара значений X.Если значение X.second равно true, значение X.first соответствует новому вставленному элементу; если нет, значение X.first соответствует уже существующему элементу с эквивалентным упорядочением и новый элемент не добавляется.</param>
      <param name="_Val">Значение ключа, которое необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.insert(System.Collections.Generic.IEnumerable{`1})">
      <summary>Добавляет в контейнер заданное перечисление.</summary>
      <param name="_Right">Перечисление, которое необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.key_comp">
      <summary>Возвращает делегата упорядочения, который используется для упорядочения управляемой последовательности.Используется для сравнения двух ключей.</summary>
      <returns>Делегат упорядочения, который используется для упорядочения управляемой последовательности.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>Определяет начало диапазона элементов, которые соответствуют заданному ключу.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, задающий первый элемент управляемой последовательности, который относится к тому же сегменту хэш-таблицы, что и ключ <paramref name="_Keyval" />, и упорядочен так же, как и элемент с ключом <paramref name="_Keyval" />.Если такого элемента нет, возвращает метод <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />.</param>
      <param name="_Keyval">Значение ключа, по которому выполняется поиск.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>Задает начало обратной управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Обратный итератор, который задает последний элемент управляемой последовательности или элемент, расположенный непосредственно перед началом пустой последовательности.Таким образом, он задает для обратной последовательности параметр <paramref name="beginning" />.Используется для получения итератора, который задает начало отображаемой в обратном порядке управляемой последовательности с параметром <paramref name="current" />.При изменении длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`1}@)">
      <summary>Задает конец обратной управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Обратный итератор, который указывает начало управляемой последовательности.Таким образом, он задает для обратной последовательности параметр <paramref name="end" />.Используется для получения итератора, который задает конец отображаемой в обратном порядке управляемой последовательности с параметром <paramref name="current" />.При изменении длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.size">
      <summary>Подсчитывает количество элементов в контейнере.</summary>
      <returns>Длина управляемой последовательности.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.swap(Microsoft.VisualC.StlClr.ITree{`0,`1})">
      <summary>Меняет местами содержимое двух контейнеров.</summary>
      <param name="_Right">Контейнер, с которым производится обмен содержимым.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@,`0)">
      <summary>Определяет конец диапазона элементов, которые соответствуют заданному ключу.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, задающий первый элемент, расположенный за последним элементом управляемой последовательности, который относится к тому же сегменту хэш-таблицы, что и ключ <paramref name="_Keyval" />, и упорядочен так же, как и элемент с ключом <paramref name="_Keyval" />.Если такого элемента нет, возвращает метод <see cref="M:Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}@)" />.</param>
      <param name="_Keyval">Искомое значение ключа.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ITree`2.value_comp">
      <summary>Возвращает делегата упорядочения, который используется для упорядочения управляемой последовательности.</summary>
      <returns>Делегат упорядочения, который используется для упорядочения управляемой последовательности.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.IVector`1">
      <summary>Определяет интерфейс объекта vector библиотеки STL/CLR.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Заменяет все элементы в контейнере элементами, расположенными между заданными итераторами.</summary>
      <param name="_First">Начальное положение диапазона элементов для вставки.</param>
      <param name="_Last">Первое положение после конца диапазона элементов для вставки.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)">
      <summary>Заменяет все элементы в контейнере элементами в заданном перечислении.</summary>
      <param name="_Right">Перечисление, элементы которого следует вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)">
      <summary>Заменяет все элементы в контейнере заданным количеством элементов, для которых указаны соответствующие значения.</summary>
      <param name="_Count">Количество элементов, которые необходимо вставить в контейнер.</param>
      <param name="_Val">Значение элемента, который необходимо вставить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.at(System.Int32)">
      <summary>Осуществляет доступ к элементу, который находится в контейнере в заданном положении.</summary>
      <returns>Элемент управляемой последовательности в положении <paramref name="_Pos" />.</returns>
      <param name="_Pos">Положение элемента, к которому производится доступ.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.back">
      <summary>Осуществляет доступ к последнему элементу в контейнере.</summary>
      <returns>Последний элемент управляемой последовательности, который не должен быть пустым.</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IVector`1.back_item">
      <summary>Осуществляет доступ к последнему элементу в контейнере.</summary>
      <returns>Последний элемент управляемой последовательности, который не должен быть пустым.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>Задает начало управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор с произвольным доступом, который задает первый элемент управляемой последовательности или элемент, расположенный непосредственно после конца пустой последовательности.Используется для получения итератора, который задает начало управляемой последовательности с параметром <paramref name="current" />, однако в случае изменения длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.capacity">
      <summary>Возвращает объем пространства, выделенного для хранения контейнера.</summary>
      <returns>Пространство, выделяемое в данный момент для хранения управляемой последовательности, значение, которое большое или равно величине, возвращаемой методом <see cref="M:Microsoft.VisualC.StlClr.IVector`1.size" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.clear">
      <summary>Удаляет все элементы из контейнера.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.empty">
      <summary>Проверяет, действительно ли в контейнере отсутствуют элементы.</summary>
      <returns>Если элементы в контейнере отсутствуют, значение true, если они есть, значение false.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>Задает конец управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор с произвольным доступом, который указывает конец управляемой последовательности.Используется для получения итератора, который задает конец управляемой последовательности с параметром <paramref name="current" />, однако в случае изменения длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>Удаляет один элемент управляемой последовательности, определяемый параметром <paramref name="_Where" />.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает первый элемент из оставшихся после удаления элементов, или элемент <see cref="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />, если таковой не существует.</param>
      <param name="_Where">Положение элемента, который необходимо удалить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>Удаляет элементы управляемой последовательности в диапазоне [<paramref name="_First_iter" />, <paramref name="_Last_iter" />).</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает первый элемент из оставшихся после удаления элементов, или элемент <see cref="M:Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />, если таковой не существует.</param>
      <param name="_First_iter">Начало диапазона элементов для удаления.</param>
      <param name="_Last_iter">Первое положение после конца диапазона элементов для удаления.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.front">
      <summary>Осуществляет доступ к первому элементу в контейнере.</summary>
      <returns>Первый элемент управляемой последовательности, который не должен быть пустым.</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IVector`1.front_item">
      <summary>Осуществляет доступ к первому элементу в контейнере.</summary>
      <returns>Первый элемент управляемой последовательности, который не должен быть пустым.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.get_generation">
      <summary>Возвращает текущее поколение изменений базового контейнера.</summary>
      <returns>Текущее поколение изменений базового контейнера.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,`0)">
      <summary>Вставляет в контейнер указанное значение.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Итератор, который задает новый вставленный элемент.</param>
      <param name="_Where">Положение в контейнере, перед которым необходимо вставить элементы.</param>
      <param name="_Val">Значение элемента, который необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Вставляет в контейнер последовательность, начинающуюся с <paramref name="_First" /> и заканчивающуюся элементом, предшествующим <paramref name="_Last" />.</summary>
      <param name="_Where">Положение в контейнере, перед которым необходимо вставить элементы.</param>
      <param name="_First">Начальное положение диапазона, который необходимо вставить в контейнер.</param>
      <param name="_Last">Первое положение после диапазона, который необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Collections.IEnumerable)">
      <summary>Вставляет в контейнер последовательность, назначенную перечислителем.</summary>
      <param name="_Where_iter">Положение в контейнере, перед которым необходимо вставить элементы.</param>
      <param name="_Right">Перечисление, которое необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue,System.Int32,`0)">
      <summary>Вставляет в контейнер заданное количество указанных элементов.</summary>
      <param name="_Where">Положение в контейнере, перед которым необходимо вставить элементы.</param>
      <param name="_Count">Количество элементов, которые необходимо вставить в контейнер.</param>
      <param name="_Val">Значение элемента, который необходимо вставить в контейнер.</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.IVector`1.Item(System.Int32)">
      <summary>Осуществляет доступ к элементу, который находится в контейнере в заданном положении.</summary>
      <returns>Элемент в положении <paramref name="_Pos" />.</returns>
      <param name="_Pos">Положение элемента, к которому производится доступ.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.pop_back">
      <summary>Удаляет последний элемент из контейнера.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.push_back(`0)">
      <summary>Добавляет новый элемент в конец контейнера.</summary>
      <param name="_Val">Значение элемента, который необходимо вставить в контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>Задает начало обратной управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Обратный итератор, который задает последний элемент управляемой последовательности или элемент, расположенный непосредственно перед началом пустой последовательности.Таким образом, он задает для обратной последовательности параметр <paramref name="beginning" />.Используется для получения итератора, который задает начало управляемой последовательности с параметром <paramref name="current" />, отображаемой в обратном порядке, однако в случае изменения длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>Задает конец обратной управляемой последовательности.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Обратный итератор, который задает положение перед началом управляемой последовательности.Таким образом, он задает для обратной последовательности параметр <paramref name="end" />.Используется для получения итератора, который задает конец управляемой последовательности с параметром <paramref name="current" />, отображаемой в обратном порядке, однако в случае изменения длины управляемой последовательности его состояние может измениться.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.reserve(System.Int32)">
      <summary>Резервирует место, для обеспечения минимальных возможностей для увеличения вместимости контейнера.</summary>
      <param name="_Capacity">Новая минимальная вместимость контейнера.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)">
      <summary>Изменяет количество элементов в контейнере до указанной величины.</summary>
      <param name="_Newsize">Новый размер управляемой последовательности.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)">
      <summary>Изменяет количество элементов в контейнере до указанной величины.Если новый размер больше старого, метод добавляет элементы со значением <paramref name="_Val" />.</summary>
      <param name="_Newsize">Новый размер управляемой последовательности.</param>
      <param name="_Val">Значение элементов, которые необходимо вставить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.size">
      <summary>Подсчитывает количество элементов в контейнере.</summary>
      <returns>Длина управляемой последовательности.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector{`0})">
      <summary>Меняет местами содержимое двух контейнеров.</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.ListEnumerator`1">
      <summary>Поддерживает простую итерацию по любому объекту STL/CLR, реализующему интерфейс <see cref="T:Microsoft.VisualC.StlClr.IList`1" />.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />.</summary>
      <param name="_First">Первый узел в контейнере, по которому выполняется итерация.</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.ListEnumerator`1.Current">
      <summary>Возвращает или задает текущий элемент в наборе.</summary>
      <returns>Текущий элемент в наборе.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose">
      <summary>Освобождает, разблокирует или сбрасывает неуправляемые ресурсы, используемые объектом <see cref="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Dispose(System.Boolean)">
      <summary>Освобождает, разблокирует или сбрасывает неуправляемые ресурсы, используемые объектом <see cref="T:Microsoft.VisualC.StlClr.ListEnumerator`1" />.</summary>
      <param name="__unnamed0">Значение true для удаления управляемых объектов; значение false для удаления неуправляемых объектов.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу набора.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца набора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumerator`1.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом набора.</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1">
      <summary>Поддерживает простую итерацию по любому объекту STL/CLR, реализующему интерфейс <see cref="T:Microsoft.VisualC.StlClr.IList`1" />.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.ListEnumeratorBase`1" />.</summary>
      <param name="_First">Первый узел в контейнере, по которому выполняется итерация.</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Current">
      <summary>Возвращает или задает текущий элемент в наборе.</summary>
      <returns>Текущий элемент в наборе.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу набора.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца набора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.ListEnumeratorBase`1.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом набора.</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.TreeEnumerator`2">
      <summary>Поддерживает простую итерацию по любому объекту STL/CLR, реализующему интерфейс <see cref="T:Microsoft.VisualC.StlClr.ITree`2" />.</summary>
      <typeparam name="TKey">Тип ключа для элемента в управляемой последовательности.</typeparam>
      <typeparam name="TValue">Тип значения для элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />.</summary>
      <param name="_First">Первый узел в контейнере, по которому выполняется итерация.</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.TreeEnumerator`2.Current">
      <summary>Возвращает или задает текущий элемент в наборе.</summary>
      <returns>Текущий элемент в наборе.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose">
      <summary>Освобождает, разблокирует или сбрасывает неуправляемые ресурсы, используемые объектом <see cref="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Dispose(System.Boolean)">
      <summary>Освобождает, разблокирует или сбрасывает неуправляемые ресурсы, используемые объектом <see cref="T:Microsoft.VisualC.StlClr.TreeEnumerator`2" />.</summary>
      <param name="__unnamed0">Значение true для удаления управляемых объектов; значение false для удаления неуправляемых объектов.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу набора.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца набора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumerator`2.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом набора.</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2">
      <summary>Поддерживает простую итерацию по любому объекту STL/CLR, реализующему интерфейс <see cref="T:Microsoft.VisualC.StlClr.ITree`2" />.</summary>
      <typeparam name="TKey">Тип ключа для элемента в управляемой последовательности.</typeparam>
      <typeparam name="TValue">Тип значения для элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`1})">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2" />.</summary>
      <param name="_First">Первый узел в контейнере, по которому выполняется итерация.</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Current">
      <summary>Возвращает или задает текущий элемент в наборе.</summary>
      <returns>Текущий элемент в наборе.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу набора.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца набора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.TreeEnumeratorBase`2.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом набора.</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.UnaryDelegate`2">
      <summary>Описывает делегат с одним аргументом.Используется для назначения аргумента и типа значения, возвращаемого делегатом.</summary>
      <returns>Тип значения, возвращаемый делегатом.</returns>
      <typeparam name="TArg">Тип аргумента делегата.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемый делегатом.</typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.VectorEnumerator`1">
      <summary>Поддерживает простую итерацию по любому объекту STL/CLR, реализующему интерфейс <see cref="T:Microsoft.VisualC.StlClr.IVector`1" />.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.#ctor(Microsoft.VisualC.StlClr.IVector{`0},System.Int32)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />.</summary>
      <param name="_Cont">Контейнер, по которому выполняется итерация.</param>
      <param name="_First">Смещение текущего первого элемента в контейнере.</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.VectorEnumerator`1.Current">
      <summary>Возвращает или задает текущий элемент в коллекции.</summary>
      <returns>Текущий элемент в наборе.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose">
      <summary>Освобождает, разблокирует или сбрасывает неуправляемые ресурсы, используемые объектом <see cref="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Dispose(System.Boolean)">
      <summary>Освобождает, разблокирует или сбрасывает неуправляемые ресурсы, используемые объектом <see cref="T:Microsoft.VisualC.StlClr.VectorEnumerator`1" />.</summary>
      <param name="__unnamed0">Значение true для удаления управляемых объектов; значение false для удаления неуправляемых объектов.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу набора.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца набора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumerator`1.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом набора.</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1">
      <summary>Поддерживает простую итерацию по любому объекту STL/CLR, реализующему интерфейс <see cref="T:Microsoft.VisualC.StlClr.IVector`1" />.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.#ctor(Microsoft.VisualC.StlClr.IVector{`0},System.Int32)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1" />.</summary>
      <param name="_Cont">Контейнер, по которому выполняется итерация.</param>
      <param name="_First">Смещение текущего первого элемента в контейнере.</param>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Current">
      <summary>Возвращает или задает текущий элемент в наборе.</summary>
      <returns>Текущий элемент в наборе.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу набора.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца набора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.VectorEnumeratorBase`1.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом набора.</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1">
      <summary>Определяет итератор, который может обходить элементы контейнера в прямом направлении, используя оператор увеличения, или в обратном направлении, используя оператор декремента.Элемент, указываемый итератором, не может быть изменен.Двунаправленные итераторы можно использовать всякий раз, когда требуется постоянный итератор ввода или вывода.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.
   </typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />, указывающий на данный узел.</summary>
      <param name="_Node">узел, на который будет указывать итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</summary>
      <param name="_Right">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />, который требуется скопировать.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</summary>
      <param name="_Right">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />, который требуется скопировать.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.Clone">
      <summary>Возвращает копию текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</summary>
      <returns>Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.container">
      <summary>Возвращает контейнер, обход которого выполняет итератор.</summary>
      <returns>Контейнер, который обходит итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</summary>
      <returns>Значение true, если оба объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> совпадают, в противном случае — значение false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_bias">
      <summary>Возвращает сдвиг итератора.Сдвиг — это смещение итератора относительно нулевого элемента.</summary>
      <returns>Сдвиг итератора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_cref">
      <summary>Возвращает константную ссылку на элемент, на который в данный момент указывает итератор.</summary>
      <returns>Постоянная ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_node">
      <summary>Возвращает узел, или элемент, на который указывает итератор.</summary>
      <returns>узел, на который указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.get_ref">
      <summary>Возвращает ссылку на текущий элемент, указанный итератором.</summary>
      <returns>Ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.next">
      <summary>Перемещает итератор в следующую позицию базового контейнера или в первую позицию после последнего элемента контейнера, если обход контейнера завершен полностью.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Присваивает заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> текущему.</summary>
      <returns>Текущий объект (*this).</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />, который присваивается текущему объекту.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Присваивает заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> текущему объекту.</summary>
      <returns>Текущий объект (*this).</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />, который присваивается текущему объекту.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)">
      <summary>Уменьшает итератор на один элемент.Это префиксная версия оператора декремента.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed 0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>Уменьшает итератор на один элемент.Это постфиксная версия оператора декремента.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Неиспользуемый параметр, указывающий, что это постфиксная версия оператора декремента.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>Преобразует объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</summary>
      <returns>Текущий итератор как объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@)">
      <summary>Увеличивает итератор на один элемент.Это префиксная версия оператора увеличения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>Увеличивает итератор на один элемент.Это постфиксная версия оператора увеличения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Неиспользуемый параметр, указывающий, что это постфиксная версия оператора инкремента.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, отличается ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> от текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</summary>
      <returns>true, если два итератора представляют собой разные объекты, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, отличается ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" /> от текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</summary>
      <returns>true, если два итератора представляют собой разные объекты, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.prev">
      <summary>Перемещает итератор к элементу, который непосредственно предшествует текущему элементу.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1.valid">
      <summary>Определяет, является ли итератор действительным и можно ли использовать его для перебора элементов в базовом контейнере.</summary>
      <returns>true, если итератор является допустимым и может использоваться, в противном случае — false.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1">
      <summary>Содержит итератор, поддерживающий следующие операции: перемещение на одну позицию вперед с помощью вызова функции operator++, перемещение на одну позицию назад с помощью вызова функции operator--, доступ к элементу с использованием функции operator[] и доступ к элементу с использованием арифметических операций над указателями.Элемент, указываемый итератором, не может быть изменен.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" />.</summary>
      <param name="_Cont">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" />, копируемый в текущий контейнер.</param>
      <param name="_Offset">Смещение элемента, на который будет указывать созданный итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</summary>
      <param name="_Right">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />, копируемый в текущий контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</summary>
      <param name="_Right">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />, копируемый в текущий контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Clone">
      <summary>Создает копию текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</summary>
      <returns>Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.container">
      <summary>Возвращает контейнер, обход которого выполняет итератор.</summary>
      <returns>Контейнер, который обходит итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет расстояние между элементом, на который указывает текущий итератор, и элементом, на который указывает заданный итератор.</summary>
      <returns>Расстояние (число элементов) между элементом, на который указывает текущий итератор, и элементом, на который указывает итератор <paramref name="_Right" />.Это значение отрицательное, если <paramref name="_Right" /> указывает на элемент, предшествующий элементу, указываемому текущим итератором.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет расстояние между элементом, на который указывает текущий итератор, и элементом, на который указывает заданный итератор.</summary>
      <returns>Расстояние (число элементов) между элементом, на который указывает текущий итератор, и элементом, на который указывает итератор <paramref name="_Right" />.Это значение отрицательное, если <paramref name="_Right" /> указывает на элемент, предшествующий элементу, указываемому текущим итератором.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</summary>
      <returns>Значение true, если оба объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> совпадают; в противном случае — значение false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_bias">
      <summary>Возвращает сдвиг итератора.Сдвиг — это смещение итератора относительно нулевого элемента.</summary>
      <returns>Сдвиг итератора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_cref">
      <summary>Возвращает константную ссылку на элемент, на который в данный момент указывает итератор.</summary>
      <returns>Постоянная ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_node">
      <summary>Возвращает узел, или элемент, на который указывает итератор.</summary>
      <returns>узел, на который указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.get_ref">
      <summary>Возвращает ссылку на текущий элемент, указанный итератором.</summary>
      <returns>Ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.Item(System.Int32)">
      <summary>Производит доступ к элементу, находящемуся в данной позиции в контейнере.</summary>
      <returns>Элемент, находящийся в данной позиции в контейнере.</returns>
      <param name="_Pos">Позиция элемента, к которому производится доступ.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет, предшествует ли элемент контейнера, указываемый текущим итератором, элементу, на который указывает заданный итератор.</summary>
      <returns>true, если текущий итератор указывает на элемент, предшествующий указываемому итератором <paramref name="_Right" />, в противном случае — false.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, предшествует ли элемент контейнера, указываемый текущим итератором, элементу, на который указывает заданный итератор.</summary>
      <returns>true, если текущий итератор указывает на элемент, предшествующий указываемому итератором <paramref name="_Right" />, в противном случае — false.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.move(System.Int32)">
      <summary>Перемещает итератор на заданное число элементов.</summary>
      <returns>Число элементов, фактически пройденных итератором.Это число будет отличаться от значения <paramref name="_Offset" />, если начало или конец контейнера достигается прежде, чем пройдено требуемое число элементов.</returns>
      <param name="_Offset">Число элементов для обхода.Для перемещения итератора вперед укажите положительное число.Для перемещения итератора назад укажите отрицательное число.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.next">
      <summary>Перемещает итератор в следующую позицию базового контейнера или в первую позицию после последнего элемента контейнера, если обход контейнера завершен полностью.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>Увеличивает итератор на заданное число элементов.Целочисленный параметр указывается справа от оператора сложения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="_Right">Число элементов, которое требуется увеличить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsByValue)">
      <summary>Увеличивает итератор на заданное число элементов.Целочисленный параметр указывается слева от оператора сложения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="_Left">Число элементов, которое требуется увеличить.</param>
      <param name="_Right">Итератор, который необходимо увеличить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Присваивает заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> текущему объекту.</summary>
      <returns>Текущий объект (*this).</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />, который присваивается текущему объекту.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Присваивает заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> текущему объекту.</summary>
      <returns>Текущий объект (*this).</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />, который присваивается текущему объекту.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)">
      <summary>Уменьшает итератор на один элемент.Это префиксная версия оператора декремента.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>Уменьшает итератор на один элемент.Это постфиксная версия оператора декремента.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Неиспользуемый параметр, указывающий, что это постфиксная версия оператора.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, больше позиции итератора из правой части.</summary>
      <returns>true, если левый итератор больше правого, в противном случае — false.</returns>
      <param name="_Left">Итератор, который сравнивается с итератором из правой части.</param>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, больше позиции итератора из правой части.</summary>
      <returns>true, если левый итератор больше правого, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет, действительно ли позиция итератора слева от оператора больше или равна позиции итератора справа.</summary>
      <returns>true, если левый итератор больше или равен правому, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора слева от оператора больше или равна позиции итератора справа.</summary>
      <returns>true, если левый итератор больше или равен правому, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <summary>Преобразует объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</summary>
      <returns>Текущий итератор как объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@)">
      <summary>Увеличивает итератор на один элемент.Это префиксная версия оператора увеличения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>Увеличивает итератор на один элемент.Это постфиксная версия оператора увеличения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Неиспользуемый параметр, указывающий, что это постфиксная версия оператора.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, отличается ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> от текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</summary>
      <returns>true, если два итератора представляют собой разные объекты, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, отличается ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" /> от текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</summary>
      <returns>true, если два итератора представляют собой разные объекты, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, меньше позиции итератора из правой части.</summary>
      <returns>true, если левый итератор меньше правого, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, меньше позиции итератора из правой части.</summary>
      <returns>true, если левый итератор меньше правого, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, меньше позиции итератора из правой части.</summary>
      <returns>true, если левый итератор меньше или равен правому, в противном случае — false.</returns>
      <param name="_Left">Итератор, который сравнивается с итератором из правой части.</param>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, меньше или равна позиции итератора из правой части.</summary>
      <returns>true, если левый итератор меньше или равен правому, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>Уменьшает итератор на заданное число элементов.Целочисленный параметр указывается справа от оператора сложения.</summary>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="_Right">Число элементов, которое требуется уменьшить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет разность двух итераторов.</summary>
      <returns>Разность двух итераторов, определяемая числом элементов между ними.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />, вычитаемый из текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.prev">
      <summary>Перемещает итератор к элементу, который непосредственно предшествует текущему элементу.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1.valid">
      <summary>Определяет, является ли итератор действительным и можно ли использовать его для перебора элементов в базовом контейнере.</summary>
      <returns>true, если итератор является допустимым и может использоваться, в противном случае — false.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1">
      <summary>Определяет итератор, который обходит элементы контейнера в противоположном направлении.Доступ к элементам может производиться в прямом направлении с помощью оператора декремента и в обратном с помощью оператора увеличения.Элемент, указываемый итератором, не может быть изменен.Постоянные реверсивные двунаправленные итераторы можно использовать всякий раз, когда требуется постоянный реверсивный итератор ввода или вывода.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</summary>
      <param name="_Iter">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />, который требуется скопировать.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</summary>
      <param name="_Right">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />, который требуется скопировать.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</summary>
      <param name="_Iter">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />, который требуется скопировать.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.base">
      <summary>Возвращает базовый итератор для объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</summary>
      <returns>Возвращает базовый итератор для объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.Clone">
      <summary>Возвращает копию текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</summary>
      <returns>Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.container">
      <summary>Возвращает контейнер, обход которого выполняет итератор.</summary>
      <returns>Контейнер, который обходит итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</summary>
      <returns>Значение true, если оба объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> совпадают; в противном случае — значение false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_bias">
      <summary>Возвращает сдвиг итератора.Сдвиг — это смещение итератора относительно нулевого элемента.</summary>
      <returns>Сдвиг итератора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_cref">
      <summary>Возвращает константную ссылку на элемент, на который в данный момент указывает итератор.</summary>
      <returns>Постоянная ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_node">
      <summary>Возвращает узел, или элемент, на который указывает итератор.</summary>
      <returns>узел, на который указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.get_ref">
      <summary>Возвращает ссылку на текущий элемент, указанный итератором.</summary>
      <returns>Ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.next">
      <summary>Перемещает итератор в предыдущую позицию базового контейнера или в первую позицию перед начальным элементом контейнера, если обход контейнера завершен полностью.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Присваивает заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> текущему объекту.</summary>
      <returns>Текущий объект (*this).</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />, который присваивается текущему объекту.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Присваивает заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> текущему объекту.</summary>
      <returns>Текущий объект (*this).</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />, который присваивается текущему объекту.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)">
      <summary>Уменьшает итератор на один элемент.Уменьшение реверсивного итератора эквивалентно увеличению обычного итератора.Это префиксная версия оператора декремента.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>Уменьшает итератор на один элемент.Уменьшение реверсивного итератора эквивалентно увеличению обычного итератора.Это постфиксная версия оператора декремента.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Неиспользуемый параметр, указывающий, что это постфиксная версия оператора.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>Преобразует объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</summary>
      <returns>Текущий итератор как объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@)">
      <summary>Увеличивает итератор на один элемент.Увеличение реверсивного итератора эквивалентно уменьшению обычного итератора.Это префиксная версия оператора увеличения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>Увеличивает итератор на один элемент.Увеличение реверсивного итератора эквивалентно уменьшению обычного итератора.Это постфиксная версия оператора увеличения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Индикатор постфиксной версии оператора увеличения.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, отличается ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> от текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</summary>
      <returns>true, если два итератора представляют собой разные объекты, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, отличается ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" /> от текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</summary>
      <returns>true, если два итератора представляют собой разные объекты, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.prev">
      <summary>Перемещает итератор в следующую позицию базового контейнера или в первую позицию после последнего элемента контейнера, если обход контейнера завершен полностью.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1.valid">
      <summary>Определяет, является ли итератор действительным и можно ли использовать его для перебора элементов в базовом контейнере.</summary>
      <returns>true, если итератор является допустимым и может использоваться, в противном случае — false.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1">
      <summary>Содержит итератор, поддерживающий следующие операции: перемещение на одну позицию вперед с помощью вызова функции operator--, перемещение на одну позицию назад с помощью вызова функции operator++, доступ к элементу с использованием функции operator[] и доступ к элементу с использованием арифметических операций над указателями.Элемент, к которому производит доступ итератор, не может быть изменен.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</summary>
      <param name="_Iter">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />, копируемый в текущий контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</summary>
      <param name="_Right">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />, копируемый в текущий контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</summary>
      <param name="_Iter">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />, копируемый в текущий контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.base">
      <summary>Возвращает базовый итератор для объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</summary>
      <returns>Возвращает базовый итератор для объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Clone">
      <summary>Создает копию текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</summary>
      <returns>Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.container">
      <summary>Возвращает контейнер, обход которого выполняет итератор.</summary>
      <returns>Контейнер, который обходит итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет расстояние между элементом, на который указывает текущий итератор, и элементом, на который указывает заданный итератор.</summary>
      <returns>Расстояние (число элементов) между элементом, на который указывает текущий итератор, и элементом, на который указывает итератор <paramref name="_Right" />.Это значение отрицательное, если <paramref name="_Right" /> указывает на элемент, предшествующий элементу, указываемому текущим итератором.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет расстояние между элементом, на который указывает текущий итератор, и элементом, на который указывает заданный итератор.</summary>
      <returns>Расстояние (число элементов) между элементом, на который указывает текущий итератор, и элементом, на который указывает итератор <paramref name="_Right" />.Это значение отрицательное, если <paramref name="_Right" /> указывает на элемент, предшествующий элементу, указываемому текущим итератором.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</summary>
      <returns>Значение true, если оба объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> совпадают; в противном случае — значение false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_bias">
      <summary>Возвращает сдвиг итератора.Сдвиг — это смещение итератора относительно нулевого элемента.</summary>
      <returns>Сдвиг итератора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_cref">
      <summary>Возвращает константную ссылку на элемент, на который в данный момент указывает итератор.</summary>
      <returns>Постоянная ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_node">
      <summary>Возвращает узел, или элемент, на который указывает итератор.</summary>
      <returns>узел, на который указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.get_ref">
      <summary>Возвращает ссылку на текущий элемент, указанный итератором.</summary>
      <returns>Ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.Item(System.Int32)">
      <summary>Производит доступ к элементу, находящемуся в данной позиции в контейнере.</summary>
      <returns>Элемент, находящийся в данной позиции в контейнере.</returns>
      <param name="_Pos">Позиция элемента, к которому производится доступ.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет, предшествует ли элемент контейнера, указываемый текущим итератором, элементу, на который указывает заданный итератор.</summary>
      <returns>true, если текущий итератор указывает на элемент, предшествующий указываемому итератором <paramref name="_Right" />, в противном случае — false.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, предшествует ли элемент контейнера, указываемый текущим итератором, элементу, на который указывает заданный итератор.</summary>
      <returns>true, если текущий итератор указывает на элемент, предшествующий указываемому итератором <paramref name="_Right" />, в противном случае — false.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.move(System.Int32)">
      <summary>Перемещает итератор на заданное число элементов.</summary>
      <returns>Число элементов, фактически пройденных итератором.Это число будет отличаться от значения <paramref name="_Offset" />, если начало или конец контейнера достигается прежде, чем пройдено требуемое число элементов.</returns>
      <param name="_Offset">Число элементов для обхода.Для перемещения итератора вперед укажите отрицательное число.Для перемещения итератора назад укажите положительное число.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.next">
      <summary>Перемещает реверсивный итератор в следующую позицию базового контейнера или в первую позицию перед начальным элементом контейнера, если обход контейнера завершен полностью.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>Увеличивает реверсивный итератор на заданное число элементов.Целочисленный параметр указывается справа от оператора сложения.</summary>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="_Right">Число элементов, которое требуется увеличить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Увеличивает реверсивный итератор на заданное число элементов.Целочисленный параметр указывается слева от оператора сложения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="_Left">Число элементов, которое требуется увеличить.</param>
      <param name="_Right">Итератор, который необходимо увеличить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Присваивает заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> текущему объекту.</summary>
      <returns>Текущий объект (*this).</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />, который присваивается текущему объекту.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Присваивает заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> текущему объекту.</summary>
      <returns>Текущий объект (*this).</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />, который присваивается текущему объекту.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)">
      <summary>Уменьшает реверсивный итератор на один элемент.Это префиксная версия оператора декремента.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>Уменьшает реверсивный итератор на один элемент.Это постфиксная версия оператора декремента.</summary>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Неиспользуемый параметр, указывающий, что это постфиксная версия оператора.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, являются ли два итератора одним и тем же объектом.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, больше позиции итератора из правой части.</summary>
      <returns>true, если левый итератор больше правого, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора слева от оператора больше или равна позиции итератора справа.</summary>
      <returns>true, если левый итератор больше или равен правому, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <summary>Преобразует объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</summary>
      <returns>Текущий итератор как объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@)">
      <summary>Увеличивает реверсивный итератор на один элемент.Это префиксная версия оператора увеличения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>Увеличивает реверсивный итератор на один элемент.Это постфиксная версия оператора увеличения.</summary>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Индикатор постфиксной версии оператора увеличения.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, отличается ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" /> от текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</summary>
      <returns>true, если два итератора представляют собой разные объекты, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, меньше позиции итератора из правой части.</summary>
      <returns>true, если левый итератор меньше правого, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, меньше или равна позиции итератора из правой части.</summary>
      <returns>true, если левый итератор меньше или равен правому, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>Уменьшает итератор на заданное число элементов.Целочисленный параметр указывается справа от оператора вычитания.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="_Right">Число элементов, которое требуется уменьшить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет разность двух итераторов.</summary>
      <returns>Разность двух итераторов (число элементов между ними).</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />, вычитаемый из текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.prev">
      <summary>Перемещает итератор к элементу непосредственно за текущим.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1.valid">
      <summary>Определяет, является ли итератор действительным и можно ли использовать его для перебора элементов в базовом контейнере.</summary>
      <returns>true, если итератор является допустимым и может использоваться, в противном случае — false.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1">
      <summary>Определяет итератор, который может обходить элементы контейнера в прямом направлении, используя оператор увеличения, или в обратном направлении, используя оператор декремента.Элемент, указываемый итератором, допускает многократное чтение и запись.Двунаправленные итераторы можно использовать всякий раз, когда требуется итератор ввода или вывода.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode{`0})">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />, указывающий на данный узел.</summary>
      <param name="_Node">узел, на который будет указывать итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</summary>
      <param name="_Right">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />, который требуется скопировать.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.Clone">
      <summary>Возвращает копию текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</summary>
      <returns>Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.container">
      <summary>Возвращает контейнер, обход которого выполняет итератор.</summary>
      <returns>Контейнер, который обходит итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</summary>
      <returns>Значение true, если оба объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> совпадают; в противном случае — значение false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_bias">
      <summary>Возвращает сдвиг итератора.Сдвиг — это смещение итератора относительно нулевого элемента.</summary>
      <returns>Сдвиг итератора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_cref">
      <summary>Возвращает константную ссылку на элемент, на который в данный момент указывает итератор.</summary>
      <returns>Постоянная ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_node">
      <summary>Возвращает узел, или элемент, на который указывает итератор.</summary>
      <returns>узел, на который указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.get_ref">
      <summary>Возвращает ссылку на текущий элемент, указанный итератором.</summary>
      <returns>Ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.next">
      <summary>Перемещает итератор в следующую позицию базового контейнера или в первую позицию после последнего элемента контейнера, если обход контейнера завершен полностью.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Присваивает заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> текущему объекту.</summary>
      <returns>Текущий объект (*this).</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />, который присваивается текущему объекту.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>Уменьшает итератор на один элемент.Это префиксная версия оператора декремента.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>Уменьшает итератор на один элемент.Это постфиксная версия оператора декремента.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Неиспользуемый параметр, указывающий, что это постфиксная версия оператора.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>Преобразует объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</summary>
      <returns>Текущий итератор как объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)">
      <summary>Увеличивает итератор на один элемент.Это префиксная версия оператора увеличения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,System.Int32)">
      <summary>Увеличивает итератор на один элемент.Это постфиксная версия оператора увеличения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Неиспользуемый параметр, указывающий, что это постфиксная версия оператора.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, отличается ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> от текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</summary>
      <returns>true, если два итератора представляют собой разные объекты, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, отличается ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" /> от текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</summary>
      <returns>true, если два итератора представляют собой разные объекты, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.prev">
      <summary>Перемещает итератор к элементу, который непосредственно предшествует текущему элементу.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.valid">
      <summary>Определяет, является ли итератор действительным и можно ли использовать его для перебора элементов в базовом контейнере.</summary>
      <returns>true, если итератор является допустимым и может использоваться, в противном случае — false.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1">
      <summary>Содержит итератор, поддерживающий следующие операции: перемещение на одну позицию вперед с помощью оператора operator++, перемещение на одну позицию назад с помощью оператора operator--, обращение к элементу с помощью оператора operator[] и обращение к элементу с помощью арифметических операций над указателями.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" />.</summary>
      <param name="_Cont">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" />, копируемый в текущий контейнер.</param>
      <param name="_Offset">Смещение элемента, на который будет указывать созданный итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</summary>
      <param name="_Right">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />, копируемый в текущий контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone">
      <summary>Создает копию текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</summary>
      <returns>Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container">
      <summary>Возвращает контейнер, обход которого выполняет итератор.</summary>
      <returns>Контейнер, который обходит итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет расстояние между элементом, на который указывает текущий итератор, и элементом, на который указывает заданный итератор.</summary>
      <returns>Расстояние (число элементов) между элементом, на который указывает текущий итератор, и элементом, на который указывает итератор <paramref name="_Right" />.Это значение будет отрицательным, если <paramref name="_Right" /> указывает на элемент, предшествующий элементу, указываемому текущим итератором.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет расстояние между элементом, на который указывает текущий итератор, и элементом, на который указывает заданный итератор.</summary>
      <returns>Расстояние (число элементов) между элементом, на который указывает текущий итератор, и элементом, на который указывает итератор <paramref name="_Right" />.Это значение будет отрицательным, если <paramref name="_Right" /> указывает на элемент, предшествующий элементу, указываемому текущим итератором.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</summary>
      <returns>Значение true, если оба объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> совпадают; в противном случае — значение false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_bias">
      <summary>Возвращает сдвиг итератора.Сдвиг — это смещение итератора относительно нулевого элемента.</summary>
      <returns>Сдвиг итератора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_cref">
      <summary>Возвращает константную ссылку на элемент, на который в данный момент указывает итератор.</summary>
      <returns>Постоянная ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_node">
      <summary>Возвращает узел, или элемент, на который указывает итератор.</summary>
      <returns>узел, на который указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_ref">
      <summary>Возвращает ссылку на текущий элемент, указанный итератором.</summary>
      <returns>Ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item(System.Int32)">
      <summary>Производит доступ к элементу, находящемуся в данной позиции в контейнере.</summary>
      <returns>Элемент, находящийся в данной позиции в контейнере.</returns>
      <param name="_Pos">Позиция элемента, к которому производится доступ.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет, предшествует ли элемент контейнера, указываемый текущим итератором, элементу, на который указывает заданный итератор.</summary>
      <returns>true, если текущий итератор указывает на элемент, предшествующий указываемому итератором <paramref name="_Right" />, в противном случае — false.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, предшествует ли элемент контейнера, указываемый текущим итератором, элементу, на который указывает заданный итератор.</summary>
      <returns>true, если текущий итератор указывает на элемент, предшествующий указываемому итератором <paramref name="_Right" />, в противном случае — false.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)">
      <summary>Перемещает итератор на заданное число элементов.</summary>
      <returns>Число элементов, фактически пройденных итератором.Это число будет отличаться от значения <paramref name="_Offset" />, если начало или конец контейнера достигается прежде, чем пройдено требуемое число элементов.</returns>
      <param name="_Offset">Число элементов для обхода.Для перемещения итератора вперед укажите положительное число.Для перемещения итератора назад укажите отрицательное число.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.next">
      <summary>Перемещает итератор в следующую позицию базового контейнера или в первую позицию после последнего элемента контейнера, если обход контейнера завершен полностью.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>Увеличивает итератор на заданное число элементов.Целочисленный параметр указывается справа от оператора сложения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="_Right">Число элементов, которое требуется увеличить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Увеличивает итератор на заданное число элементов.Целочисленный параметр указывается слева от оператора сложения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="_Left">Число элементов, которое требуется увеличить.</param>
      <param name="_Right">Итератор, который необходимо увеличить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Присваивает заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> текущему объекту.</summary>
      <returns>Текущий объект (*this).</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />, который присваивается текущему объекту.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>Уменьшает итератор на один элемент.Это префиксная версия оператора декремента.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>Уменьшает итератор на один элемент.Это постфиксная версия оператора декремента.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Неиспользуемый параметр, указывающий, что это постфиксная версия оператора.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, больше позиции итератора из правой части.</summary>
      <returns>true, если левый итератор больше правого, в противном случае — false.</returns>
      <param name="_Left">Итератор, который сравнивается с итератором из правой части.</param>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, больше позиции итератора из правой части.</summary>
      <returns>true, если левый итератор больше правого, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет, действительно ли позиция итератора слева от оператора больше или равна позиции итератора справа.</summary>
      <returns>true, если левый итератор больше или равен правому, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора слева от оператора больше или равна позиции итератора справа.</summary>
      <returns>true, если левый итератор больше или равен правому, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <summary>Преобразует объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</summary>
      <returns>Текущий итератор как объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)">
      <summary>Увеличивает итератор на один элемент.Это префиксная версия оператора увеличения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>Увеличивает итератор на один элемент.Это постфиксная версия оператора увеличения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Неиспользуемый параметр, указывающий, что это постфиксная версия оператора.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, отличается ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> от текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</summary>
      <returns>true, если два итератора представляют собой разные объекты, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, отличается ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> от текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</summary>
      <returns>true, если два итератора представляют собой разные объекты, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, меньше позиции итератора из правой части.</summary>
      <returns>true, если левый итератор меньше правого, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, меньше позиции итератора из правой части.</summary>
      <returns>true, если левый итератор меньше правого, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, меньше позиции итератора из правой части.</summary>
      <returns>true, если левый итератор меньше или равен правому, в противном случае — false.</returns>
      <param name="_Left">Итератор, который сравнивается с итератором из правой части.</param>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, меньше или равна позиции итератора из правой части.</summary>
      <returns>true, если левый итератор меньше или равен правому, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)">
      <summary>Уменьшает итератор на заданное число элементов.Целочисленный параметр указывается справа от оператора вычитания.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="_Right">Число элементов, которое требуется уменьшить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет разность двух итераторов.</summary>
      <returns>Разность двух итераторов (число элементов между ними).</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />, вычитаемый из текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.prev">
      <summary>Перемещает итератор к элементу, который непосредственно предшествует текущему элементу.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid">
      <summary>Определяет, является ли итератор действительным и можно ли использовать его для перебора элементов в базовом контейнере.</summary>
      <returns>true, если итератор является допустимым и может использоваться, в противном случае — false.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1">
      <summary>Определяет базовый интерфейс для всех итераторов STL/CLR.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.container">
      <summary>Возвращает контейнер, обход которого выполняет итератор.</summary>
      <returns>Контейнер, который обходит итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_bias">
      <summary>Возвращает сдвиг итератора.Сдвиг — это смещение итератора относительно нулевого элемента.</summary>
      <returns>Сдвиг итератора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.get_node">
      <summary>Возвращает узел, или элемент, на который указывает итератор.</summary>
      <returns>узел, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.next">
      <summary>Перемещает итератор в следующую позицию базового контейнера или в первую позицию после последнего элемента контейнера, если обход контейнера завершен полностью.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBaseIterator`1.valid">
      <summary>Определяет, является ли итератор действительным и можно ли использовать его для перебора элементов в базовом контейнере.</summary>
      <returns>true, если итератор является допустимым и может использоваться, в противном случае — false.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1">
      <summary>Интерфейс для контейнера, поддерживающего как прямые, так и обратные итерации.Контейнеры, реализующие двунаправленные итерации, поддерживают следующие операции: перемещение на одну позицию вперед с помощью вызова функции operator++ и перемещение на одну позицию назад с помощью вызова функции operator--.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1.get_generation">
      <summary>Возвращает текущее поколение изменений базового контейнера.</summary>
      <returns>Текущее поколение изменений базового контейнера.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1">
      <summary>Интерфейс для итератора, который может обходить элементы контейнера в прямом направлении, используя оператор увеличения, или в обратном направлении, используя оператор декремента.Элемент, указываемый итератором, допускает многократное чтение и запись.Двунаправленные итераторы можно использовать всякий раз, когда требуется итератор ввода или вывода.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev">
      <summary>Перемещает итератор к элементу, который непосредственно предшествует текущему элементу.</summary>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IForwardIterator`1">
      <summary>Интерфейс для итератора, который может обходить элементы контейнера только в прямом направлении, используя оператор увеличения.Элемент, указываемый итератором, допускает многократное чтение и запись.Прямые итераторы можно использовать всякий раз, когда требуется итератор ввода или вывода.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1">
      <summary>Интерфейс для итератора, который используется для чтения последовательности элементов контейнера только в прямом направлении.Элемент, указываемый итератором, может быть считан только один раз и не может быть изменен.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадают ли два объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />.</summary>
      <returns>Значение true, если текущий итератор и заданный итератор совпадают; в противном случае — значение false.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IInputIterator`1.get_cref">
      <summary>Возвращает константную ссылку на элемент, на который в данный момент указывает итератор.</summary>
      <returns>Постоянная ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.INode`1">
      <summary>Интерфейс для структуры данных узла.Контейнеры, поддерживающие двунаправленную итерацию, содержат узлы.узел состоит из значения элемента контейнера, находящегося в данной позиции, и указателей на предыдущий и следующий элементы контейнера.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.INode`1._Value">
      <summary>Получает или задает значение элемента для данного узла в контейнере.</summary>
      <returns>Значение элемента для данного узла в контейнере.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.container">
      <summary>Возвращает контейнер, в котором находится текущий узел.</summary>
      <returns>Контейнер, в котором находится текущий узел.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.is_head">
      <summary>Определяет, является ли текущий узел первым узлом контейнера.</summary>
      <returns>true, если текущий узел является первым в контейнере, в противном случае — false.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.next_node">
      <summary>Возвращает следующий узел в контейнере после текущего узла.</summary>
      <returns>Следующий узел в контейнере после текущего узла.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.INode`1.prev_node">
      <summary>Возвращает узел контейнера, непосредственно предшествующий текущему узлу.</summary>
      <returns>узел в контейнере, непосредственно предшествующий текущему узлу.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1">
      <summary>Интерфейс для итератора, который используется для записи последовательности элементов в контейнер только в прямом направлении.Элемент, указываемый итератором, может быть записан только один раз.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IOutputIterator`1.get_ref">
      <summary>Возвращает ссылку на текущий элемент, указанный итератором.</summary>
      <returns>Ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1">
      <summary>Интерфейс для контейнера, поддерживающего итерации с произвольным доступом.Контейнеры, реализующие итерации с произвольным доступом, поддерживают следующие операции: перемещение на одну позицию вперед с помощью вызова функции operator++, перемещение на одну позицию назад с помощью вызова функции operator--, доступ к элементу с использованием функции operator[] и доступ к элементу с использованием арифметических операций над указателями.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.at_bias(System.Int32)">
      <summary>Возвращает элемент контейнера, находящийся в позиции текущего сдвига.Сдвигом называется смещение относительно текущего нулевого элемента.</summary>
      <returns>Элемент в указанной позиции сдвига.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1.valid_bias(System.Int32)">
      <summary>Определяет, является ли данный сдвиг допустимым для контейнера.Сдвигом называется смещение относительно текущего нулевого элемента.</summary>
      <returns>true, если данный сдвиг допустим для контейнера, в противном случае — false.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1">
      <summary>Определяет интерфейс для итератора произвольного доступа.Итераторы произвольного доступа поддерживают следующие операции: перемещение на одну позицию вперед с помощью вызова функции operator++, перемещение на одну позицию назад с помощью вызова функции operator--, доступ к элементу с использованием функции operator[] и доступ к элементу с использованием арифметических операций над указателями.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет расстояние между элементом, на который указывает текущий итератор, и элементом, на который указывает заданный итератор.</summary>
      <returns>Расстояние (число элементов) между элементом, на который указывает текущий итератор, и элементом, на который указывает итератор <paramref name="_Right" />.Это значение отрицательное, если <paramref name="_Right" /> указывает на элемент, предшествующий элементу, указываемому текущим итератором.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет, предшествует ли элемент контейнера, указываемый текущим итератором, элементу, на который указывает заданный итератор.</summary>
      <returns>true, если текущий итератор указывает на элемент, предшествующий указываемому итератором <paramref name="_Right" />, в противном случае — false.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)">
      <summary>Перемещает итератор на заданное число элементов.</summary>
      <returns>Число элементов, фактически пройденных итератором.Это число будет отличаться от значения <paramref name="_Offset" />, если начало или конец контейнера достигается прежде, чем пройдено требуемое число элементов.</returns>
      <param name="_Offset">Число элементов для обхода.Для перемещения итератора вперед укажите положительное число.Для перемещения итератора назад укажите отрицательное число.</param>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1">
      <summary>Определяет итератор, который обходит элементы контейнера в противоположном направлении.Доступ к элементам может производиться в прямом направлении с помощью оператора декремента и в обратном с помощью оператора увеличения.Элемент, указываемый итератором, допускает многократные чтение и запись.Реверсивные двунаправленные итераторы можно использовать всякий раз, когда требуется реверсивный итератор ввода или вывода.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0})">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</summary>
      <param name="_Iter">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />, который требуется скопировать.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</summary>
      <param name="_Right">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />, который требуется скопировать.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.base">
      <summary>Возвращает базовый итератор для объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</summary>
      <returns>Возвращает базовый итератор для объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.Clone">
      <summary>Возвращает копию текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</summary>
      <returns>Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.container">
      <summary>Возвращает контейнер, обход которого выполняет итератор.</summary>
      <returns>Контейнер, который обходит итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</summary>
      <returns>true, если оба объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> совпадают, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_bias">
      <summary>Возвращает сдвиг итератора.Сдвиг — это смещение итератора относительно нулевого элемента.</summary>
      <returns>Сдвиг итератора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_cref">
      <summary>Возвращает константную ссылку на элемент, на который в данный момент указывает итератор.</summary>
      <returns>Постоянная ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_node">
      <summary>Возвращает узел, или элемент, на который указывает итератор.</summary>
      <returns>узел, на который указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.get_ref">
      <summary>Возвращает ссылку на текущий элемент, указанный итератором.</summary>
      <returns>Ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.next">
      <summary>Перемещает итератор в предыдущую позицию базового контейнера или в первую позицию перед начальным элементом контейнера, если обход контейнера завершен полностью.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Присваивает заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> текущему объекту.</summary>
      <returns>Текущий объект (*this).</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />, который присваивается текущему объекту.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>Уменьшает итератор на один элемент.Уменьшение реверсивного итератора эквивалентно увеличению обычного итератора.Это префиксная версия оператора декремента.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>Уменьшает итератор на один элемент.Уменьшение реверсивного итератора эквивалентно увеличению обычного итератора.Это постфиксная версия оператора декремента.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Неиспользуемый параметр, указывающий, что это постфиксная версия оператора.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{`0}">
      <summary>Преобразует объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</summary>
      <returns>Текущий итератор как объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)">
      <summary>Увеличивает итератор на один элемент.Увеличение реверсивного итератора эквивалентно уменьшению обычного итератора.Это префиксная версия оператора увеличения.</summary>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@,System.Int32)">
      <summary>Увеличивает итератор на один элемент.Увеличение реверсивного итератора эквивалентно уменьшению обычного итератора.Это постфиксная версия оператора увеличения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Неиспользуемый параметр, указывающий, что это постфиксная версия оператора.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, отличается ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> от текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</summary>
      <returns>true, если два итератора представляют собой разные объекты, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, отличается ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" /> от текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</summary>
      <returns>true, если два итератора представляют собой разные объекты, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.prev">
      <summary>Перемещает итератор в следующую позицию базового контейнера или в первую позицию после последнего элемента контейнера, если обход контейнера завершен полностью.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1.valid">
      <summary>Определяет, является ли итератор действительным и можно ли использовать его для перебора элементов в базовом контейнере.</summary>
      <returns>true, если итератор является допустимым и может использоваться, в противном случае — false.</returns>
    </member>
    <member name="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1">
      <summary>Содержит итератор, поддерживающий следующие операции: перемещение на одну позицию вперед с помощью оператора operator--, перемещение на одну позицию назад с помощью оператора operator++, обращение к элементу с помощью оператора operator[] и обращение к элементу с помощью арифметических операций над указателями.</summary>
      <typeparam name="TValue">Тип элемента в управляемой последовательности.</typeparam>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</summary>
      <param name="_Iter">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />, копируемый в текущий контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Выделяет и инициализирует новый объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> из существующего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</summary>
      <param name="_Right">Существующий объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />, копируемый в текущий контейнер.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.base">
      <summary>Возвращает базовый итератор для объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</summary>
      <returns>Возвращает базовый итератор для объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Clone">
      <summary>Создает копию текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</summary>
      <returns>Копия текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.container">
      <summary>Возвращает контейнер, обход которого выполняет итератор.</summary>
      <returns>Контейнер, который обходит итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет расстояние между элементом, на который указывает текущий итератор, и элементом, на который указывает заданный итератор.</summary>
      <returns>Расстояние (число элементов) между элементом, на который указывает текущий итератор, и элементом, на который указывает итератор <paramref name="_Right" />.Это значение отрицательное, если <paramref name="_Right" /> указывает на элемент, предшествующий элементу, указываемому текущим итератором.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет расстояние между элементом, на который указывает текущий итератор, и элементом, на который указывает заданный итератор.</summary>
      <returns>Расстояние (число элементов) между элементом, на который указывает текущий итератор, и элементом, на который указывает итератор <paramref name="_Right" />.Это значение отрицательное, если <paramref name="_Right" /> указывает на элемент, предшествующий элементу, указываемому текущим итератором.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, совпадает ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</summary>
      <returns>true, если оба объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> совпадают, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_bias">
      <summary>Возвращает сдвиг итератора.Сдвиг — это смещение итератора относительно нулевого элемента.</summary>
      <returns>Сдвиг итератора.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_cref">
      <summary>Возвращает константную ссылку на элемент, на который в данный момент указывает итератор.</summary>
      <returns>Постоянная ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_node">
      <summary>Возвращает узел, или элемент, на который указывает итератор.</summary>
      <returns>узел, на который указывает итератор.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.get_ref">
      <summary>Возвращает ссылку на текущий элемент, указанный итератором.</summary>
      <returns>Ссылка на элемент, на который в данный момент указывает итератор.</returns>
    </member>
    <member name="P:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.Item(System.Int32)">
      <summary>Производит доступ к элементу, находящемуся в данной позиции в контейнере.</summary>
      <returns>Элемент, находящийся в данной позиции в контейнере.</returns>
      <param name="_Pos">Позиция элемента, к которому производится доступ.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет, предшествует ли элемент контейнера, указываемый текущим итератором, элементу, на который указывает заданный итератор.</summary>
      <returns>true, если текущий итератор указывает на элемент, предшествующий указываемому итератором <paramref name="_Right" />, в противном случае — false.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, предшествует ли элемент контейнера, указываемый текущим итератором, элементу, на который указывает заданный итератор.</summary>
      <returns>true, если текущий итератор указывает на элемент, предшествующий указываемому итератором <paramref name="_Right" />, в противном случае — false.</returns>
      <param name="_Right">Действительный итератор, указывающий на тот же контейнер, что и текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.move(System.Int32)">
      <summary>Перемещает итератор на заданное число элементов.</summary>
      <returns>Число элементов, фактически пройденных итератором.Это число будет отличаться от значения <paramref name="_Offset" />, если начало или конец контейнера достигается прежде, чем пройдено требуемое число элементов.</returns>
      <param name="_Offset">Число элементов для обхода.Для перемещения итератора вперед укажите отрицательное число.Для перемещения итератора назад укажите положительное число.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.next">
      <summary>Перемещает реверсивный итератор в следующую позицию базового контейнера или в первую позицию перед начальным элементом контейнера, если обход контейнера завершен полностью.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>Увеличивает реверсивный итератор на заданное число элементов.Целочисленный параметр указывается справа от оператора сложения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="_Right">Число элементов, которое требуется увеличить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Увеличивает реверсивный итератор на заданное число элементов.Целочисленный параметр указывается слева от оператора сложения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="_Left">Число элементов, которое требуется увеличить.</param>
      <param name="_Right">Итератор, который необходимо увеличить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Присваивает заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> текущему объекту.</summary>
      <returns>Текущий объект (*this).</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />, который присваивается текущему объекту.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>Уменьшает реверсивный итератор на один элемент.Это префиксная версия оператора декремента.</summary>
      <returns>Итератор. </returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>Уменьшает реверсивный итератор на один элемент.Это постфиксная версия оператора декремента.</summary>
      <returns>Итератор. </returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Неиспользуемый параметр, указывающий, что это постфиксная версия оператора.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, являются ли два итератора одним и тем же объектом.</summary>
      <returns>true, если оба итератора представляют собой один и тот же объект, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, больше позиции итератора из правой части.</summary>
      <returns>true, если левый итератор больше правого, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора слева от оператора больше или равна позиции итератора справа.</summary>
      <returns>true, если левый итератор больше или равен правому, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}">
      <summary>Преобразует объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> в <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</summary>
      <returns>Текущий итератор как объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)">
      <summary>Увеличивает реверсивный итератор на один элемент.Это префиксная версия оператора увеличения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>Увеличивает реверсивный итератор на один элемент.Это постфиксная версия оператора увеличения.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="param1">Неиспользуемый параметр, указывающий, что это постфиксная версия оператора.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, отличается ли заданный объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" /> от текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</summary>
      <returns>true, если два итератора представляют собой разные объекты, в противном случае — false.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />, сравниваемый с текущим объектом <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, меньше позиции итератора из правой части.</summary>
      <returns>true, если левый итератор меньше правого, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Определяет, действительно ли позиция итератора, указанного слева от оператора, меньше или равна позиции итератора из правой части.</summary>
      <returns>true, если левый итератор меньше или равен правому, в противном случае — false.</returns>
      <param name="_Right">Итератор, который сравнивается с итератором из левой части.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Возвращает элемент, на который в данный момент указывает итератор.</summary>
      <returns>Элемент, на который в данный момент указывает итератор.</returns>
      <param name="_Left">Итератор, к которому применяется оператор.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})">
      <summary>Определяет разность двух итераторов.</summary>
      <returns>Разность двух итераторов, определяемая числом элементов между ними.</returns>
      <param name="_Right">Объект <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />, вычитаемый из текущего объекта <see cref="T:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1" />.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@,System.Int32)">
      <summary>Уменьшает итератор на заданное число элементов.Целочисленный параметр указывается справа от оператора вычитания.</summary>
      <returns>Итератор.</returns>
      <param name="__unnamed0">Ссылка на текущий итератор.</param>
      <param name="_Right">Число элементов, которое требуется уменьшить.</param>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.prev">
      <summary>Перемещает итератор к элементу непосредственно за текущим.</summary>
    </member>
    <member name="M:Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1.valid">
      <summary>Определяет, является ли итератор действительным и можно ли использовать его для перебора элементов в базовом контейнере.</summary>
      <returns>true, если итератор является допустимым и может использоваться, в противном случае — false.</returns>
    </member>
  </members>
</doc>