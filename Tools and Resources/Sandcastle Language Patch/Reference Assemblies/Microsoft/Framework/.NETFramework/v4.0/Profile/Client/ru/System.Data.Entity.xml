<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Entity</name>
  </assembly>
  <members>
    <member name="T:System.Data.EntityCommandCompilationException">
      <summary>Представляет ошибки, которые возникают во время компиляции команды, если не удается сформировать дерево команд, представляющее текст команды.</summary>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntityCommandCompilationException" />.</summary>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntityCommandCompilationException" />.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntityCommandCompilationException" />.</summary>
      <param name="message">Сообщение об ошибке с объяснением причины исключения.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (null, в Visual Basic — Nothing), если внутреннее исключение не задано.</param>
    </member>
    <member name="T:System.Data.EntityCommandExecutionException">
      <summary>Представляет ошибки, возникающие, когда поставщик базового хранилища не может выполнить заданную команду.Это исключение, как правило, зависит от поставщика.</summary>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntityCommandExecutionException" />.</summary>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntityCommandExecutionException" />.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntityCommandExecutionException" />.</summary>
      <param name="message">Сообщение об ошибке с объяснением причины исключения.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (null, в Visual Basic — Nothing), если внутреннее исключение не задано.</param>
    </member>
    <member name="T:System.Data.EntityException">
      <summary>Представляет связанные с платформой Entity Framework ошибки, возникающие в пространстве имен EntityClient.EntityException является базовым классом для всех исключений Entity Framework, которые были вызваны EntityClient.</summary>
    </member>
    <member name="M:System.Data.EntityException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityException" />.</summary>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityException" />.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, содержащий сериализованные данные объекта о выдаваемом исключении.</param>
      <param name="context">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityException" />.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityException" />.</summary>
      <param name="message">Сообщение об ошибке с объяснением причины исключения.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (null, в Visual Basic — Nothing), если внутреннее исключение не задано.</param>
    </member>
    <member name="T:System.Data.EntityKey">
      <summary>Обеспечивает устойчивую ссылку на объект, являющийся экземпляром типа сущности.</summary>
    </member>
    <member name="M:System.Data.EntityKey.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityKey" />.</summary>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityKey" /> с именем набора сущностей и универсальной коллекцией <see cref="T:System.Collections.Generic.KeyValuePair" />.</summary>
      <param name="qualifiedEntitySetName">Объект <see cref="T:System.String" />, который является именем набора сущностей, сопровождаемым именем контейнера сущностей.</param>
      <param name="entityKeyValues">Коллекция универсальных структур <see cref="T:System.Collections.Generic.KeyValuePair" />.В каждой паре "ключ/значение" в качестве ключа имеется имя свойства, а в качестве значения – значение этого свойства.Для каждого свойства, являющегося частью объекта <see cref="T:System.Data.EntityKey" />, должна быть одна пара.Порядок пар "ключ-значение" не играет роли, однако должно быть указано каждое свойство ключа.Имена свойств являются простыми именами, не квалифицируемыми именем типа сущности или именем схемы.</param>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityKey" /> с именем набора сущностей и коллекцией <see cref="T:System.Collections.Generic.IEnumerable`1" /> объектов <see cref="T:System.Data.EntityKeyMember" />.</summary>
      <param name="qualifiedEntitySetName">Объект <see cref="T:System.String" />, который является именем набора сущностей, сопровождаемым именем контейнера сущностей.</param>
      <param name="entityKeyValues">Коллекция <see cref="T:System.Collections.Generic.IEnumerable`1" /> объектов <see cref="T:System.Data.EntityKeyMember" />, которыми следует инициализировать ключ. </param>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityKey" /> с именем набора сущностей и указанной парой объектных ключей.</summary>
      <param name="qualifiedEntitySetName">Объект <see cref="T:System.String" />, который является именем набора сущностей, сопровождаемым именем контейнера сущностей.</param>
      <param name="keyName">Объект <see cref="T:System.String" />, который является именем ключа.</param>
      <param name="keyValue">Объект <see cref="T:System.Object" />, который является значением ключа.</param>
    </member>
    <member name="P:System.Data.EntityKey.EntityContainerName">
      <summary>Получает или задает имя контейнера сущностей.</summary>
      <returns>Значение <see cref="T:System.String" />, которое является именем контейнера сущностей, содержащим сущность, которой в свою очередь принадлежит ключ <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="P:System.Data.EntityKey.EntityKeyValues">
      <summary>Получает или задает значения ключей, связанные с этим объектом <see cref="T:System.Data.EntityKey" />.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> значений ключей для этого объекта <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="F:System.Data.EntityKey.EntityNotValidKey">
      <summary>Простой объект <see cref="T:System.Data.EntityKey" />, определяющий сущность, полученную после неудачной операции TREAT.</summary>
    </member>
    <member name="P:System.Data.EntityKey.EntitySetName">
      <summary>Получает или задает имя набора сущностей.</summary>
      <returns>Значение <see cref="T:System.String" />, которое является именем набора сущностей, содержащим сущность, которой в свою очередь принадлежит ключ <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="M:System.Data.EntityKey.Equals(System.Data.EntityKey)">
      <summary>Возвращает значение, указывающее, равен ли этот экземпляр заданному объекту <see cref="T:System.Data.EntityKey" />. </summary>
      <returns>true, если данный экземпляр и <paramref name="other" /> имеют одинаковые значения, и значение false — в противном случае. </returns>
      <param name="other">Объект <see cref="T:System.Data.EntityKey" />, сравниваемый с этим экземпляром.</param>
    </member>
    <member name="M:System.Data.EntityKey.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли этот экземпляр указанному объекту. </summary>
      <returns>Значение true, если этот экземпляр и <paramref name="obj" /> имеют одинаковые значения; в противном случае — значение false. </returns>
      <param name="obj">Объект <see cref="T:System.Object" /> для сравнения с данным экземпляром.</param>
    </member>
    <member name="M:System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)">
      <summary>Получает набор сущностей для этого объектного ключа из определенной рабочей области метаданных.</summary>
      <returns>Набор сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> для объектного ключа.</returns>
      <param name="metadataWorkspace">Рабочая область метаданных, содержащая сущность.</param>
      <exception cref="T:System.ArgumentException">Не удалось найти набор сущностей в заданной рабочей области метаданных.</exception>
    </member>
    <member name="M:System.Data.EntityKey.GetHashCode">
      <summary>Служит в качестве хэш-функции для текущего объекта <see cref="T:System.Data.EntityKey" />.Метод <see cref="M:System.Data.EntityKey.GetHashCode" /> используется в алгоритмах хэширования и хэширующих структурах данных, например в хэш-таблицах.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="P:System.Data.EntityKey.IsTemporary">
      <summary>Получает значение, указывающее, является ли объект <see cref="T:System.Data.EntityKey" /> временным.  </summary>
      <returns>Значение true, если объект  <see cref="T:System.Data.EntityKey" /> является временным; в противном случае — false.</returns>
    </member>
    <member name="F:System.Data.EntityKey.NoEntitySetKey">
      <summary>Одиночный объект <see cref="T:System.Data.EntityKey" />, обозначающий сущность, доступную только для чтения. </summary>
    </member>
    <member name="M:System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Вспомогательный метод, используемый для десериализации объекта <see cref="T:System.Data.EntityKey" />.</summary>
      <param name="context">Описывает источник и назначение данного сериализованного потока и предоставляет дополнительный контекст, определяемый вызывающим.</param>
    </member>
    <member name="M:System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Вспомогательный метод, используемый для десериализации объекта <see cref="T:System.Data.EntityKey" />.</summary>
      <param name="context">Описывает источник и назначение данного сериализованного потока и предоставляет дополнительный, определяемый вызывающим, контекст.</param>
    </member>
    <member name="M:System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)">
      <summary>Сравнивает два объекта <see cref="T:System.Data.EntityKey" />. </summary>
      <returns>true, если значения <paramref name="key1" /> и <paramref name="key2" /> равны; в противном случае – false.</returns>
      <param name="key1">Сравниваемый объект <see cref="T:System.Data.EntityKey" />.</param>
      <param name="key2">Сравниваемый объект <see cref="T:System.Data.EntityKey" />.</param>
    </member>
    <member name="M:System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)">
      <summary>Сравнивает два объекта <see cref="T:System.Data.EntityKey" />. </summary>
      <returns>true, если значения <paramref name="key1" /> и <paramref name="key2" /> не равны; в противном случае —  false.</returns>
      <param name="key1">Сравниваемый объект <see cref="T:System.Data.EntityKey" />.</param>
      <param name="key2">Сравниваемый объект <see cref="T:System.Data.EntityKey" />.</param>
    </member>
    <member name="T:System.Data.EntityKeyMember">
      <summary>Представляет пару "имя ключа-значение", которая является частью ключа <see cref="T:System.Data.EntityKey" />.</summary>
    </member>
    <member name="M:System.Data.EntityKeyMember.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityKeyMember" />.</summary>
    </member>
    <member name="M:System.Data.EntityKeyMember.#ctor(System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityKeyMember" /> с указанной парой ключа сущности.</summary>
      <param name="keyName">Объект <see cref="T:System.String" />, который является именем ключа.</param>
      <param name="keyValue">Объект <see cref="T:System.Object" />, который является значением ключа.</param>
    </member>
    <member name="P:System.Data.EntityKeyMember.Key">
      <summary>Имя ключа сущности.</summary>
      <returns>Объект <see cref="T:System.String" />, который является именем ключа.</returns>
    </member>
    <member name="M:System.Data.EntityKeyMember.ToString">
      <summary>Возвращает строковое представление ключа сущности.</summary>
      <returns>Объект <see cref="T:System.String" />. </returns>
    </member>
    <member name="P:System.Data.EntityKeyMember.Value">
      <summary>Значение ключа сущности.</summary>
      <returns>Объект <see cref="T:System.Object" />, который является значением ключа.</returns>
    </member>
    <member name="T:System.Data.EntitySqlException">
      <summary>Представляет ошибки, возникающие при синтаксическом разборе текста команды на языке Entity SQL.Это исключение возникает при нарушении синтаксических или семантических правил.</summary>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntitySqlException" />.</summary>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.EntitySqlException" /> со специальным сообщением об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntitySqlException" />, который использует указанное сообщение об ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения. </summary>
      <param name="message">Сообщение об ошибке с объяснением причины исключения.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (null, в Visual Basic — Nothing), если внутреннее исключение не задано.</param>
    </member>
    <member name="P:System.Data.EntitySqlException.Column">
      <summary>Получает приблизительный номер столбца, в котором возникла ошибка.</summary>
      <returns>Целое число, соответствующее номеру столбца, в котором возникла ошибка.</returns>
    </member>
    <member name="P:System.Data.EntitySqlException.ErrorContext">
      <summary>По возможности получает приблизительный контекст, в котором возникла ошибка.</summary>
      <returns>Строка с описанием приблизительного контекста, в котором возникла ошибка, если такая информация имеется.</returns>
    </member>
    <member name="P:System.Data.EntitySqlException.ErrorDescription">
      <summary>Получает описание ошибки.</summary>
      <returns>Строка, описывающая ошибку.</returns>
    </member>
    <member name="M:System.Data.EntitySqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Задает в <see cref="T:System.Runtime.Serialization.SerializationInfo" /> информацию об исключении.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, содержащий сериализованные данные объекта о выдаваемом исключении.</param>
      <param name="context">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="info" /> является ссылкой null (Nothing в Visual Basic).</exception>
    </member>
    <member name="P:System.Data.EntitySqlException.Line">
      <summary>Получает приблизительный номер строки, в которой возникла ошибка.</summary>
      <returns>Целое число, соответствующее номеру строки, в которой возникла ошибка.</returns>
    </member>
    <member name="P:System.Data.EntitySqlException.Message">
      <summary>Получает полное сообщение об ошибке.Сообщение содержит описание ошибки, контекст, номер строки и номер столбца, если эти данные доступны.</summary>
      <returns>Строка с описанием полного сообщения об ошибке.Сообщение содержит описание ошибки, контекст, номер строки и номер столбца, если эти данные доступны.</returns>
    </member>
    <member name="T:System.Data.EntityState">
      <summary>Состояние объекта сущности. </summary>
    </member>
    <member name="F:System.Data.EntityState.Detached">
      <summary>Объект существует, но не отслеживается службами объектов.Сущность находится в этом состоянии сразу после создания и до добавления в контекст объекта.Сущность также находится в этом состоянии после ее удаления из контекста путем вызова метода <see cref="M:System.Data.Objects.ObjectContext.Detach(System.Object)" /> или в случае загрузки с помощью <see cref="F:System.Data.Objects.MergeOption.NoTracking" /><see cref="T:System.Data.Objects.MergeOption" />.</summary>
    </member>
    <member name="F:System.Data.EntityState.Unchanged">
      <summary>Объект не был изменен с момента загрузки в контекст или с момента последнего вызова метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />.</summary>
    </member>
    <member name="F:System.Data.EntityState.Added">
      <summary>Объект добавлен в контекст объекта, и не был вызван метод <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />.Объекты добавлены в контекст объекта путем вызова метода <see cref="M:System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)" />.</summary>
    </member>
    <member name="F:System.Data.EntityState.Deleted">
      <summary>Объект удален из контекста объекта с помощью метода <see cref="M:System.Data.Objects.ObjectContext.DeleteObject(System.Object)" />.</summary>
    </member>
    <member name="F:System.Data.EntityState.Modified">
      <summary>Объект изменен, но не был вызван метод <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />.</summary>
    </member>
    <member name="T:System.Data.IExtendedDataRecord">
      <summary>Предоставляет доступ к значениям столбцов внутри каждой строки <see cref="T:System.Data.Common.DbDataRecord" /> для объекта <see cref="T:System.Data.Common.DbDataReader" />.</summary>
    </member>
    <member name="P:System.Data.IExtendedDataRecord.DataRecordInfo">
      <summary>Получает объект <see cref="T:System.Data.Common.DataRecordInfo" /> для данного объекта <see cref="T:System.Data.IExtendedDataRecord" />.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DataRecordInfo" />.</returns>
    </member>
    <member name="M:System.Data.IExtendedDataRecord.GetDataReader(System.Int32)">
      <summary>Возвращает вложенные объекты чтения в виде объектов <see cref="T:System.Data.Common.DbDataReader" />.</summary>
      <returns>Вложенные объекты чтения в виде объектов <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">Порядковый номер столбца.</param>
    </member>
    <member name="M:System.Data.IExtendedDataRecord.GetDataRecord(System.Int32)">
      <summary>Получает объект <see cref="T:System.Data.Common.DbDataRecord" /> с заданным индексом.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DbDataRecord" />. </returns>
      <param name="i">Индекс строки.</param>
    </member>
    <member name="T:System.Data.InvalidCommandTreeException">
      <summary>Исключение, указывающее на недопустимость дерева команд.В настоящее время это исключение не произошло в Entity Framework.</summary>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.InvalidCommandTreeException" /> с сообщением по умолчанию. </summary>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.InvalidCommandTreeException" /> с указанным сообщением. </summary>
      <param name="message">Сообщение об исключении.</param>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.InvalidCommandTreeException" /> с указанными сообщением и внутренним исключением. </summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="innerException">Исключение, вызвавшее данное исключение <see cref="T:System.Data.InvalidCommandTreeException" />.</param>
    </member>
    <member name="T:System.Data.MappingException">
      <summary>Исключение, генерируемое в случае сбоя при сопоставлении со связанной службой.</summary>
    </member>
    <member name="M:System.Data.MappingException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.MappingException" />.</summary>
    </member>
    <member name="M:System.Data.MappingException.#ctor(System.String)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Data.MappingException" />, используя специальное сообщение об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.MappingException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.MappingException" />, использующий указанное сообщение об ошибке и ссылку на внутреннее исключение.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или указатель null (Nothing в Visual Basic), если внутреннее исключение не задано.</param>
    </member>
    <member name="T:System.Data.MetadataException">
      <summary>Исключение, возникающее при сбое запросов связанной с метаданными службы. </summary>
    </member>
    <member name="M:System.Data.MetadataException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.MetadataException" /> с сообщением по умолчанию. </summary>
    </member>
    <member name="M:System.Data.MetadataException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.MetadataException" /> с указанным сообщением. </summary>
      <param name="message">Сообщение об исключении.</param>
    </member>
    <member name="M:System.Data.MetadataException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.MetadataException" /> с указанными сообщением и внутренним исключением. </summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="innerException">Исключение, вызвавшее данное исключение <see cref="T:System.Data.MetadataException" />.</param>
    </member>
    <member name="M:System.Data.MetadataException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Задает в <see cref="T:System.Runtime.Serialization.SerializationInfo" /> информацию об исключении.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта, относящиеся к создаваемому исключению.</param>
      <param name="context">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="T:System.Data.ObjectNotFoundException">
      <summary>Исключение, создаваемое в случае отсутствия объекта.</summary>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.ObjectNotFoundException" />.</summary>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor(System.String)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Data.ObjectNotFoundException" />, используя специальное сообщение об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.ObjectNotFoundException" />, использующий указанное сообщение об ошибке и ссылку на внутреннее исключение.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или указатель null (Nothing в Visual Basic), если внутреннее исключение не задано.</param>
    </member>
    <member name="T:System.Data.OptimisticConcurrencyException">
      <summary>Исключение, создаваемое, если произошло нарушение оптимистической блокировки. </summary>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.OptimisticConcurrencyException" />.</summary>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Data.OptimisticConcurrencyException" />, используя специальное сообщение об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.OptimisticConcurrencyException" />, использующий указанное сообщение об ошибке и ссылку на внутреннее исключение.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или указатель null (Nothing в Visual Basic), если внутреннее исключение не задано.</param>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.OptimisticConcurrencyException" />, использующий указанное сообщение об ошибке, ссылку на внутреннее исключение и перечисляемую коллекцию объектов <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или null (Nothing в Visual Basic), если внутреннее исключение не задано.</param>
      <param name="stateEntries">Перечисляемая коллекция объектов <see cref="T:System.Data.Objects.ObjectStateEntry" />.</param>
    </member>
    <member name="T:System.Data.ProviderIncompatibleException">
      <summary>Исключение, генерируемое, когда используемый поставщик данных несовместим с Entity Framework. </summary>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.ProviderIncompatibleException" />.</summary>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor(System.String)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Data.ProviderIncompatibleException" />, используя специальное сообщение об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Data.ProviderIncompatibleException" />, использующего специальное сообщение об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или null (Nothing в Visual Basic), если внутреннее исключение не задано.</param>
    </member>
    <member name="T:System.Data.UpdateException">
      <summary>Исключение, которое выдается в том случае, когда изменения в экземплярах объектов не могут быть сохранены в источнике данных.</summary>
    </member>
    <member name="M:System.Data.UpdateException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.UpdateException" />.</summary>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.UpdateException" />, используя сериализованные данные.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, содержащий сериализованные данные объекта о генерируемом исключении. </param>
      <param name="context">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении. </param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Data.UpdateException" />, используя специальное сообщение об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.UpdateException" />, который использует указанное сообщение об ошибке и ссылку на внутреннее исключение, которое стало причиной данного исключения. </summary>
      <param name="message">Сообщение об ошибке с объяснением причины исключения. </param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или null (Nothing в Visual Basic), если внутреннее исключение не задано.</param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.UpdateException" />, использующий указанное сообщение об ошибке, ссылку на внутреннее исключение и перечисляемую коллекцию объектов <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <param name="message">Сообщение об ошибке, объясняющее причину исключения. </param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или null (Nothing в Visual Basic), если внутреннее исключение не задано.</param>
      <param name="stateEntries">Коллекция объектов <see cref="T:System.Data.Objects.ObjectStateEntry" />.</param>
    </member>
    <member name="P:System.Data.UpdateException.StateEntries">
      <summary>Возвращает объекты <see cref="T:System.Data.Objects.ObjectStateEntry" /> для данного <see cref="T:System.Data.UpdateException" />.</summary>
      <returns>Коллекция объектов <see cref="T:System.Data.Objects.ObjectStateEntry" />, составленная либо из одной сущности и нуля или более связей, либо нулевого количества сущностей и 1 и более связей.</returns>
    </member>
    <member name="T:System.Data.Common.DataRecordInfo">
      <summary>Предоставляет доступ к сведениям о структурном типе и столбце для <see cref="T:System.Data.Common.DbDataRecord" />.  </summary>
    </member>
    <member name="M:System.Data.Common.DataRecordInfo.#ctor(System.Data.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.EdmMember})">
      <summary>Инициализирует новый объект <see cref="T:System.Data.Common.DbDataRecord" /> для конкретного типа с перечислимой коллекцией полей данных.</summary>
      <param name="metadata">Метаданные для типа, представленного этим объектом, заданные <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <param name="memberInfo">Перечисляемая коллекция объектов <see cref="T:System.Data.Metadata.Edm.EdmMember" />, представляющих сведения о столбцах.</param>
    </member>
    <member name="P:System.Data.Common.DataRecordInfo.FieldMetadata">
      <summary>Получает <see cref="T:System.Data.Common.FieldMetadata" /> для этого объекта <see cref="P:System.Data.IExtendedDataRecord.DataRecordInfo" />.</summary>
      <returns>Объект <see cref="T:System.Data.Common.FieldMetadata" />.</returns>
    </member>
    <member name="P:System.Data.Common.DataRecordInfo.RecordType">
      <summary>Получает сведения о типе для этого объекта в виде объекта <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Значение <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="T:System.Data.Common.DbCommandDefinition">
      <summary>Определяет кэшируемый план команды.</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.#ctor">
      <summary>Инициализирует новый объект <see cref="T:System.Data.Common.DbCommandDefinition" />.</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.#ctor(System.Data.Common.DbCommand)">
      <summary>Инициализирует новый объект <see cref="T:System.Data.Common.DbCommandDefinition" />, используя предоставленную команду <see cref="T:System.Data.Common.DbCommand" />.</summary>
      <param name="prototype">Предоставленный объект <see cref="T:System.Data.Common.DbCommand" />.</param>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.CreateCommand">
      <summary>Создает и возвращает выполняемый объект <see cref="T:System.Data.Common.DbCommand" />. </summary>
      <returns>Объект <see cref="T:System.Data.Common.DbCommand" />.</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderManifest">
      <summary>Представляет интерфейс метаданных для всех типов среды CLR.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.DbProviderManifest" />. </summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.ConceptualSchemaDefinition">
      <summary>Значение, которое должно быть передано методу <see cref="M:System.Data.Common.DbProviderManifest.GetInformation" /> для получения сведений определения концептуальной схемы.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.EscapeLikeArgument(System.String)">
      <summary>Разработчики поставщиков должны переопределять этот метод для возвращения аргумента со знаками подстановки и преобразованным escape-символом.Этот метод используется только в том случае, если объект <see cref="M:System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)" /> возвращает значение true.</summary>
      <returns>Аргумент с подстановочными знаками и преобразованным escape-символом.</returns>
      <param name="argument">Аргумент, подвергаемый escape-преобразованию.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetDbInformation(System.String)">
      <summary>При переопределении в производном классе этот метод возвращает сведения, касающиеся конкретного поставщика.Этот метод не должен возвращать значение null.</summary>
      <returns>Объект <see cref="T:System.Xml.XmlReader" />, содержащий требуемые сведения.</returns>
      <param name="informationType">Тип возвращаемых сведений.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetEdmType(System.Data.Metadata.Edm.TypeUsage)">
      <summary>При переопределении в производном классе этот метод сопоставляет указанный тип хранилища и набор аспектов этого типа с типом модели EDM.</summary>
      <returns>Экземпляр T:System.Data.Metadata.Edm.TypeUsage, описывающий тип модели EDM и набор аспектов этого типа.</returns>
      <param name="storeType">Экземпляр <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, описывающий тип хранилища и набор аспектов этого типа, которые должны быть сопоставлены с типом модели EDM.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)">
      <summary>Возвращает объекты <see cref="T:System.Data.Metadata.Edm.FacetDescription" /> для определенного типа.</summary>
      <returns>Объекты <see cref="T:System.Data.Metadata.Edm.FacetDescription" /> для заданного типа модели EDM.</returns>
      <param name="edmType">Тип модели EDM, для которого требуется получить описание аспектов.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetInformation(System.String)">
      <summary>Получает сведения, касающиеся конкретного поставщика.</summary>
      <returns>Объект <see cref="T:System.Xml.XmlReader" />, содержащий требуемые сведения.</returns>
      <param name="informationType">Тип возвращаемых сведений.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreFunctions">
      <summary>При переопределении в производном классе возвращает коллекцию функций EDM, поддерживаемых манифестом поставщика.</summary>
      <returns>Коллекция функций EDM.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreType(System.Data.Metadata.Edm.TypeUsage)">
      <summary>При переопределении в производном классе этот метод сопоставляет указанный тип модели EDM и набор аспектов этого типа с типом хранилища.</summary>
      <returns>Экземпляр <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, описывающий тип хранилища и набор аспектов этого типа.</returns>
      <param name="edmType">Экземпляр <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, описывающий тип модели EDM и набор аспектов этого типа, которые должны быть сопоставлены с типом хранилища.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreTypes">
      <summary>При переопределении в производном классе возвращает набор типов, поддерживаемых источником данных.</summary>
      <returns>Набор типов, поддерживаемых источником данных.</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderManifest.NamespaceName">
      <summary>Получает пространство имен, используемое манифестом этого поставщика.</summary>
      <returns>Пространство имен, используемое манифестом этого поставщика.</returns>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaDefinition">
      <summary>Значение, которое должно быть передано методу <see cref="M:System.Data.Common.DbProviderManifest.GetInformation" /> для получения сведений определения схемы хранения.</summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaMapping">
      <summary>Значение, которое должно быть передано методу <see cref="M:System.Data.Common.DbProviderManifest.GetInformation" /> для получения сведений о сопоставлении схемы хранения.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
      <summary>Указывает, поддерживает ли поставщик escape-преобразование строк, используемых как шаблоны в выражении LIKE.</summary>
      <returns>Возвращает значение true, если данный поставщик поддерживает escape-преобразование строк, используемых в качестве шаблонов в выражении LIKE; в противном случае возвращает значение false.Реализация по умолчанию возвращает значение false.</returns>
      <param name="escapeCharacter">Если поставщик поддерживает escape-преобразование, данный символ используется как escape-символ.</param>
    </member>
    <member name="T:System.Data.Common.DbProviderServices">
      <summary>Представляет набор методов для создания правильных объектов определения команд и получения доступа к сведениям о манифесте поставщика.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.DbProviderServices" />.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.CommandTrees.DbCommandTree)">
      <summary>Создает объект определения команд из указанного дерева команд.</summary>
      <returns>Объект определения исполняемой команды.</returns>
      <param name="commandTree">Дерево команд для инструкции. </param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)">
      <summary>Создает определение <see cref="T:System.Data.Common.DbCommandDefinition" />, использующее указанную команду <see cref="T:System.Data.Common.DbCommand" />.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DbCommandDefinition" />, представляющий объект определения исполняемой команды.</returns>
      <param name="prototype">Объект <see cref="T:System.Data.Common.DbCommand" />, используемый для создания <see cref="T:System.Data.Common.DbCommandDefinition" />.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbProviderManifest,System.Data.Common.CommandTrees.DbCommandTree)">
      <summary>Создает объект <see cref="T:System.Data.Common.DbCommandDefinition" /> из дерева команд.</summary>
      <returns>Объект определения исполняемой команды.</returns>
      <param name="providerManifest">Манифест поставщика, ранее извлеченный из поставщика хранилищ.</param>
      <param name="commandTree">Дерево команд для инструкции.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Создает базу данных, определенную подключением, и объекты схемы (таблицы, первичные ключи, внешние ключи) на основе содержимого объекта <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</summary>
      <param name="connection">Подключение к несуществующей базе данных, которую необходимо создать и заполнить объектами хранилища, определенными параметром <paramref name="storeItemCollection" />.</param>
      <param name="commandTimeout">Время ожидания выполнения любых команд, необходимых для создания базы данных.</param>
      <param name="storeItemCollection">Коллекция всех элементов хранилища, составленная на основе того, какой скрипт необходимо создать.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Создает скрипт на языке описания данных (DDL), который создает объекты схемы (таблицы, первичные ключи, внешние ключи) на основе содержимого параметра <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />, предназначенные для версии базы данных, соответствующей токену манифеста поставщика.</summary>
      <returns>DDL-скрипт, создающий объекты схемы на основе содержимого параметра <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />, предназначенные для версии базы данных, соответствующей токену манифеста поставщика.</returns>
      <param name="providerManifestToken">Токен манифеста поставщика, определяющий целевую версию.</param>
      <param name="storeItemCollection">Структура базы данных, которую необходимо создать.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Common.DbProviderManifest,System.Data.Common.CommandTrees.DbCommandTree)">
      <summary>Создает объект определения команд для указанного манифеста поставщика и дерева команд.</summary>
      <returns>Объект определения исполняемой команды.</returns>
      <param name="providerManifest">Манифест поставщика, ранее извлеченный из поставщика хранилищ.</param>
      <param name="commandTree">Дерево команд для инструкции.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Возвращает значение, указывающее, существует ли заданная база данных на сервере и были ли созданы объекты схемы, содержащиеся в коллекции storeItemCollection.</summary>
      <returns>Значение true, если база данных, обозначаемая подключением и параметром <paramref name="storeItemCollection" />, существует.</returns>
      <param name="connection">Подключение к базе данных, существование которой проверяется этим методом.</param>
      <param name="commandTimeout">Время ожидания выполнения любых команд, необходимых для определения существования этой базы данных.</param>
      <param name="storeItemCollection">Коллекция всех элементов хранилища, содержащихся в базе данных, существование которой определяется этим методом.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Создает базу данных, определенную подключением, и объекты схемы (таблицы, первичные ключи, внешние ключи) на основе содержимого объекта <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</summary>
      <param name="connection">Подключение к несуществующей базе данных, которую необходимо создать и заполнить объектами хранилища, определенными параметром storeItemCollection.</param>
      <param name="commandTimeout">Время ожидания выполнения любых команд, необходимых для создания базы данных.</param>
      <param name="storeItemCollection">Коллекция всех элементов хранилища, составленная на основе того, какой скрипт необходимо создать.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Создает скрипт на языке описания данных (DDL), который создает объекты схемы (таблицы, первичные ключи, внешние ключи) на основе содержимого параметра <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />, предназначенные для версии базы данных, соответствующей токену манифеста поставщика.</summary>
      <returns>DDL-скрипт, создающий объекты схемы на основе содержимого параметра <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />, предназначенные для версии базы данных, соответствующей токену манифеста поставщика.</returns>
      <param name="providerManifestToken">Токен манифеста поставщика, определяющий целевую версию.</param>
      <param name="storeItemCollection">Структура этой базы данных.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Возвращает значение, указывающее, существует ли заданная база данных на сервере и были ли созданы объекты схемы, содержащиеся в коллекции storeItemCollection.</summary>
      <returns>Значение true, если база данных, обозначаемая подключением и параметром <paramref name="storeItemCollection" />, существует.</returns>
      <param name="connection">Подключение к базе данных, существование которой проверяется этим методом.</param>
      <param name="commandTimeout">Время ожидания выполнения любых команд, необходимых для определения существования этой базы данных.</param>
      <param name="storeItemCollection">Структура базы данных, существование которой определяется этим методом.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Удаляет все объекты хранилища, заданные в коллекции элементов хранилища, из базы данных и саму базу данных.</summary>
      <param name="connection">Подключение к существующей базе данных, которую необходимо удалить.</param>
      <param name="commandTimeout">Время ожидания выполнения любых команд, необходимых для удаления базы данных.</param>
      <param name="storeItemCollection">Структура базы данных, которую необходимо удалить.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Metadata.Edm.StoreItemCollection)">
      <summary>Удаляет все объекты хранилища, заданные в коллекции элементов хранилища, из базы данных и саму базу данных.</summary>
      <param name="connection">Подключение к существующей базе данных, которую необходимо удалить.</param>
      <param name="commandTimeout">Время ожидания выполнения любых команд, необходимых для удаления базы данных.</param>
      <param name="storeItemCollection">Структура базы данных, которую необходимо удалить.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbProviderManifest(System.String)">
      <summary>При переопределении в унаследованном классе возвращает экземпляр класса, унаследованного от <see cref="T:System.Data.Common.DbProviderManifest" />.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DbProviderManifest" />, представляющий манифест поставщика.</returns>
      <param name="manifestToken">Сведения о токене, связанном с манифестом поставщика.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Возвращает токен манифеста поставщика с подключением.</summary>
      <returns>Токен манифеста поставщика для указанного подключения.</returns>
      <param name="connection">Подключение к поставщику.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderManifest(System.String)">
      <summary>Возвращает манифест поставщика с помощью указанных сведений о версии.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DbProviderManifest" />, представляющий манифест поставщика.</returns>
      <param name="manifestToken">Сведения о токене, связанном с манифестом поставщика.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Возвращает токен манифеста поставщика.</summary>
      <returns>Токен манифеста поставщика.</returns>
      <param name="connection">Подключение к поставщику.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
      <summary>Возвращает поставщиков с подключением.</summary>
      <returns>Экземпляры T:System.Data.Common.Службы DbProviderServices, основанные на указанном подключении.</returns>
      <param name="connection">Подключение к поставщику.</param>
    </member>
    <member name="T:System.Data.Common.DbXmlEnabledProviderManifest">
      <summary>Представляет базовый класс, реализующий <see cref="T:System.Data.Common.DbProviderManifest" /> на основе определения XML.Класс <see cref="T:System.Data.Common.DbXmlEnabledProviderManifest" /> можно использовать для получения сведений о конкретном поставщике во время выполнения.</summary>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.DbXmlEnabledProviderManifest" />.</summary>
      <param name="reader">Объект <see cref="T:System.Xml.XmlReader" />, который предоставляет доступ к XML-данным в файле манифеста поставщика.</param>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)">
      <summary>Возвращает список описаний аспектов для заданного типа модели EDM.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список описаний аспектов для заданного типа модели EDM.</returns>
      <param name="type">Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, для которого требуется получить описания аспектов.</param>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
      <summary>Возвращает список функций, поддерживаемых поставщиком.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список функций, поддерживаемых поставщиком.</returns>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
      <summary>Возвращает список типов-примитивов, поддерживаемых поставщиком хранилища.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список типов-примитивов, поддерживаемых поставщиком хранилища.</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.NamespaceName">
      <summary>Получает имя пространства имен, поддерживаемое манифестом этого поставщика.</summary>
      <returns>Имя пространства имен, поддерживаемое манифестом этого поставщика.</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
      <summary>Получает наилучший эквивалент сопоставления типа модели EDM для заданного имени типа хранения.</summary>
      <returns>Наилучший эквивалент сопоставления типа модели EDM для заданного имени типа хранения.</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
      <summary>Получает наилучший эквивалент типа-примитива хранения, сопоставленный с заданным именем типа хранения.</summary>
      <returns>Наилучший эквивалент типа-примитива хранения, сопоставленный с заданным именем типа хранения.</returns>
    </member>
    <member name="T:System.Data.Common.EntityRecordInfo">
      <summary>Предоставляет доступ к метаданным сущности. </summary>
    </member>
    <member name="M:System.Data.Common.EntityRecordInfo.#ctor(System.Data.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.EdmMember},System.Data.EntityKey,System.Data.Metadata.Edm.EntitySet)">
      <summary>Инициализирует новый объект <see cref="T:System.Data.Common.EntityRecordInfo" /> с указанным типом сущности с перечисляемой коллекцией полей данных, с указанным ключом и сведениями о наборе сущностей.</summary>
      <param name="metadata">Объект <see cref="T:System.Data.Metadata.Edm.EntityType" /> сущности, представленной <see cref="T:System.Data.Common.DbDataRecord" /> и описанной объектом <see cref="T:System.Data.Common.EntityRecordInfo" />.</param>
      <param name="memberInfo">Перечисляемая коллекция объектов <see cref="T:System.Data.Metadata.Edm.EdmMember" />, представляющих сведения о столбцах.</param>
      <param name="entityKey">Объект <see cref="T:System.Data.EntityKey" />, который является ключом сущности.</param>
      <param name="entitySet">Объект <see cref="T:System.Data.Metadata.Edm.EntitySet" />, являющийся набором сущностей, которому принадлежит эта сущность.</param>
    </member>
    <member name="P:System.Data.Common.EntityRecordInfo.EntityKey">
      <summary>Получает <see cref="T:System.Data.EntityKey" /> для сущности.</summary>
      <returns>Объект <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="T:System.Data.Common.FieldMetadata">
      <summary>Предоставляет доступ к метаданным поля для объекта <see cref="T:System.Data.Common.DataRecordInfo" />. </summary>
    </member>
    <member name="M:System.Data.Common.FieldMetadata.#ctor(System.Int32,System.Data.Metadata.Edm.EdmMember)">
      <summary>Инициализирует новый объект <see cref="T:System.Data.Common.FieldMetadata" /> с указанными порядковым номером и типом поля.</summary>
      <param name="ordinal">Целое число, указывающее расположение метаданных.</param>
      <param name="fieldType">Тип поля.</param>
    </member>
    <member name="P:System.Data.Common.FieldMetadata.FieldType">
      <summary>Получает тип поля для этого объекта <see cref="T:System.Data.Common.FieldMetadata" />.</summary>
      <returns>Тип поля для этого объекта <see cref="T:System.Data.Common.FieldMetadata" />.</returns>
    </member>
    <member name="P:System.Data.Common.FieldMetadata.Ordinal">
      <summary>Получает порядковый номер для этого объекта <see cref="T:System.Data.Common.FieldMetadata" />.</summary>
      <returns>Целое число, представляющее порядковый номер.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbAggregate">
      <summary>Реализует базовые функциональные возможности, необходимые для статистических выражений в предложении GroupBy. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbAggregate.Arguments">
      <summary>Получает список выражений, задающих аргументы для этого объекта <see cref="T:System.Data.Common.CommandTrees.DbAggregate" />.</summary>
      <returns>Список выражений, задающих аргументы для этого объекта <see cref="T:System.Data.Common.CommandTrees.DbAggregate" />.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbAggregate.ResultType">
      <summary>Получает результирующий тип этого объекта <see cref="T:System.Data.Common.CommandTrees.DbAggregate" />. </summary>
      <returns>Результирующий тип этого объекта <see cref="T:System.Data.Common.CommandTrees.DbAggregate" />.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbAndExpression">
      <summary>Представляет операцию логического И с двумя аргументами типа Boolean.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbAndExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbApplyExpression">
      <summary>Представляет операцию применения, которая является вызовом заданной функции для каждого элемента в указанном входном наборе.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbApplyExpression.Apply">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий функцию, которая вызывается для каждого элемента во входном наборе.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий функцию, которая вызывается для каждого элемента во входном наборе.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbApplyExpression.Input">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий входной набор.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий входной набор.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbArithmeticExpression">
      <summary>Представляет арифметическую операцию, применяемую к числовым аргументам.Арифметическими операциями являются суммирование, вычитание, умножение, деление, вычисление остатка от деления и отрицание.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbArithmeticExpression.Arguments">
      <summary>Получает список элементов <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющих текущие аргументы.</summary>
      <returns>Список фиксированного размера, состоящий из элементов <see cref="T:System.Data.Common.CommandTrees.DbExpression" />.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbBinaryExpression">
      <summary>Реализует базовые функциональные возможности, необходимые для выражений, принимающих два операнда выражения.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbBinaryExpression.Left">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий левый аргумент.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий левый аргумент.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связанно с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" />.или его результирующий тип не равен типу, необходимому для левого аргумента, либо не поддерживает приведение к этому типу.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbBinaryExpression.Right">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий правый аргумент.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий правый аргумент.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связанно с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" />.или его результирующий тип не равен типу, необходимому для правого аргумента, либо не поддерживает приведение к этому типу.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCaseExpression">
      <summary>Представляет предложения When, Then и Else объекта <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.Else">
      <summary>Возвращает или предложение Else этого объекта <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>Предложение Else этого объекта <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связанно с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.или его результирующий тип не равен типу объекта <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />, либо не поддерживает приведение к этому типу.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.Then">
      <summary>Получает предложения Then этого объекта <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>Предложения Then этого объекта <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.When">
      <summary>Получает предложения When этого объекта <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>Предложения When этого объекта <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCastExpression">
      <summary>Представляет преобразование типа одного аргумента в заданный тип.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCastExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCommandTree">
      <summary>Неизменяемый класс, который реализует базовые функциональные возможности для типов дерева команд запроса, вставки, обновления, удаления и вызова функции. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCommandTree.Parameters">
      <summary>Получает имя и соответствующий тип каждого параметра, на который можно добавить ссылку в этом объекте <see cref="T:System.Data.Common.CommandTrees.DbCommandTree" />.</summary>
      <returns>Имя и соответствующий тип каждого параметра, на который можно добавить ссылку в этом объекте <see cref="T:System.Data.Common.CommandTrees.DbCommandTree" />.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbComparisonExpression">
      <summary>Представляет операцию сравнения, применяемую к двум аргументам.Операциями сравнения являются: равно; больше, чем; больше или равно; меньше, чем; меньше или равно; не равно.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbConstantExpression">
      <summary>Представляет различные типы констант (литералов).Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbConstantExpression.Value">
      <summary>Получает значение константы.</summary>
      <returns>Значение константы.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCrossJoinExpression">
      <summary>Представляет операцию безусловного соединения заданных аргументов коллекции.Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCrossJoinExpression.Inputs">
      <summary>Получает список <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, в котором указываются входные наборы для соединения.</summary>
      <returns>Список <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, содержащий входные наборы для соединения.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDeleteCommandTree">
      <summary>Представляет операцию удаления одной строки, представленную в виде дерева команд.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbDeleteCommandTree.Predicate">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, задающий предикат, используемый для определения членов целевой коллекции, которые необходимо удалить.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, задающий предикат, используемый для определения членов целевой коллекции, которые необходимо удалить.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDerefExpression">
      <summary>Представляет выражение, извлекающее сущность на основе указанной ссылки.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDistinctExpression">
      <summary>Удаляет повторяющиеся элементы из указанного аргумента множества.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbElementExpression">
      <summary>Представляет преобразование заданного аргумента множества в Singleton-класс.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbElementExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbEntityRefExpression">
      <summary>Представляет выражение, извлекающее ссылку из базового экземпляра сущности.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExceptExpression">
      <summary>Представляет операцию вычитания между левым и правым операндами.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpression">
      <summary>Реализует основные функциональные возможности, необходимые для типов выражений.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Тип результата, созданного объектом <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> равно null).</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.Equals(System.Object)">
      <summary>Определяет, равен ли указанный объект <see cref="T:System.Object" /> текущему экземпляру <see cref="T:System.Data.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Значение true, если указанный объект <see cref="T:System.Object" /> равен текущему объекту <see cref="T:System.Data.Common.CommandTrees.DbExpression" />; в противном случае — значение false.</returns>
      <param name="obj">Объект для сравнения с текущим объектом <see cref="T:System.Data.Common.CommandTrees.DbExpression" />.</param>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpression.ExpressionKind">
      <summary>Получает тип выражения, который задает его операцию.</summary>
      <returns>Тип выражения, который задает его операцию.</returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.GetHashCode">
      <summary>Служит в качестве хеш-функции для типа.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.Data.Common.CommandTrees.DbExpression" />. </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpression.ResultType">
      <summary>Получает тип метаданных для результирующего типа выражения.</summary>
      <returns>Тип метаданных для результирующего типа выражения.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionBinding">
      <summary>Представляет входной набор для таких реляционных выражений, как <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />, <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> и <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.Expression">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий входной набор.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий входной набор.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд привязки или его результирующий тип не равен результирующему типу текущего значения свойства, либо не поддерживает приведение к этому типу.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.Variable">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />, ссылающийся на переменную элемента.</summary>
      <returns>Ссылка на переменную.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.VariableName">
      <summary>Получает имя, присвоенное переменной элемента.</summary>
      <returns>Имя, присвоенное переменной элемента.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.VariableType">
      <summary>Получает метаданные типа для переменной элемента.</summary>
      <returns>Метаданные типа для переменной элемента. </returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionKind">
      <summary>Содержит значения, используемые каждым классом выражений для обозначения операции, которую он представляет.Для определения операции, которую представляет выражение, можно извлечь свойство <see cref="P:System.Data.Common.CommandTrees.DbExpression.ExpressionKind" /> объекта <see cref="T:System.Data.Common.CommandTrees.DbExpression" />.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.All">
      <summary>Выражение "true для всех".</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.And">
      <summary>Выражения с логическим И.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Any">
      <summary>Выражение "true для любых".</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Case">
      <summary>Выражения с оператором условного выбора.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Cast">
      <summary>Выражения приведения к полиморфному типу.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Constant">
      <summary>Выражения с постоянным значением.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.CrossApply">
      <summary>Выражения перекрестного применения.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.CrossJoin">
      <summary>Выражения перекрестного соединения.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Deref">
      <summary>Выражения разыменования.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Distinct">
      <summary>Выражения удаления дубликатов.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Divide">
      <summary>Выражения деления.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Element">
      <summary>Выражения преобразования множеств в Singleton-класс.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.EntityRef">
      <summary>Выражения извлечения значения ссылки на сущность.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Equals">
      <summary>Выражения равенства.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Except">
      <summary>Выражения вычитания множеств.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Filter">
      <summary>Выражения ограничений.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
      <summary>Выражения полного внешнего соединения.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Function">
      <summary>Выражения автономных функций.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GreaterThan">
      <summary>Выражения "больше, чем".</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
      <summary>Выражения "больше чем или равно".</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GroupBy">
      <summary>Выражения группирования.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.InnerJoin">
      <summary>Выражения внутреннего соединения.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Intersect">
      <summary>Выражения пересечения множеств.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsEmpty">
      <summary>Выражения определения пустого множества.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsNull">
      <summary>Выражения определения значения NULL.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsOf">
      <summary>Выражения сравнения типов (заданный тип или подтип).</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsOfOnly">
      <summary>Выражения сравнения типов (только заданный тип).</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Lambda">
      <summary>Выражения лямбда-функций.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
      <summary>Выражения левого внешнего соединения.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LessThan">
      <summary>Выражения "меньше, чем".</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
      <summary>Выражения "меньше чем или равно".</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Like">
      <summary>Выражения сравнения строк.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Limit">
      <summary>Ограничение на количество результатов (TOP n).</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Minus">
      <summary>Выражения вычитания.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Modulo">
      <summary>Выражения вычисления остатка от деления.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Multiply">
      <summary>Выражения умножения.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.NewInstance">
      <summary>Выражения с конструкциями из экземпляров, строк и множеств.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Not">
      <summary>Выражения с логическим НЕ.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.NotEquals">
      <summary>Выражения неравенства.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Null">
      <summary>Выражения со значением NULL.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OfType">
      <summary>Выражения задания элементов по типу (или подтипу).</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
      <summary>Выражения задания элементов по точному типу.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Or">
      <summary>Выражения с логическим ИЛИ.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OuterApply">
      <summary>Выражения внешнего применения.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.ParameterReference">
      <summary>Выражения ссылки на параметр.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Plus">
      <summary>Выражения суммирования.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Project">
      <summary>Выражения вычисления условного математического ожидания.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Property">
      <summary>Выражения извлечения статических свойств или свойств экземпляров.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Ref">
      <summary>Выражения ссылки.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.RefKey">
      <summary>Выражения извлечения значения ключа ссылки.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
      <summary>Выражения переходов по связям (суперпозиция или объединение).</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Scan">
      <summary>Выражения сканирования множеств связей или сущностей.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Skip">
      <summary>Пропуск элементов упорядоченной коллекции.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Sort">
      <summary>Выражения сортировки.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Treat">
      <summary>Выражения преобразования типов.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.UnaryMinus">
      <summary>Выражения логического отрицания.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.UnionAll">
      <summary>Выражения объединения множеств (с дубликатами).</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.VariableReference">
      <summary>Выражения ссылки на переменную.</summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionVisitor">
      <summary>Определяет базовые функциональные возможности, которые должны быть реализованы посетителями, не возвращающими результирующее значение.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbAndExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbApplyExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCaseExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCastExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbConstantExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDerefExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbElementExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExceptExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExpression)">
      <summary>При переопределении в производном классе получает тип результата выражения XPath.</summary>
      <param name="expression">Обрабатываемое выражение.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFilterExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbJoinExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLambdaExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLikeExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLimitExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNotExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNullExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOrExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbProjectExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbScanExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSkipExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSortExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbTreatExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />.</summary>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />.</param>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionVisitor`1">
      <summary>Определяет базовые функциональные возможности, которые должны быть реализованы посетителями, возвращающими результирующее значение определенного типа. </summary>
      <typeparam name="TResultType">Тип результата, полученного в результате обхода.</typeparam>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor`1" />. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbAndExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" />. </summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbApplyExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCaseExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCastExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.Db.ComparisonExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbConstantExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbDerefExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbElementExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbExceptExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbExpression)">
      <summary>При переопределении в производном классе получает тип результата выражения XPath.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbFilterExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbJoinExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbLambdaExpression)">
      <summary>При переопределении в производном классе реализует метод шаблона посетителя для <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbLikeExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbLimitExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNotExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNullExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbOrExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbProjectExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRefExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbScanExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbSkipExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbSortExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbTreatExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" />.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>При переопределении в производном классе реализует шаблон посетителя для <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />.</summary>
      <returns>Результирующее значение определенного типа.</returns>
      <param name="expression">Посещаемый объект <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />.</param>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFilterExpression">
      <summary>Представляет предикат, применяемый для фильтрации входного набора.Создает набор элементов, соответствующих предикату.Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFilterExpression.Input">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий входной набор.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий входной набор.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFilterExpression.Predicate">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, задающий предикат, используемый для фильтрации входного набора.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, задающий предикат, используемый для фильтрации входного набора.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" /> или его результирующий тип не является типом Boolean.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionAggregate">
      <summary>Поддерживает стандартные агрегатные функции, такие как MIN, MAX, AVG, SUM и т. п.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionAggregate.Distinct">
      <summary>Возвращает значение, указывающее, является ли это статистическое выражение отличимым.</summary>
      <returns>Значение true, если это статистическое выражение является уникальным; в противном случае — значение false. </returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionAggregate.Function">
      <summary>Получает метаданные метода, которые задают вызываемую агрегатную функцию.</summary>
      <returns>Метаданные метода, которые задают вызываемую агрегатную функцию.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionCommandTree">
      <summary>Представляет вызов функции базы данных. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
      <summary>Получает объект <see cref="T:System.Data.Metadata.Edm.EdmFunction" />, который представляет вызываемую функцию.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmFunction" />, который представляет вызываемую функцию.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionCommandTree.ResultType">
      <summary>Получает ожидаемый тип результата для первого результирующего набора функции.</summary>
      <returns>Ожидаемый тип результата для первого результирующего набора функции.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionExpression">
      <summary>Представляет вызов функции.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionExpression.Arguments">
      <summary>Получает список объектов <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, в котором указываются аргументы функции.</summary>
      <returns>Список объектов <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, в котором указываются аргументы функции.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionExpression.Function">
      <summary>Получает метаданные для вызова функции.</summary>
      <returns>Метаданные для вызова функции.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbGroupAggregate">
      <summary>Представляет коллекцию элементов, образующих группу.  </summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbGroupByExpression">
      <summary>Представляет группирование по операции.Группирование по операции — это группирование элементов во входном наборе по заданным выражениям ключей, за которым следует применение указанных статистических выражений.Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Aggregates">
      <summary>Получает список <see cref="T:System.Data.Common.CommandTrees.DbAggregate" />, в котором указываются применяемые статистические выражения.</summary>
      <returns>Список <see cref="T:System.Data.Common.CommandTrees.DbAggregate" />, в котором указываются применяемые статистические выражения.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Input">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" />, который задает входной набор и предоставляет доступ к элементам множества и переменным группирования элементов.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" />, который задает входной набор и предоставляет доступ к элементам множества и переменным группирования элементов.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Keys">
      <summary>Получает список <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, содержащий ключи группирования.</summary>
      <returns>Список <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, содержащий ключи группирования.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding">
      <summary>Определяет привязку входного набора к объекту <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />.Этот класс не наследуется.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.Expression">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий входной набор.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий входной набор.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" /> или его результирующий тип не равен результирующему типу текущего значения свойства, либо не поддерживает приведение к этому типу.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbGroupAggregate" />, представляющий коллекцию элементов в группе.</summary>
      <returns>Элементы в группе.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />, ссылающийся на переменную элемента группы.</summary>
      <returns>Ссылка на переменную элемента группы.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
      <summary>Получает имя, присвоенное переменной группирования элементов.</summary>
      <returns>Имя, присвоенное переменной группирования элементов.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
      <summary>Получает метаданные типа для переменной группирования элементов.</summary>
      <returns>Метаданные типа для переменной группирования элементов.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.Variable">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />, ссылающийся на переменную элемента.</summary>
      <returns>Ссылка на переменную элемента.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
      <summary>Получает имя, присвоенное переменной элемента.</summary>
      <returns>Имя, присвоенное переменной элемента.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
      <summary>Получает метаданные типа для переменной элемента.</summary>
      <returns>Метаданные типа для переменной элемента.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbInsertCommandTree">
      <summary>Представляет операцию вставки одной строки, представленную в виде дерева команд.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbInsertCommandTree.Returning">
      <summary>Получает выражение <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, которое задает прогнозируемые результаты, которые должны быть возвращены, на основе низменных строк. </summary>
      <returns>Выражение <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, которое задает проекцию возвращаемых результатов на основе измененных строк.Значение null указывает, что данная команда не должна возвращать результатов.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbInsertCommandTree.SetClauses">
      <summary>Получает список предложений вставки множеств, которые определяют операции вставки. </summary>
      <returns>Список предложений вставки множеств, которые определяют операции вставки. </returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIntersectExpression">
      <summary>Представляет операций пересечения множеств между левым и правым операндами.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsEmptyExpression">
      <summary>Представляет определение пустого множества, применяемое к одному аргументу множества.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsNullExpression">
      <summary>Представляет определение значения NULL, применяемое к одному аргументу.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsOfExpression">
      <summary>Представляет сравнение типов одного аргумента с заданным типом.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbIsOfExpression.OfType">
      <summary>Получает метаданные типа, с которыми нужно сравнить метаданные типа аргумента.</summary>
      <returns>Метаданные типа, с которыми нужно сравнить метаданные типа аргумента.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbJoinExpression">
      <summary>Представляет операцию внутреннего, левого внешнего или полного соединения между заданными аргументами коллекции с соблюдением указанных условий соединения.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа. </param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.JoinCondition">
      <summary>Возвращает или задает применяемое условие соединения.</summary>
      <returns>Применяемое условие соединения.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> или его результирующий тип не является типом Boolean.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.Left">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, предоставляющий входные данные слева.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, предоставляющий входные данные слева.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.Right">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, предоставляющий входные данные справа.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, предоставляющий входные данные справа.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLambda">
      <summary>Представляет лямбда-функцию, которую можно вызвать для создания объекта <see cref="T:System.Data.Common.CommandTrees.DbLambdaExpression" />.Данный класс не может наследоваться.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambda.Body">
      <summary>Возвращает тело лямбда-выражения.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, который предоставляет тело лямбда-функции.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambda.Variables">
      <summary>Возвращает параметры лямбда-выражения.</summary>
      <returns>Список параметров лямбда-функции, представленных объектами <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLambdaExpression">
      <summary>Позволяет применять лямбда-функцию к аргументам, представляемым объектами <see cref="T:System.Data.Common.CommandTrees.DbExpression" />.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambdaExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Метод шаблона посетителя для посетителей-выражений, которые не производят результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLambdaExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Метод шаблона посетителя для посетителей-выражений, которые производят результирующее значение определенного типа.</summary>
      <returns>Тип результата, произведенного посетителем-выражением.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который производит результирующее значение типа TResultType.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" /></typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambdaExpression.Arguments">
      <summary>Получает список объектов <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, предоставляющий аргументы, к которым следует применить лямбда-функцию.</summary>
      <returns>Список объектов <see cref="T:System.Data.Common.CommandTrees.DbExpression" />.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLambdaExpression.Lambda">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbLambda" />, представляющий лямбда-функцию, применяемую к данному выражению.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbLambda" />, представляющий лямбда-функцию, применяемую к данному выражению.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLikeExpression">
      <summary>Представляет сравнение строки с заданным шаблоном, содержащим необязательную строку escape-символ ов.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Argument">
      <summary>Возвращает или задает выражение, задающее строку, которую необходимо сравнить с заданным шаблоном.</summary>
      <returns>Выражение, задающее строку, которую необходимо сравнить с заданным шаблоном.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> или его результирующий тип не является строковым типом.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Escape">
      <summary>Возвращает или задает выражение, предоставляющее необязательную строку escape-символ ов, которая используется для сравнения.</summary>
      <returns>Выражение, предоставляющее необязательную строку escape-символ ов, которая используется для сравнения.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> или его результирующий тип не является строковым типом.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Pattern">
      <summary>Возвращает или задает выражение, задающее шаблон, с которым необходимо сравнить с заданной строкой.</summary>
      <returns>Выражение, задающее шаблон, с которым необходимо сравнить с заданной строкой.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> или его результирующий тип не является строковым типом.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLimitExpression">
      <summary>Представляет ограничение на число элементов в коллекции аргументов заданным предельным значением.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.Argument">
      <summary>Возвращает или задает выражение, указывающее входную коллекцию.</summary>
      <returns>Выражение, указывающее входную коллекцию.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> или его результирующий тип не является коллекцией.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.Limit">
      <summary>Возвращает или задает выражение, указывающее предельное количество элементов, возвращаемых из входной коллекции.</summary>
      <returns>Выражение, указывающее предельное количество элементов, возвращаемых из входной коллекции.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> или не является одним из объектов <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> или <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> либо его результирующий тип не равен 64-разрядном целочисленному типу, либо он не поддерживает приведение к этому типу.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.WithTies">
      <summary>Получает значение, указывающее, будет ли операция определения предельного значения включать связанные результаты.Включение связанных результатов может дать больше результатов, чем указано в значении <see cref="P:System.Data.Common.CommandTrees.DbLimitExpression.Limit" />.</summary>
      <returns>Значение true, если операция определения предельного значения будет включать связанные результаты; в противном случае — значение false.Значение по умолчанию — false.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbModificationClause">
      <summary>Задает одно предложение в операции изменения путем вставки или обновления.</summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbModificationCommandTree">
      <summary>Представляет операцию языка обработки данных (DML), представленную в виде дерева команд.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbModificationCommandTree.Target">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий целевую таблицу для операции языка обработки данных (DML).</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий целевую таблицу для операции языка DML.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNewInstanceExpression">
      <summary>Представляет конструкцию нового экземпляра заданного типа, включая типы наборов и записей.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbNewInstanceExpression.Arguments">
      <summary>Получает список объектов <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, предоставляющий значения свойства или столбца или элементы набора для нового экземпляра.</summary>
      <returns>Список объектов <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, предоставляющий значения свойства или столбца или элементы набора для нового экземпляра.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNotExpression">
      <summary>Представляет операцию логического НЕ с одним аргументом типа Boolean.Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNotExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNullExpression">
      <summary>Представляет ссылку на типизированный литерал NULL.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNullExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbOfTypeExpression">
      <summary>Представляет извлечение элементов указанного типа из заданного аргумента множества.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbOfTypeExpression.OfType">
      <summary>Получает метаданные типа элементов, которые нужно извлечь из аргумента множества.</summary>
      <returns>Метаданные типа элементов, которые нужно извлечь из аргумента множества. </returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbOrExpression">
      <summary>Представляет операцию логического ИЛИ с двумя аргументами типа Boolean.Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOrExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression">
      <summary>Представляет ссылку на параметр, объявленный для дерева команд, содержащего это выражение.Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
      <summary>Получает имя параметра, на который указывает ссылка.</summary>
      <returns>Имя параметра, на который указывает ссылка.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbProjectExpression">
      <summary>Представляет проекцию входного набора на заданное выражение.Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbProjectExpression.Input">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий входной набор.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий входной набор.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbProjectExpression.Projection">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий проекцию.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, который определяет проекцию.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> или его результирующий тип не равен ссылочному типу текущей проекции, либо не поддерживает приведение к этому типу.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbPropertyExpression">
      <summary>Предоставляет методы и свойства для извлечения свойства экземпляра.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbPropertyExpression.Instance">
      <summary>Получает или задает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий экземпляр, из которого нужно извлечь свойство.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий экземпляр, из которого нужно извлечь свойство.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> или его результирующий тип не равен типу, который определяет свойство, либо не поддерживает приведение к этому типу.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.op_Implicit(System.Data.Common.CommandTrees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}">
      <summary>Создает новую пару ключ-значение на основе этого выражения свойства.</summary>
      <returns>Новая пара ключ-значение с ключом и значением, полученными из объекта <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />.</returns>
      <param name="value">Данное выражение свойства.</param>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbPropertyExpression.Property">
      <summary>Получает метаданные извлекаемого свойства.</summary>
      <returns>Метаданные извлекаемого свойства.</returns>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.ToKeyValuePair">
      <summary>Создает новую пару ключ-значение на основе этого выражения свойства.</summary>
      <returns>Новая пара ключ-значение с ключом и значением, полученными из объекта <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbQuantifierExpression">
      <summary>Представляет операцию квантора заданного типа для элементов указанного входного набора.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQuantifierExpression.Input">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий входной набор.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий входной набор.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQuantifierExpression.Predicate">
      <summary>Возвращает или задает предикат Boolean, который нужно оценить для каждого элемента во входном наборе.</summary>
      <returns>Предикат Boolean, который нужно оценить для каждого элемента во входном наборе.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связанно с деревом команд для объекта <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />.или тип не является типом Boolean.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbQueryCommandTree">
      <summary>Представляет операцию запроса, представленную в виде дерева команд.Этот класс не наследуется.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQueryCommandTree.Query">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий логику операции запроса.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий логику операции запроса.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение связано с другим деревом команд.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRefExpression">
      <summary>Представляет строго типизированную ссылку на определенный экземпляр в наборе сущностей.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRefExpression.EntitySet">
      <summary>Получает метаданные для набора сущностей, содержащего экземпляр.</summary>
      <returns>Метаданные для набора сущностей, содержащего экземпляр.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRefKeyExpression">
      <summary>Представляет извлечение значения ключа (в структурной форме) из базового значения ссылки.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression">
      <summary>Представляет переходы по связям.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение. </summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
      <summary>Получает метаданные для конца связи, из которого осуществляется переход.</summary>
      <returns>Метаданные для конца связи, из которого осуществляется переход.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
      <summary>Получает метаданные для конца связи, в который осуществляется переход.</summary>
      <returns>Метаданные для конца связи, в который осуществляется переход.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, который указывает начальную пиксель перехода и должен быть ссылкой на экземпляр сущности.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, который задает экземпляр исходного конца связи, из которого должен осуществляться переход.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" /> или его результирующий тип не равен ссылочному типу свойства <see cref="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom" />, либо не поддерживает приведение к этому типу.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
      <summary>Получает метаданные для связи, по которой осуществляется переход.</summary>
      <returns>Метаданные для связи, по которой осуществляется переход.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbScanExpression">
      <summary>Представляет сканирование по пустому множеству или набору связей, в соответствии со значением свойства <see cref="P:System.Data.Common.CommandTrees.DbScanExpression.Target" />.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbScanExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbScanExpression.Target">
      <summary>Получает метаданные для сущности, на которую указывает ссылка, или набора связей.</summary>
      <returns>Метаданные для сущности, на которую указывает ссылка, или набора связей.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSetClause">
      <summary>Задает предложение в операции изменения, которое устанавливает значение свойства.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSetClause.Property">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, который задает требующее обновления свойство.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, который задает требующее обновления свойство.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSetClause.Value">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, задающий новое значение, которым нужно обновить свойство.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, задающий новое значение, которым нужно обновить свойство. </returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSkipExpression">
      <summary>Пропускает заданное число элементов во входном наборе.<see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> может использоваться только после сортировки входной коллекции в соответствии с ключами сортировки.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.Count">
      <summary>Возвращает или задает выражение, указывающее количество элементов во входной коллекции, которое нужно пропустить.</summary>
      <returns>Выражение, указывающее количество элементов во входной коллекции, которое нужно пропустить.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />; выражение не являет ни объектом <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />, ни объектом <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />. или результирующий тип выражения не равен 64-разрядному целочисленном типу, либо не поддерживает приведение к этому типу.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.Input">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий входной набор.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий входной набор.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.SortOrder">
      <summary>Получает список <see cref="T:System.Data.Common.CommandTrees.DbSortClause" />, определяющий порядок сортировки.</summary>
      <returns>Список <see cref="T:System.Data.Common.CommandTrees.DbSortClause" />, определяющий порядок сортировки.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSortClause">
      <summary>Задает ключ сортировки, который можно использовать при сортировке в объекте <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Ascending">
      <summary>Получает логическое значение, указывающее, используется ли для этого ключа сортировка в порядке возрастания.</summary>
      <returns>Значение true, если для этого ключа используется сортировка в порядке возрастания; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Collation">
      <summary>Получает строковое значение, задающее коллекцию для этого ключа сортировки.</summary>
      <returns>Строковое значение, задающее коллекцию для этого ключа сортировки.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Expression">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, предоставляющий значение для этого ключа сортировки.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, предоставляющий значение для этого ключа сортировки.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSortExpression">
      <summary>Представляет операцию сортировки, применяемую к элементам указанного входного набора на основе заданного ключа сортировки.Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSortExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortExpression.Input">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий входной набор.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, задающий входной набор.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortExpression.SortOrder">
      <summary>Получает список <see cref="T:System.Data.Common.CommandTrees.DbSortClause" />, определяющий порядок сортировки.</summary>
      <returns>Список <see cref="T:System.Data.Common.CommandTrees.DbSortClause" />, определяющий порядок сортировки.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbTreatExpression">
      <summary>Представляет операцию преобразования типов, применяемую к полиморфному аргументу.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbUnaryExpression">
      <summary>Реализует базовые функциональные возможности, необходимые для выражений, принимающих аргумент одиночного выражения. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUnaryExpression.Argument">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий аргумент.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, определяющий аргумент.</returns>
      <exception cref="T:System.ArgumentNullException">Выражение равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение не связано с деревом команд объекта <see cref="T:System.Data.Common.CommandTrees.DbUnaryExpression" /> или его результирующий тип не равен типу, необходимому для аргумента, либо не поддерживает приведение к этому типу.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbUnionAllExpression">
      <summary>Представляет операцию объединения множеств (без удаления дубликатов) между левым и правым операндами.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbUpdateCommandTree">
      <summary>Представляет операцию обновления одной строки, представленную в виде дерева команд.Этот класс не может быть унаследован.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUpdateCommandTree.Predicate">
      <summary>Получает объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, задающий предикат, используемый для определения членов целевой коллекции, которые необходимо обновить.</summary>
      <returns>Объект <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, задающий предикат, используемый для определения членов целевой коллекции, которые необходимо обновить.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUpdateCommandTree.Returning">
      <summary>Получает выражение <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, которое задает прогнозируемые результаты, которые должны быть возвращены, на основе низменных строк.</summary>
      <returns>Выражение <see cref="T:System.Data.Common.CommandTrees.DbExpression" />, которое задает проекцию возвращаемых результатов на основе измененных строк.Значение null указывает, что данная команда не должна возвращать результатов.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUpdateCommandTree.SetClauses">
      <summary>Получает список предложений обновления множеств, которые определяют операции обновления.</summary>
      <returns>Список предложений обновления множеств, которые определяют операции обновления.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression">
      <summary>Представляет ссылку на переменную, которая в данных момент находится в пределах области.Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbVariableReferenceExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон посетителя для выражений, которые не дают результирующее значение.</summary>
      <param name="visitor">Экземпляр класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbVariableReferenceExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон посетителя для выражений, которые дают результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа для выражения <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного класса <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, который дает результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, созданного объектом <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="visitor" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbVariableReferenceExpression.VariableName">
      <summary>Получает имя переменной, на которую указывает ссылка.</summary>
      <returns>Имя переменной, на которую указывает ссылка.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityCommand">
      <summary>Представляет команду, которая должна быть выполнена для модели EDM. </summary>
      <exception cref="T:System.InvalidOperationException">Команда <see cref="T:System.Data.EntityClient.EntityCommand" /> не связана со свойством <see cref="T:System.Data.EntityClient.EntityConnection" />, которое было изменено во время транзакции. –либо–Связанное соединение <see cref="T:System.Data.EntityClient.EntityConnection" /> не содержит метаданных хранилища.–либо–Связанное соединение <see cref="T:System.Data.EntityClient.EntityConnection" /> находится в состоянии <see cref="F:System.Data.ConnectionState.Broken" />.Объект <see cref="T:System.Data.Common.DbDataReader" />, связанный с этой командой <see cref="T:System.Data.EntityClient.EntityCommand" />, открыт.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityCommand" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityCommand" /> с текстом команды.</summary>
      <param name="statement"> Текст команды.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor(System.String,System.Data.EntityClient.EntityConnection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityCommand" /> текстом команды и подключением <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <param name="statement">Текст команды.</param>
      <param name="connection">Объект <see cref="T:System.Data.EntityClient.EntityConnection" />, который представляет подключение к источнику данных.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.#ctor(System.String,System.Data.EntityClient.EntityConnection,System.Data.EntityClient.EntityTransaction)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityCommand" /> с текстом команды, <see cref="T:System.Data.EntityClient.EntityConnection" /> и <see cref="T:System.Data.EntityClient.EntityTransaction" />.</summary>
      <param name="statement">Текст команды.</param>
      <param name="connection">Объект <see cref="T:System.Data.EntityClient.EntityConnection" />, который представляет подключение к источнику данных.</param>
      <param name="transaction">Транзакция <see cref="T:System.Data.EntityClient.EntityTransaction" />, в которой выполняется <see cref="P:System.Data.EntityClient.EntityCommand.CommandText" />.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.Cancel">
      <summary>Пытается отменить выполнение <see cref="T:System.Data.EntityClient.EntityCommand" /> путем вызова метода Cancel базового поставщика данных.</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.CommandText">
      <summary>Получает или задает инструкцию Entity SQL, которая определяет команду или хранимую процедуру, подлежащую выполнению.</summary>
      <returns>Инструкция Entity SQL или хранимая процедура, которую необходимо выполнить.Значение по умолчанию — пустая строка.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.CommandTimeout">
      <summary>Возвращает или задает объем времени для ожидания перед тайм-аутом. </summary>
      <returns>Время ожидания выполнения команды (в секундах).Значение по умолчанию — стандартное время ожидания команды базового поставщика данных.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.CommandType">
      <summary>Получает или задает значение, которое указывает, как должно интерпретироваться свойство <see cref="P:System.Data.EntityClient.EntityCommand.CommandText" />.</summary>
      <returns>Одно из значений перечисления <see cref="T:System.Data.CommandType" />.Значением по умолчанию является Text.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.Connection">
      <summary>Возвращает или задает объект <see cref="T:System.Data.EntityClient.EntityConnection" />, используемый этим объектом <see cref="T:System.Data.EntityClient.EntityCommand" />.</summary>
      <returns>Объект <see cref="T:System.Data.EntityClient.EntityConnection" />. </returns>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Data.EntityClient.EntityConnection" /> было изменено в ходе выполнения транзакции. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.CreateParameter">
      <summary>Создает новый экземпляр объекта <see cref="T:System.Data.EntityClient.EntityParameter" />.</summary>
      <returns>Объект <see cref="T:System.Data.EntityClient.EntityParameter" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.DesignTimeVisible">
      <summary>Получает или задает значение, которое указывает, должен ли объект команды быть видимым в элементе управления конструктора Windows Form.</summary>
      <returns>Значение, указывающее, будет ли объект команды видимым в элементе управления.Значение по умолчанию — true.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.EnablePlanCaching">
      <summary>Получает или задает значение типа Boolean, которое включает или отключает кэширование плана запроса для команды <see cref="T:System.Data.EntityClient.EntityCommand" />.</summary>
      <returns>Значение типа Boolean, которое указывает, включено ли или отключено кэширование плана запроса для команды <see cref="T:System.Data.EntityClient.EntityCommand" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteNonQuery">
      <summary>Выполняет текущую команду.</summary>
      <returns>Число подвергшихся воздействию строк.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteReader">
      <summary>Выполняет команду и возвращает объект <see cref="T:System.Data.EntityClient.EntityDataReader" />.</summary>
      <returns>Объект <see cref="T:System.Data.EntityClient.EntityDataReader" />, содержащий результаты.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>Компилирует объект <see cref="P:System.Data.EntityClient.EntityCommand.CommandText" /> в дерево команд и передает его поставщику базового хранилища для выполнения.Затем создает объект <see cref="T:System.Data.EntityClient.EntityDataReader" /> на основе полученного результирующего набора, используя указанное значение <see cref="T:System.Data.CommandBehavior" />.</summary>
      <returns>Объект <see cref="T:System.Data.EntityClient.EntityDataReader" />, содержащий результаты.</returns>
      <param name="behavior">Одно из значений <see cref="T:System.Data.CommandBehavior" />.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ExecuteScalar">
      <summary>Выполняет команду и возвращает первый столбец первой строки результирующего набора.Дополнительные столбцы и строки игнорируются.</summary>
      <returns>Первый столбец первой строки набора результатов или пустая ссылка (Nothing в Visual Basic), если набор результатов пуст.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.Parameters">
      <summary>Получает объект <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Параметры инструкции Entity SQL или хранимой процедуры.По умолчанию коллекция является пустой.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.Prepare">
      <summary>Компилирует команду уровня сущности и создает подготовленную версию команды путем вызова метода Prepare объекта Command базового поставщика данных.</summary>
      <exception cref="T:System.InvalidOperationException">Связанное соединение <see cref="T:System.Data.EntityClient.EntityConnection" /> закрыто. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityCommand.ToTraceString">
      <summary>Компилирует команду уровня сущности и возвращает текст команды хранилища.</summary>
      <returns>Строка, представляющая текст команды хранилища.ПримечаниеЭтот метод предназначен только для диагностики.Ваш код не должен зависеть от строки трассировки, возвращаемой этим методом, поскольку формат этой строки может измениться в будущих версиях.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.Transaction">
      <summary>Получает или задает объект <see cref="T:System.Data.EntityClient.EntityTransaction" />, в рамках которого выполняется <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
      <returns>Объект <see cref="T:System.Data.EntityClient.EntityTransaction" />.Значение по умолчанию — null.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityCommand.UpdatedRowSource">
      <summary>Получает или задает значение, которое показывает, как результаты команды применяются к строкам.</summary>
      <returns>Одно из значений <see cref="T:System.Data.UpdateRowSource" />.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityConnection">
      <summary>Содержит ссылку на концептуальную модель и подключение к источнику данных.Данный класс не может наследоваться.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnection" /> с заданными объектами <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> и <see cref="T:System.Data.Common.DbConnection" />.</summary>
      <param name="workspace">Рабочая область <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, которую необходимо связать с подключением <see cref="T:System.Data.EntityClient.EntityConnection" />.</param>
      <param name="connection">Подключение к базовому источнику данных для этого объекта <see cref="T:System.Data.EntityClient.EntityConnection" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="workspace" /> или <paramref name="connection" /> является null.</exception>
      <exception cref="T:System.ArgumentException">В рабочей области отсутствует концептуальная модель.–либо–В рабочей области отсутствует файл сопоставлений.–либо–В рабочей области отсутствует модель хранения.–либо–<paramref name="connection" /> не в закрытом состоянии.</exception>
      <exception cref="T:System.Data.ProviderIncompatibleException">
        <paramref name="connection" /> не от поставщика совместимой ADO.NET Entity Framework.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnection" /> на основании строки подключения.</summary>
      <param name="connectionString">Строка подключения, соответствующая конкретному поставщику.</param>
      <exception cref="T:System.ArgumentException">В строке подключения предоставлено недопустимое ключевое слово или не предоставлено обязательное.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.BeginTransaction">
      <summary>Начинает транзакцию посредством базового поставщика. </summary>
      <returns>Новый объект <see cref="T:System.Data.EntityClient.EntityTransaction" />.Для выполнения команды в рамках данной транзакции возвращенный экземпляр <see cref="T:System.Data.EntityClient.EntityTransaction" /> можно будет связать с объектом <see cref="T:System.Data.EntityClient.EntityCommand" />.</returns>
      <exception cref="T:System.InvalidOperationException">Базовый поставщик неизвестен.–либо–Вызов <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> был произведен с <see cref="T:System.Data.EntityClient.EntityConnection" />, уже имеющего текущую транзакцию.–либо–Состояние <see cref="T:System.Data.EntityClient.EntityConnection" /> не равно <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>Начинает транзакцию на указанном уровне изоляции посредством базового поставщика. </summary>
      <returns>Новый объект <see cref="T:System.Data.EntityClient.EntityTransaction" />.Для выполнения команды в рамках данной транзакции возвращенный экземпляр <see cref="T:System.Data.EntityClient.EntityTransaction" /> можно будет связать с объектом <see cref="T:System.Data.EntityClient.EntityCommand" />.</returns>
      <param name="isolationLevel">Уровень изоляции транзакции.</param>
      <exception cref="T:System.InvalidOperationException">Базовый поставщик неизвестен.–либо–Вызов <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> был произведен с <see cref="T:System.Data.EntityClient.EntityConnection" />, уже имеющего текущую транзакцию.–либо–Состояние <see cref="T:System.Data.EntityClient.EntityConnection" /> не равно <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)">
      <summary>Не поддерживается.</summary>
      <param name="databaseName">Не поддерживается. </param>
      <exception cref="T:System.NotSupportedException">При вызове метода. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.Close">
      <summary>Закрывает подключение к базе данных.</summary>
      <exception cref="T:System.InvalidOperationException">При закрытии подключения произошла ошибка.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ConnectionString">
      <summary>Возвращает или задает строку подключения <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <returns>Строка подключения, необходимая для установления начального подключения к источнику данных.Значение по умолчанию — пустая строка.При закрытом подключении возвращается текущее заданное значение.Если значение не было задано, возвращается пустая строка.</returns>
      <exception cref="T:System.InvalidOperationException">Предпринята попытка установить свойство <see cref="P:System.Data.EntityClient.EntityConnection.ConnectionString" /> после инициализации <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> из <see cref="EntityConnection" />.<see cref="MetadataWorkspace" /> инициализируется при создании экземпляра <see cref="EntityConnection" /> через перегрузку, принимающую как параметр <see cref="MetadataWorkspace" /> или при открытии экземпляра <see cref="T:System.Data.EntityClient.EntityConnection" />.</exception>
      <exception cref="T:System.ArgumentException">В строке подключения предоставлено недопустимое ключевое слово или не предоставлено обязательное.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ConnectionTimeout">
      <summary>Получает время ожидания (в секундах) при попытке установления подключения, по истечении которого попытка подключения завершается и создается ошибка.</summary>
      <returns>Время ожидания открытия подключения (в секундах).Значение по умолчанию равно времени ожидания по умолчанию для базового поставщика данных.</returns>
      <exception cref="T:System.ArgumentException">Заданное значение свойства меньше 0. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.CreateCommand">
      <summary>Создает новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityCommand" /> с помощью свойства <see cref="P:System.Data.EntityClient.EntityCommand.Connection" /> со значением данного <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <returns>Объект <see cref="T:System.Data.EntityClient.EntityCommand" />.</returns>
      <exception cref="T:System.InvalidOperationException">Имя базового поставщика данных неизвестно.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.Database">
      <summary>Получает имя текущей базы данных или той базы данных, которая будет использоваться после открытия подключения.</summary>
      <returns>Значение свойства базового поставщика данных Database.</returns>
      <exception cref="T:System.InvalidOperationException">Базовый поставщик данных неизвестен. </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.DataSource">
      <summary>Получает имя или сетевой адрес источника данных, к которому выполняется подключение.</summary>
      <returns>Имя источника данных.Значение по умолчанию — пустая строка.</returns>
      <exception cref="T:System.InvalidOperationException">Базовый поставщик данных неизвестен. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>Прикрепляет данный объект <see cref="T:System.Data.EntityClient.EntityConnection" /> в указанной транзакции.</summary>
      <param name="transaction">Прикрепляемый объект транзакции.</param>
      <exception cref="T:System.InvalidOperationException">Состояние <see cref="T:System.Data.EntityClient.EntityConnection" /> не равно <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace">
      <summary>Возвращает коллекцию <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, связанную с этим объектом <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <returns>Рабочая область <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, сопоставляемая подключению <see cref="T:System.Data.EntityClient.EntityConnection" />.</returns>
      <exception cref="T:System.Data.MetadataException">Встроенная строка подключения содержит недопустимое значение ключевого слова Metadata.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnection.Open">
      <summary>Устанавливает подключение к источнику данных посредством вызова метода базового поставщика данных Open.</summary>
      <exception cref="T:System.InvalidOperationException">При открытии подключения или неизвестном имени базового поставщика данных происходит ошибка.</exception>
      <exception cref="T:System.Data.MetadataException">Встроенная строка подключения содержит недопустимое значение ключевого слова Metadata.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.ServerVersion">
      <summary>Получает строку, содержащую версию источника данных, к которому подключается клиент.</summary>
      <returns>Версия источника данных, содержащаяся в строке подключения поставщика.</returns>
      <exception cref="T:System.InvalidOperationException">Подключение закрыто. </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.State">
      <summary>Получает свойство <see cref="T:System.Data.ConnectionState" /> базового поставщика, если подключение <see cref="T:System.Data.EntityClient.EntityConnection" /> открыто.В противном случае возвращает значение <see cref="F:System.Data.ConnectionState.Closed" />.</summary>
      <returns>
        <see cref="F:System.Data.ConnectionState.Open" />, только в том случае, если внутреннее состояние <see cref="T:System.Data.EntityClient.EntityConnection" /> и <see cref="T:System.Data.ConnectionState" /> базового поставщика открыты.Если объект <see cref="T:System.Data.EntityClient.EntityConnection" /> находится в открытом состоянии, но состояние подключения поставщика <see cref="T:System.Data.ConnectionState" /> является закрытым, данное свойство возвращает значение <see cref="F:System.Data.ConnectionState.Broken" />.В противном случае оно возвращает значение <see cref="F:System.Data.ConnectionState.Closed" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnection.StoreConnection">
      <summary>Предоставляет доступ к подключению к базовому источнику данных, которое используется объектом <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DbConnection" /> для подключения к источнику данных.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityConnectionStringBuilder">
      <summary>Обеспечивает простой способ создания и управления содержимым строк подключения, которые использует EntityClient. </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />, используя заданную строку подключения. </summary>
      <param name="connectionString">Строка подключения для конкретного поставщика к базовому источнику данных.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.Clear">
      <summary>Удаляет содержимое экземпляра класса <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.ContainsKey(System.String)">
      <summary>Определяет, содержит ли объект <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> указанный ключ.</summary>
      <returns>Возвращает true, если в <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> содержится элемент с указанным ключом; в противном случае — значение false.</returns>
      <param name="keyword">Ключ, который требуется найти в объекте <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.IsFixedSize">
      <summary>Получает значение, показывающее, имеет ли объект <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> фиксированный размер.</summary>
      <returns>Возвращает true в любом случае, так как <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" /> предоставляет коллекцию пар "ключевое слово-значение" фиксированного размера.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Item(System.String)">
      <summary>Возвращает или задает значение, связанное с указанным ключом.В C# этим свойством является индексатор.</summary>
      <returns>Значение, связанное с указанным ключом. </returns>
      <param name="keyword">Ключ элемента, который требуется получить или задать.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> — пустая ссылка (Nothing в Visual Basic).</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Осуществлена попытка добавить несуществующий ключ.</exception>
      <exception cref="T:System.FormatException">Недопустимое значение в строке подключения (особенно, когда логическое значение или числовое значение ожидалось, но так и не было предоставлено).</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Keys">
      <summary>Получает <see cref="T:System.Collections.ICollection" />, который содержит ключи в <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />, который содержит ключи в <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Metadata">
      <summary>Возвращает или задает расположения метаданных в строке подключения.</summary>
      <returns>Возвращает или задает расположения метаданных в строке подключения.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Name">
      <summary>Возвращает или задает имя раздела, определенное в файле конфигурации.</summary>
      <returns>Имя раздела в файле конфигурации.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.Provider">
      <summary>Возвращает или задает имя базового поставщика данных .NET Framework в строке подключения.</summary>
      <returns>Инвариантное имя базового поставщика данных .NET Framework.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityConnectionStringBuilder.ProviderConnectionString">
      <summary>Возвращает или задает внутреннюю строку подключения к конкретному поставщику.</summary>
      <returns>Внутренняя строка подключения к конкретному поставщику.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.Remove(System.String)">
      <summary>Удаляет запись с указанным ключом из экземпляра класса <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />. </summary>
      <returns>Возвращает true, если ключ существовал в строке подключения и был удален; false, если ключ не существовал.</returns>
      <param name="keyword">Ключ пары "ключевое слово-значение", удаляемой из строки подключения в этом объекте <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> имеет значение null (Nothing в Visual Basic)</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>Получает значение, соответствующее предоставляемому ключу из этого объекта <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>Возвращает true, если ключевое слово <paramref name="keyword" /> найдено в строке подключения, в противном случае — false.</returns>
      <param name="keyword">Ключ извлекаемого элемента.</param>
      <param name="value">Значение, соответствующее <paramref name="keyword." />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> содержит значение null (Nothing в Visual Basic).</exception>
    </member>
    <member name="T:System.Data.EntityClient.EntityDataReader">
      <summary>Считывает поток строк последовательного доступа из источника данных. </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Close">
      <summary>Закрывает объект <see cref="T:System.Data.EntityClient.EntityDataReader" />.</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.DataRecordInfo">
      <summary>Получает объект <see cref="T:System.Data.Common.DataRecordInfo" /> для данного объекта <see cref="T:System.Data.IExtendedDataRecord" />.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DataRecordInfo" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Depth">
      <summary>Получает значение, указывающее глубину вложенности для текущей строки. </summary>
      <returns>Уровень вложенности для текущей строки. </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Dispose(System.Boolean)">
      <summary>Освобождает ресурсы, используемые этим объектом <see cref="T:System.Data.EntityClient.EntityDataReader" />, и вызывает метод <see cref="M:System.Data.EntityClient.EntityDataReader.Close" />.</summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые); значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.FieldCount">
      <summary>Получает количество столбцов в текущей строке. </summary>
      <returns>Количество столбцов в текущей строке.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetBoolean(System.Int32)">
      <summary>Получает значение указанного столбца в виде логического значения.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца, начиная с нуля.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetByte(System.Int32)">
      <summary>Получает значение заданного столбца в виде байта.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер (с нуля) столбца.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Считывает поток байтов из указанного столбца, начиная с местоположения, указанного параметром <paramref name="dataIndex" />, в буфер, начиная с местоположения, указанного параметром <paramref name="bufferIndex" />.</summary>
      <returns>Фактическое количество считанных байтов.</returns>
      <param name="ordinal">Порядковый номер (с нуля) столбца.</param>
      <param name="dataOffset">Индекс в строке, с которого начинается операция считывания.</param>
      <param name="buffer">Буфер, в который копируются данные.</param>
      <param name="bufferOffset">Индекс для буфера, в который будут копироваться данные.</param>
      <param name="length">Наибольшее число символов для чтения.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetChar(System.Int32)">
      <summary>Получает значение заданного столбца в виде одного символа.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер (с нуля) столбца.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Считывает поток символов из указанного столбца, начиная с местоположения, указанного параметром <paramref name="dataIndex" />, в буфер, начиная с местоположения, указанного параметром <paramref name="bufferIndex" />.</summary>
      <returns>Фактическое количество считанных символов.</returns>
      <param name="ordinal">Порядковый номер (с нуля) столбца.</param>
      <param name="dataOffset">Индекс в строке, с которого начинается операция считывания.</param>
      <param name="buffer">Буфер, в который копируются данные.</param>
      <param name="bufferOffset">Индекс для буфера, в который будут копироваться данные.</param>
      <param name="length">Наибольшее число символов для чтения.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataReader(System.Int32)">
      <summary>Возвращает вложенные объекты чтения в виде объектов <see cref="T:System.Data.Common.DbDataReader" />.</summary>
      <returns>Вложенные объекты чтения в виде объектов <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">Порядковый номер столбца.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataRecord(System.Int32)">
      <summary>Возвращает вложенную запись <see cref="T:System.Data.Common.DbDataRecord" />.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DbDataRecord" />.</returns>
      <param name="i">Число возвращаемых записей DbDataRecord.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDataTypeName(System.Int32)">
      <summary>Получает имя типа данных указанного столбца.</summary>
      <returns>Строка, представляющая имя типа данных.</returns>
      <param name="ordinal">Порядковый номер столбца, начиная с нуля.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDateTime(System.Int32)">
      <summary>Получает значение указанного столбца в виде объекта <see cref="T:System.DateTime" />.</summary>
      <returns>Порядковый номер столбца, начиная с нуля.</returns>
      <param name="ordinal">Порядковый номер столбца, начиная с нуля.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDbDataReader(System.Int32)">
      <summary>Возвращает объект <see cref="T:System.Data.Common.DbDataReader" /> для запрошенного порядкового номера столбца, который может быть переопределен с помощью зависящей от поставщика реализации.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="ordinal">Порядковый номер столбца, начиная с нуля.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDecimal(System.Int32)">
      <summary>Получает значение указанного столбца в виде объекта <see cref="T:System.Decimal" />.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца, начиная с нуля.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetDouble(System.Int32)">
      <summary>Получает значение заданного столбца в виде числа двойной точности с плавающей запятой.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца, начиная с нуля.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.IEnumerator" />, который можно использовать для перебора строк в объекте для чтения данных.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, позволяющий выполнять перебор строк в объекте для чтения данных.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetFieldType(System.Int32)">
      <summary>Получает тип данных указанного столбца.</summary>
      <returns>Тип данных указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца, начиная с нуля.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetFloat(System.Int32)">
      <summary>Получает значение указанного столбца в виде числа одиночной точности с плавающей запятой.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер (с нуля) столбца.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetGuid(System.Int32)">
      <summary>Возвращает значение заданного столбца в виде глобального уникального идентификатора (GUID).</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер (с нуля) столбца.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt16(System.Int32)">
      <summary>Получает значение заданного столбца в виде 16-битового целого числа со знаком.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер (с нуля) столбца.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt32(System.Int32)">
      <summary>Получает значение заданного столбца в виде 32-битового целого числа со знаком.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер (с нуля) столбца.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetInt64(System.Int32)">
      <summary>Получает значение заданного столбца в виде 64-битового целого числа со знаком.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер (с нуля) столбца.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetName(System.Int32)">
      <summary>Получает имя столбца при наличии заданного порядкового номера (с нуля) столбца.</summary>
      <returns>Имя указанного столбца.</returns>
      <param name="ordinal">Порядковый номер (с нуля) столбца.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetOrdinal(System.String)">
      <summary>Получает порядковый номер столбца при наличии заданного имени столбца.</summary>
      <returns>Порядковый номер столбца, начиная с нуля.</returns>
      <param name="name">Имя столбца.</param>
      <exception cref="T:System.IndexOutOfRangeException">Указано недопустимое имя столбца.</exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>Возвращает зависящий от поставщика тип поля заданного столбца.</summary>
      <returns>Объект <see cref="T:System.Type" />, описывающий тип данных указанного столбца.</returns>
      <param name="ordinal">Порядковый номер (с нуля) столбца.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>Получает значение заданного столбца в виде экземпляра класса <see cref="T:System.Object" />.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца, начиная с нуля.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>Получает зависящие от поставщика столбцы атрибутов в коллекции для текущей строки.</summary>
      <returns>Количество экземпляров объекта <see cref="T:System.Object" /> в массиве.</returns>
      <param name="values">Массив объектов <see cref="T:System.Object" />, в который копируются столбцы атрибутов.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetSchemaTable">
      <summary>Возвращает объект <see cref="T:System.Data.DataTable" />, описывающий метаданные столбца объекта <see cref="T:System.Data.Common.DbDataReader" />.</summary>
      <returns>Объект <see cref="T:System.Data.DataTable" /> описывает метаданные столбца.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetString(System.Int32)">
      <summary>Получает значение заданного столбца в виде экземпляра класса <see cref="T:System.String" />.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер (с нуля) столбца.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetValue(System.Int32)">
      <summary>Получает значение заданного столбца в виде экземпляра класса <see cref="T:System.Object" />.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца, начиная с нуля.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.GetValues(System.Object[])">
      <summary>Заполняет массив объектов значениями столбцов текущей строки.</summary>
      <returns>Количество экземпляров объекта <see cref="T:System.Object" /> в массиве.</returns>
      <param name="values">Массив объектов <see cref="T:System.Object" />, в который копируются столбцы атрибутов.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.HasRows">
      <summary>Получает значение, указывающее, содержит ли этот объект <see cref="T:System.Data.EntityClient.EntityDataReader" /> одну или несколько строк. </summary>
      <returns>Значение true, если объект <see cref="T:System.Data.EntityClient.EntityDataReader" /> содержит одну или несколько строк; в противном случае — значение false. </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.IsClosed">
      <summary>Получает значение, указывается, является ли объект <see cref="T:System.Data.EntityClient.EntityDataReader" /> закрытым.</summary>
      <returns>Значение true, если объект <see cref="T:System.Data.EntityClient.EntityDataReader" /> закрыт; в противном случае — значение false. </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.IsDBNull(System.Int32)">
      <summary>Получает значение, указывающее, содержит ли столбец несуществующие или пропущенные значения.</summary>
      <returns>Значение true, если указанный столбец эквивалентен <see cref="T:System.DBNull" />; в противном случае — значение false.</returns>
      <param name="ordinal">Порядковый номер столбца, начиная с нуля.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Item(System.Int32)">
      <summary>Получает значение указанного столбца в виде экземпляра <see cref="T:System.Object" />.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер (с нуля) столбца.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.Item(System.String)">
      <summary>Получает значение указанного столбца в виде экземпляра <see cref="T:System.Object" />.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="name">Имя столбца.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.NextResult">
      <summary>Перемещает считыватель к следующему результату при считывании результатов выполнения пакетных операторов.</summary>
      <returns>Значение true, если имеются и другие наборы результатов; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityDataReader.Read">
      <summary>Перемещает считыватель на следующую запись в наборе результатов.</summary>
      <returns>Значение true, если имеется больше строк; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.RecordsAffected">
      <summary>Получает количество строк, которые были изменены, вставлены или удалены при выполнении инструкции SQL. </summary>
      <returns>Количество измененных, вставленных или удаленных строк.Возвращает значение -1 для инструкций SELECT и значение 0, если строки не были затронуты или инструкция завершилась с ошибкой.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityDataReader.VisibleFieldCount">
      <summary>Получает количество нескрытых полей объекта <see cref="T:System.Data.EntityClient.EntityDataReader" />.</summary>
      <returns>Количество нескрытых полей.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityParameter">
      <summary>Представляет параметр для <see cref="T:System.Data.EntityClient.EntityCommand" />.Этот класс невозможно наследовать.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityParameter" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityParameter" />, использующий имя параметра и тип данных.</summary>
      <param name="parameterName">Имя сопоставляемого параметра. </param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />. </param>
      <exception cref="T:System.ArgumentException">Тип значения, указанного в параметре <paramref name="dbType" />, не является допустимым серверным типом данных. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityParameter" />, использующий имя параметра, тип данных и размер.</summary>
      <param name="parameterName">Имя сопоставляемого параметра. </param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />. </param>
      <param name="size">Длина параметра. </param>
      <exception cref="T:System.ArgumentException">Тип значения, указанного в параметре <paramref name="dbType" />, не является допустимым серверным типом данных. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityParameter" />, используя имя параметра, тип, размер, направление, точность, масштаб, исходный столбец, используемое значение <see cref="T:System.Data.DataRowVersion" />, а также значение параметра.</summary>
      <param name="parameterName">Имя сопоставляемого параметра. </param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />. </param>
      <param name="size">Длина параметра. </param>
      <param name="direction">Одно из значений <see cref="T:System.Data.ParameterDirection" />. </param>
      <param name="isNullable">true, если поле может содержать значение NULL; в противном случае — false. </param>
      <param name="precision">Общее количество цифр слева и справа от десятичной пиксели для разрешения значения <see cref="P:System.Data.EntityClient.EntityParameter.Value" />. </param>
      <param name="scale">Общее число десятичных разрядов для разрешения значения <see cref="P:System.Data.EntityClient.EntityParameter.Value" />. </param>
      <param name="sourceColumn">Имя столбца источника. </param>
      <param name="sourceVersion">Одно из значений <see cref="T:System.Data.DataRowVersion" />. </param>
      <param name="value">
        <see cref="T:System.Object" />, который является значением <see cref="T:System.Data.EntityClient.EntityParameter" />. </param>
      <exception cref="T:System.ArgumentException">Тип значения, указанного в параметре <paramref name="dbType" />, не является допустимым серверным типом данных. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityParameter" />, используя имя параметра, тип данных, размер и имя исходного столбца.</summary>
      <param name="parameterName">Имя сопоставляемого параметра. </param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />. </param>
      <param name="size">Длина параметра. </param>
      <param name="sourceColumn">Имя столбца источника. </param>
      <exception cref="T:System.ArgumentException">Тип значения, указанного в параметре <paramref name="dbType" />, не является допустимым серверным типом данных. </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.DbType">
      <summary>Возвращает или задает значение <see cref="T:System.Data.DbType" /> параметра.</summary>
      <returns>Одно из значений <see cref="T:System.Data.DbType" />.Значением по умолчанию является String.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Direction">
      <summary>Возвращает или задает значение, определяющее, предназначен ли параметр только для ввода, только для вывода, является ли он двунаправленным или возвращается хранимой процедурой.</summary>
      <returns>Одно из значений перечисления <see cref="T:System.Data.ParameterDirection" />.Значение по умолчанию — Input.</returns>
      <exception cref="T:System.ArgumentException">Для свойства не было установлено одно из допустимых значений <see cref="T:System.Data.ParameterDirection" />.</exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.IsNullable">
      <summary>Возвращает или задает значение, показывающее, может ли параметр принимать значение NULL.</summary>
      <returns>true, если значение NULL допустимо; в противном случае — false.Значением по умолчанию является false.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.ParameterName">
      <summary>Возвращает или задает имя <see cref="T:System.Data.EntityClient.EntityParameter" />.</summary>
      <returns>Имя <see cref="T:System.Data.EntityClient.EntityParameter" />.Значение по умолчанию — пустая строка.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Precision">
      <summary>Возвращает или задает наибольшее количество знаков, которые можно использовать для представления свойства <see cref="P:System.Data.EntityClient.EntityParameter.Value" />.</summary>
      <returns>Максимальное количество знаков, которые можно использовать для представления свойства <see cref="P:System.Data.EntityClient.EntityParameter.Value" />.Значение по умолчанию — 0.Это значит, что точность <see cref="P:System.Data.EntityClient.EntityParameter.Value" /> задается поставщиком данных.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.ResetDbType">
      <summary>Сбрасывает тип, связанный с этим классом <see cref="T:System.Data.EntityClient.EntityParameter" />.</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Scale">
      <summary>Возвращает или задает количество десятичных разрядов для <see cref="P:System.Data.EntityClient.EntityParameter.Value" />.</summary>
      <returns>Количество десятичных разрядов для <see cref="P:System.Data.EntityClient.EntityParameter.Value" />.Значением по умолчанию является 0.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Size">
      <summary>Возвращает или задает наибольший размер данных в столбце (в байтах).</summary>
      <returns>Наибольший размер данных в столбце (в байтах).Значение по умолчанию определяется по значению параметра.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceColumn">
      <summary>Возвращает или задает имя исходного столбца в кэшированной строке, с которым сопоставлен <see cref="T:System.Data.EntityClient.EntityParameter" />.</summary>
      <returns>Имя исходного столбца в кэшированной строке.Значение по умолчанию — пустая строка.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceColumnNullMapping">
      <summary>Возвращает или задает значение, показывающее, может ли исходный столбец содержать значение null. </summary>
      <returns>true, если исходный столбец может содержать значение NULL; в противном случае — false.Значением по умолчанию является false.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.SourceVersion">
      <summary>Возвращает или задает <see cref="T:System.Data.DataRowVersion" />, которую необходимо использовать при загрузке <see cref="P:System.Data.EntityClient.EntityParameter.Value" />.</summary>
      <returns>Одно из значений <see cref="T:System.Data.DataRowVersion" />.Значением по умолчанию является Current.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameter.ToString">
      <summary>Получает строку, которая содержит <see cref="P:System.Data.EntityClient.EntityParameter.ParameterName" />.</summary>
      <returns>Строка, которая содержит <see cref="P:System.Data.EntityClient.EntityParameter.ParameterName" />.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameter.Value">
      <summary>Возвращает или задает значение параметра.</summary>
      <returns>
        <see cref="T:System.Object" />, являющийся значением параметра.Значением по умолчанию является NULL.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityParameterCollection">
      <summary>Представляет коллекцию параметров, связанных с объектом <see cref="T:System.Data.EntityClient.EntityCommand" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.Data.EntityClient.EntityParameter)">
      <summary>Добавляет заданный объект <see cref="T:System.Data.EntityClient.EntityParameter" /> в коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Новый объект <see cref="T:System.Data.EntityClient.EntityParameter" />.</returns>
      <param name="value">Объект <see cref="T:System.Data.EntityClient.EntityParameter" />, который необходимо добавить в коллекцию.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.EntityClient.EntityParameter" />, заданный в параметре <paramref name="value" />, уже добавлен в эту или другую коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" />. </exception>
      <exception cref="T:System.InvalidCastException">Переданный параметр не является <see cref="T:System.Data.EntityClient.EntityParameter" />. </exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="value" /> имеет значение null. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.Object)">
      <summary>Добавляет заданный объект в <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Индекс нового объекта <see cref="T:System.Data.EntityClient.EntityParameter" />.</returns>
      <param name="value">Объект <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType)">
      <summary>Добавляет <see cref="T:System.Data.EntityClient.EntityParameter" /> в <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> на основе заданного имени параметра и типа данных.</summary>
      <returns>Новый объект <see cref="T:System.Data.EntityClient.EntityParameter" />.</returns>
      <param name="parameterName">Имя параметра. </param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />. </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
      <summary>Добавляет <see cref="T:System.Data.EntityClient.EntityParameter" /> в <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> на основе заданного имени параметра, типа данных и длины столбца.</summary>
      <returns>Новый объект <see cref="T:System.Data.EntityClient.EntityParameter" />.</returns>
      <param name="parameterName">Имя параметра.</param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Длина столбца.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddRange(System.Array)">
      <summary>Добавляет массив значений в конец коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <param name="values">Значения <see cref="T:System.Array" />, которые необходимо добавить.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddRange(System.Data.EntityClient.EntityParameter[])">
      <summary>Добавляет массив значений <see cref="T:System.Data.EntityClient.EntityParameter" /> в конец <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <param name="values">Значения <see cref="T:System.Data.EntityClient.EntityParameter" />, которые необходимо добавить.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>Добавляет значение в конец коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Объект <see cref="T:System.Data.EntityClient.EntityParameter" />.</returns>
      <param name="parameterName">Имя параметра.</param>
      <param name="value">Значение, которое необходимо добавить.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Clear">
      <summary>Удаляет все объекты <see cref="T:System.Data.EntityClient.EntityParameter" /> из коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Contains(System.Object)">
      <summary>Определяет, входит ли указанный объект <see cref="T:System.Object" /> в данную коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>true, если коллекция <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> содержит значение; в противном случае — false.</returns>
      <param name="value">Значение <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Contains(System.String)">
      <summary>Определяет, входит ли указанный объект <see cref="T:System.Data.EntityClient.EntityParameter" /> в данную коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>true, если коллекция <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> содержит значение; в противном случае — false.</returns>
      <param name="parameterName">Значение <see cref="T:System.Data.EntityClient.EntityParameter" />.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>Копирует все элементы текущей коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> в заданный одномерный массив <see cref="T:System.Array" /> начиная с указанного индекса целевого массива <see cref="T:System.Array" />.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" />, который является массивом назначения для элементов, копируемых из текущего массива <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</param>
      <param name="index">32-разрядное целое число, представляющее в массиве <see cref="T:System.Array" /> индекс, с которого начинается копирование.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.CopyTo(System.Data.EntityClient.EntityParameter[],System.Int32)">
      <summary>Копирует все элементы текущей коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> в заданную коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> начиная с указанного индекса в целевой коллекции.</summary>
      <param name="array">
        <see cref="T:System.Data.EntityClient.EntityParameterCollection" />, куда копируются элементы из текущей <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</param>
      <param name="index">32-разрядное целое число, представляющее в коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> индекс, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Count">
      <summary>Получает целое число, которое содержит количество элементов в <see cref="T:System.Data.EntityClient.EntityParameterCollection" />. </summary>
      <returns>Количество элементов в <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> в виде целого числа.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий итерацию по элементам коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />. </summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" /> для коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />. </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.Data.EntityClient.EntityParameter)">
      <summary>Получает местоположение указанного объекта <see cref="T:System.Data.EntityClient.EntityParameter" /> в коллекции.</summary>
      <returns>Местоположение (с нуля) указанного объекта <see cref="T:System.Data.EntityClient.EntityParameter" />, который является объектом <see cref="T:System.Data.EntityClient.EntityParameter" /> в коллекции.Возвращает значение -1, если объект отсутствует в коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</returns>
      <param name="value">Искомый объект <see cref="T:System.Data.EntityClient.EntityParameter" />. </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.Object)">
      <summary>Получает местоположение указанного объекта <see cref="T:System.Object" /> в коллекции.</summary>
      <returns>Местоположение (с нуля) указанного объекта <see cref="T:System.Object" />, который является объектом <see cref="T:System.Data.EntityClient.EntityParameter" /> в коллекции.Возвращает -1, когда объект отсутствует в <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</returns>
      <param name="value">Искомый объект <see cref="T:System.Object" />. </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.IndexOf(System.String)">
      <summary>Возвращает местоположение заданного объекта <see cref="T:System.Data.EntityClient.EntityParameter" /> с заданным именем.</summary>
      <returns>Местоположение (с нуля) заданного объекта <see cref="T:System.Data.EntityClient.EntityParameter" /> с указанным именем с учетом регистра.Возвращает значение -1, если объект отсутствует в коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</returns>
      <param name="parameterName">Имя <see cref="T:System.Data.EntityClient.EntityParameter" />, которое необходимо найти с учетом регистра.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Data.EntityClient.EntityParameter)">
      <summary>Вставляет объект <see cref="T:System.Data.EntityClient.EntityParameter" /> в коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> по указанному индексу.</summary>
      <param name="index">Отсчитываемый с нуля индекс, по которому должно быть вставлено значение.</param>
      <param name="value">Объект <see cref="T:System.Data.EntityClient.EntityParameter" />, который необходимо вставить в <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Object)">
      <summary>Вставляет <see cref="T:System.Object" /> в <see cref="T:System.Data.EntityClient.EntityParameterCollection" />по указанному индексу.</summary>
      <param name="index">Отсчитываемый с нуля индекс, по которому должно быть вставлено значение.</param>
      <param name="value">Объект <see cref="T:System.Object" />, который необходимо вставить в коллекцию <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</param>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsFixedSize">
      <summary>Получает значение, показывающее, имеет ли объект <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> фиксированный размер. </summary>
      <returns>Возвращает значение true, если коллекция <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> имеет фиксированный размер, в противном случае — значение false. </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsReadOnly">
      <summary>Получает значение, указывающее, доступен ли объект <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> только для чтения. </summary>
      <returns>Возвращает значение true, если <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> доступен только для чтения; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.IsSynchronized">
      <summary>Получает значение, указывающее, синхронизирован ли объект <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Возвращает значение true, если объект <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> синхронизирован; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Item(System.Int32)">
      <summary>Получает объект <see cref="T:System.Data.EntityClient.EntityParameter" /> по указанному индексу.</summary>
      <returns>Объект <see cref="T:System.Data.EntityClient.EntityParameter" /> по указанному индексу.</returns>
      <param name="index">Индекс (начиная с нуля) извлекаемого параметра. </param>
      <exception cref="T:System.IndexOutOfRangeException">Указанный индекс не существует. </exception>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.Item(System.String)">
      <summary>Получает объект <see cref="T:System.Data.EntityClient.EntityParameter" /> с указанным именем.</summary>
      <returns>Объект <see cref="T:System.Data.EntityClient.EntityParameter" /> с заданным именем.</returns>
      <param name="parameterName">Имя извлекаемого параметра. </param>
      <exception cref="T:System.IndexOutOfRangeException">Указанного имени не существует. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Remove(System.Data.EntityClient.EntityParameter)">
      <summary>Удаляет заданный объект <see cref="T:System.Data.EntityClient.EntityParameter" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.Data.EntityClient.EntityParameter" />, который необходимо удалить из коллекции. </param>
      <exception cref="T:System.InvalidCastException">Параметр не является объектом <see cref="T:System.Data.EntityClient.EntityParameter" />. </exception>
      <exception cref="T:System.SystemException">Параметр не существует в коллекции. </exception>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.Remove(System.Object)">
      <summary>Удаляет указанный параметр из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, который необходимо удалить из коллекции. </param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.RemoveAt(System.Int32)">
      <summary>Удаляет объект <see cref="T:System.Data.EntityClient.EntityParameter" /> из коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> по указанному индексу.</summary>
      <param name="index">Индекс (с нуля) удаляемого объекта <see cref="T:System.Data.EntityClient.EntityParameter" />.</param>
    </member>
    <member name="M:System.Data.EntityClient.EntityParameterCollection.RemoveAt(System.String)">
      <summary>Удаляет объект <see cref="T:System.Data.EntityClient.EntityParameter" /> из коллекции <see cref="T:System.Data.EntityClient.EntityParameterCollection" /> по заданному имени параметра.</summary>
      <param name="parameterName">Имя удаляемого объекта <see cref="T:System.Data.EntityClient.EntityParameter" />. </param>
    </member>
    <member name="P:System.Data.EntityClient.EntityParameterCollection.SyncRoot">
      <summary>Получает объект, который можно использовать для синхронизации доступа к <see cref="T:System.Data.EntityClient.EntityParameterCollection" />. </summary>
      <returns>Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Data.EntityClient.EntityParameterCollection" />.</returns>
    </member>
    <member name="T:System.Data.EntityClient.EntityProviderFactory">
      <summary>Представляет набор методов для создания экземпляров классов поставщиков, реализующих источник данных. </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateCommand">
      <summary>Возвращает новый экземпляра класса поставщика, реализующий класс <see cref="T:System.Data.EntityClient.EntityCommand" />. </summary>
      <returns>Новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityCommand" />. </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateCommandBuilder">
      <summary>Создает исключение <see cref="T:System.NotSupportedException" />.В настоящее время этот метод не поддерживается.</summary>
      <returns>В настоящее время этот метод не поддерживается.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateConnection">
      <summary>Возвращает новый экземпляра класса поставщика, реализующий класс <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <returns>Новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnection" />. </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateConnectionStringBuilder">
      <summary>Возвращает новый экземпляра класса поставщика, реализующий класс <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>Новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityConnectionStringBuilder" />. </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateDataAdapter">
      <summary>Метод <see cref="M:System.Data.EntityClient.EntityProviderFactory.CreateDataAdapter" /> не поддерживается в этой версии .NET Framework.</summary>
      <returns>Объект <see cref="T:System.NotSupportedException" />.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreateParameter">
      <summary>Возвращает новый экземпляра класса поставщика, реализующий класс <see cref="T:System.Data.EntityClient.EntityParameter" />.</summary>
      <returns>Новый экземпляр класса <see cref="T:System.Data.EntityClient.EntityParameter" />. </returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>Возвращает новый экземпляра класса поставщика, реализующий версию поставщика класса <see cref="T:System.Security.CodeAccessPermission" />. </summary>
      <returns>Объект <see cref="T:System.Security.CodeAccessPermission" /> для указанного объекта <see cref="T:System.Security.Permissions.PermissionState" />. </returns>
      <param name="state">Одно из значений <see cref="T:System.Security.Permissions.PermissionState" />.</param>
    </member>
    <member name="F:System.Data.EntityClient.EntityProviderFactory.Instance">
      <summary>Данный экземпляр <see cref="T:System.Data.EntityClient.EntityProviderFactory" />. </summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityProviderFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>Возвращает запрошенный класс <see cref="T:System.IServiceProvider" />.</summary>
      <returns>Новый экземпляр класса <see cref="T:System.IServiceProvider" />.Поддерживаемые типы: <see cref="T:System.Data.Common.DbProviderServices" />, <see cref="T:System.Data.Common.DbCommandDefinitionBuilder" /> и <see cref="T:System.Data.IEntityAdapter" />.Возвращает значение null (или Nothing в Visual Basic) для любого другого типа.</returns>
      <param name="serviceType"> Возвращаемый объект <see cref="T:System.Type" />.</param>
    </member>
    <member name="T:System.Data.EntityClient.EntityTransaction">
      <summary>Задает транзакцию для <see cref="P:System.Data.EntityClient.EntityCommand" />.</summary>
    </member>
    <member name="M:System.Data.EntityClient.EntityTransaction.Commit">
      <summary>Фиксирует базовую транзакцию.</summary>
    </member>
    <member name="P:System.Data.EntityClient.EntityTransaction.Connection">
      <summary>Получает объект <see cref="T:System.Data.EntityClient.EntityConnection" /> для данного объекта <see cref="T:System.Data.EntityClient.EntityTransaction" />.</summary>
      <returns>Подключение <see cref="T:System.Data.EntityClient.EntityConnection" /> к базовому источнику данных. </returns>
    </member>
    <member name="P:System.Data.EntityClient.EntityTransaction.IsolationLevel">
      <summary>Получает уровень изоляции этого объекта <see cref="T:System.Data.EntityClient.EntityTransaction" />.</summary>
      <returns>Значение перечисления <see cref="T:System.Data.IsolationLevel" />, представляющее уровень изоляции базовой транзакции.</returns>
    </member>
    <member name="M:System.Data.EntityClient.EntityTransaction.Rollback">
      <summary>Откатывает базовую транзакцию.</summary>
    </member>
    <member name="T:System.Data.Mapping.EntityViewContainer">
      <summary>Базовый класс для типа, созданного во время разработки для хранения генерируемых представлений. </summary>
    </member>
    <member name="M:System.Data.Mapping.EntityViewContainer.#ctor">
      <summary>Инициализирует новый экземпляр класса EntityViewContainer.</summary>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.EdmEntityContainerName">
      <summary>Получает или задает имя объекта <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Имя контейнера.</returns>
    </member>
    <member name="M:System.Data.Mapping.EntityViewContainer.GetViewAt(System.Int32)">
      <summary>Возвращает пару ключ-значение по указанному индексу, которая содержит представление и его ключ.</summary>
      <returns>Пара ключ-значение с индексом <paramref name="index" />, содержащая представление и его ключ.</returns>
      <param name="index">Индекс представления.</param>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.HashOverAllExtentViews">
      <summary>Хэш-значение представлений.</summary>
      <returns>Хэш-значение.</returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.HashOverMappingClosure">
      <summary>Хэш-значение.</summary>
      <returns>Хэш-значение.</returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.StoreEntityContainerName">
      <summary>Получает или задает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> в схеме хранения.</summary>
      <returns>Имя контейнера.</returns>
    </member>
    <member name="P:System.Data.Mapping.EntityViewContainer.ViewCount">
      <summary>Получает или задает число представлений.</summary>
      <returns>Число представлений.</returns>
    </member>
    <member name="T:System.Data.Mapping.EntityViewGenerationAttribute">
      <summary>Атрибут для пометки сборок, содержащих тип сгенерированных представлений.</summary>
    </member>
    <member name="M:System.Data.Mapping.EntityViewGenerationAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Mapping.EntityViewGenerationAttribute" />. </summary>
      <param name="viewGenerationType">Тип представления.</param>
    </member>
    <member name="P:System.Data.Mapping.EntityViewGenerationAttribute.ViewGenerationType">
      <summary>Получает тип T:System.Type для представления.</summary>
      <returns>Тип T:System.Type для представления.</returns>
    </member>
    <member name="T:System.Data.Mapping.MappingItemCollection">
      <summary>Коллекция объектов <see cref="T:System.Data.Metadata.Edm.ItemCollection" />, предназначенная для хранения сведений о сопоставлении. </summary>
    </member>
    <member name="T:System.Data.Mapping.StorageMappingItemCollection">
      <summary>Объект <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> содержит коллекцию сопоставлений хранилищ для объектов <see cref="T:System.Data.Metadata.Edm.EntitySet" /> и <see cref="T:System.Data.Metadata.Edm.AssociationSet" />. </summary>
    </member>
    <member name="M:System.Data.Mapping.StorageMappingItemCollection.#ctor(System.Data.Metadata.Edm.EdmItemCollection,System.Data.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> на основе предоставленных коллекций <see cref="T:System.Data.Metadata.Edm.ItemCollection" />, <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> и <see cref="T:System.String" />, указывающих пути к файлам метаданных.</summary>
      <param name="edmCollection">Коллекция <see cref="T:System.Data.Metadata.Edm.ItemCollection" />, которая должна использоваться этим сопоставлением.</param>
      <param name="storeCollection">Коллекция <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />, которая должна использоваться этим сопоставлением.</param>
      <param name="xmlReaders">Средства чтения XML, которые должны использоваться этим сопоставлением.</param>
    </member>
    <member name="M:System.Data.Mapping.StorageMappingItemCollection.#ctor(System.Data.Metadata.Edm.EdmItemCollection,System.Data.Metadata.Edm.StoreItemCollection,System.String[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> на основе предоставленных коллекций <see cref="T:System.Data.Metadata.Edm.ItemCollection" />, <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> и <see cref="T:System.String" />, указывающих пути к файлам метаданных.</summary>
      <param name="edmCollection">Коллекция <see cref="T:System.Data.Metadata.Edm.ItemCollection" />, которая должна использоваться этим сопоставлением.</param>
      <param name="storeCollection">Коллекция <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />, которая должна использоваться этим сопоставлением.</param>
      <param name="filePaths">Строка <see cref="T:System.String" />, указывающая пути к файлам, которые должны использоваться этим сопоставлением.</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationEndMember">
      <summary>Представляет End ассоциации в концептуальной модели. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationEndMember.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" />. </summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationSet">
      <summary>Представляет набор ассоциаций в концептуальной модели. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.AssociationSetEnds">
      <summary>Получает окончания данного <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая окончания данного <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSet.ElementType">
      <summary>Получает ассоциацию, связанную с данным <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.AssociationType" />, представляющий ассоциацию, связанную с данным <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationSetEnd">
      <summary>Представляет End набора ассоциаций в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.CorrespondingAssociationEndMember">
      <summary>Получает член End, которому соответствует данный объект <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" />, представляющий член End, которому соответствует данный объект <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.EntitySet">
      <summary>Получает набор сущностей, на который ссылается данная роль End. </summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntitySet" />, представляющий набор сущностей, на который ссылается данная роль End.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.Name">
      <summary>Получает имя конечного элемента для данного объекта <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Имя конечного элемента для данного объекта <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.ParentAssociationSet">
      <summary>Получает родительский набор ассоциаций данного <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.AssociationSet" />, представляющий родительский набор ассоциаций данного <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationSetEnd.Role">
      <summary>Получает имя роли End для данного <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Имя роли End для данного <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.AssociationSetEnd.ToString">
      <summary>Возвращает имя роли End для данного <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Имя роли End для данного <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.AssociationType">
      <summary>Представляет ассоциацию в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.AssociationEndMembers">
      <summary>Получает список окончаний для данного объекта <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список окончаний для данного <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.IsForeignKey">
      <summary>Получает логическое значение свойства, указывающее на то, является ли столбец внешним ключом.</summary>
      <returns>Логическое значение, указывающее на то, является ли столбец внешним ключом.Если значение равно true, столбец является внешним ключом.Если значение равно false (по умолчанию), столбец не является внешним ключом.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.AssociationType.ReferentialConstraints">
      <summary>Получает список ограничений для данного <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список ограничений для данного <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.BuiltInTypeKind">
      <summary>Представляет перечисление, содержащее список всех встроенных типов в концептуальной модели. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationEndMember">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.AssociationEndMember" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationSetEnd">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.AssociationSetEnd" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationSet">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.AssociationSet" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.AssociationType">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.AssociationType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntitySetBase">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.EntitySetBase" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityTypeBase">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.CollectionType">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.CollectionType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.CollectionKind">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.CollectionKind" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ComplexType">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.ComplexType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.Documentation">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.Documentation" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.OperationAction">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.OperationAction" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmType">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.EdmType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityContainer">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntitySet">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EntityType">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EnumType">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.EnumType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EnumMember">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.EdmEnumMember" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.Facet">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmFunction">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.FunctionParameter">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.GlobalItem">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.GlobalItem" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.MetadataProperty">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.NavigationProperty">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.NavigationProperty" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.MetadataItem">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.MetadataItem" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmMember">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.EdmMember" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ParameterMode">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.ParameterMode" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.PrimitiveType">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.PrimitiveTypeKind">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.EdmProperty">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ProviderManifest">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.ProviderManifest" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.ReferentialConstraint">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RefType">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.RefType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipEndMember">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipMultiplicity">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipSet">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RelationshipType">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.RelationshipType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.RowType">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.RowType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.SimpleType">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.SimpleType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.StructuralType">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.StructuralType" />.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.BuiltInTypeKind.TypeUsage">
      <summary>Элемент перечисления, указывающий тип <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.CollectionKind">
      <summary>Представляет собой перечисление, задающее вид коллекции, применяемой к свойствам в файлах CSDL.Применяется к свойствам любого типа.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.None">
      <summary>Это свойство не является коллекцией.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.Bag">
      <summary>Эта коллекция обладает семантикой контейнера.Элементы неупорядочены, повторы допускаются.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.CollectionKind.List">
      <summary>Эта коллекция обладает семантикой списка.Порядок элементов детерминирован, повторы допускаются.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.CollectionType">
      <summary>Представляет коллекцию экземпляров заданного типа.В концептуальной модели невозможно явно определить <see cref="T:System.Data.Metadata.Edm.CollectionType" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.CollectionType.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.CollectionType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.CollectionType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.CollectionType.TypeUsage">
      <summary>Получает экземпляр класса <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, содержащий тип элемента, который содержится в текущем объекте <see cref="T:System.Data.Metadata.Edm.CollectionType" />, и аспекты этого типа. </summary>
      <returns>Экземпляр класса <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, содержащий тип элемента, который содержится в текущем объекте <see cref="T:System.Data.Metadata.Edm.CollectionType" />, и аспекты этого типа.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ComplexType">
      <summary>Представляет сложный тип в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ComplexType.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.ComplexType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.ComplexType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ComplexType.Properties">
      <summary>Получает список свойств для данного <see cref="T:System.Data.Metadata.Edm.ComplexType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств для данного <see cref="T:System.Data.Metadata.Edm.ComplexType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ConcurrencyMode">
      <summary>Задает параметры параллелизма для свойств в концептуальной модели. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ConcurrencyMode.None">
      <summary>Свойство никогда не проверяется во время записи.Этот режим совместного доступа по умолчанию.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ConcurrencyMode.Fixed">
      <summary>Свойство всегда проверяется во время записи.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.DataSpace">
      <summary>Задает имена по умолчанию для моделей в Entity Framework.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.OSpace">
      <summary>Представляет имя, используемое по умолчанию для объектной модели.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.CSpace">
      <summary>Представляет имя по умолчанию для концептуальной модели.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.SSpace">
      <summary>Представляет имя по умолчанию для модели хранения.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.OCSpace">
      <summary>Представляет имя, используемое по умолчанию для сопоставления между объектной моделью и концептуальной моделью.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.DataSpace.CSSpace">
      <summary>Представляет имя, используемое по умолчанию для сопоставления между концептуальной моделью и моделью хранилища.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.Documentation">
      <summary>Представляет документацию, связанную с конструкцией концептуальной модели. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного объекта <see cref="T:System.Data.Metadata.Edm.Documentation" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного объекта <see cref="T:System.Data.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.IsEmpty">
      <summary>Получает значение, указывающее на то, содержит ли этот объект <see cref="T:System.Data.Metadata.Edm.Documentation" /> только значение NULL или пустое значение <see cref="P:System.Data.Metadata.Edm.Documentation.Summary" /> и <see cref="P:System.Data.Metadata.Edm.Documentation.Longdescription" />.</summary>
      <returns>Значение true, если объект <see cref="T:System.Data.Metadata.Edm.Documentation" /> содержит только значение NULL или пустое значение <see cref="P:System.Data.Metadata.Edm.Documentation.Summary" /> и <see cref="P:System.Data.Metadata.Edm.Documentation.LongDescription" />; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.LongDescription">
      <summary>Получает подробное описание для этого объекта <see cref="T:System.Data.Metadata.Edm.Documentation" />.</summary>
      <returns>Подробное описание для этого объекта <see cref="T:System.Data.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Documentation.Summary">
      <summary>Получает сводку для объекта <see cref="T:System.Data.Metadata.Edm.Documentation" />.</summary>
      <returns>Сводка для данного объекта <see cref="T:System.Data.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.Documentation.ToString">
      <summary>Возвращает сводку для данного объекта <see cref="T:System.Data.Metadata.Edm.Documentation" />.</summary>
      <returns>Сводка для данного объекта <see cref="T:System.Data.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmError">
      <summary>Содержит сведения об универсальной ошибке концептуальной модели. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmError.Message">
      <summary>Получает сообщение об ошибке.</summary>
      <returns>Сообщение об ошибке.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmFunction">
      <summary>Представляет сведения о функциях, которые могут вызываться из запросов, написанных на языке запросов Entity SQL.Это могут быть встроенные функции, предоставленные поставщиком хранилища, или пользовательские функции в конкретной базе данных.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного объекта <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного объекта <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.CommandTextAttribute">
      <summary>Представляет запрос в языке, который используется системой управления базой данных или моделью хранения.</summary>
      <returns>Значение string в синтаксисе, который используется системой управления базой данных или моделью хранения, содержащее инструкцию запроса или обновления объекта <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.FullName">
      <summary>Возвращает полное имя этого типа (пространство имен и имя). </summary>
      <returns>Полное имя типа.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.Parameters">
      <summary>Получает параметры данного объекта <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая параметры данного объекта <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmFunction.ReturnParameter">
      <summary>Получает возвращаемый параметр данного объекта <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />, представляющий возвращаемый параметр данного объекта <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmItemCollection">
      <summary>Загружает метаданные о концептуальной модели.<see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> загружает метаданные из CSDL-файлов.Этот класс является производным от класса <see cref="T:System.Data.Metadata.Edm.ItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />, используя коллекцию объектов <see cref="T:System.XML.XMLReader" />, где находятся CSDL-файлы.</summary>
      <param name="xmlReaders">Коллекция объектов <see cref="T:System.XML.XMLReader" />, где находятся CSDL-файлы.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.#ctor(System.String[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />, используя пути, по которым расположены CSDL-файлы.</summary>
      <param name="filePaths">Пути, по которым расположены CSDL-файлы.</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmItemCollection.EdmVersion">
      <summary>Получает версию языка CSDL, которую представляет эта коллекция элементов.</summary>
      <returns>Версия языка CSDL, которую представляет данная коллекция элементов.Язык CSDL с пространством имен XML http://schemas.microsoft.com/ado/2006/04/edm соответствует версии 1.0.Язык CSDL с пространством имен XML http://schemas.microsoft.com/ado/2008/09/edm соответствует версии 2.0.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes">
      <summary>Возвращает коллекцию объектов <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection" />, представляющий коллекцию объектов <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmMember">
      <summary>Представляет член, который может быть объявлен в любом <see cref="T:System.Data.Metadata.Edm.StructuralType" />. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.DeclaringType">
      <summary>Получает тип, который объявлен для данного элемента.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип, который имеет данный элемент.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.Name">
      <summary>Получает имя данного элемента.</summary>
      <returns>Имя данного элемента.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmMember.ToString">
      <summary>Возвращает имя данного элемента.</summary>
      <returns>Имя данного элемента.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmMember.TypeUsage">
      <summary>Получает экземпляр класса <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, содержащий как тип члена, так и аспекты типа.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, содержащий как тип члена, так и аспекты типа.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmProperty">
      <summary>Представляет свойство для объекта <see cref="T:System.Data.Metadata.Edm.EntityType" /> в концептуальной модели.Класс <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> происходит от класса <see cref="T:System.Data.Metadata.Edm.EdmMember" /> и предоставляет аспекты <see cref="P:System.Data.Metadata.Edm.EdmProperty.Default" /> и <see cref="P:System.Data.Metadata.Edm.EdmProperty.Nullable" /> для типа данного <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного объекта <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.DefaultValue">
      <summary>Получает значение по умолчанию для данного <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</summary>
      <returns>Значение по умолчанию для данного <see cref="T:System.Data.Metadata.Edm.EdmProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmProperty.Nullable">
      <summary>Получает значение, показывающее, может ли данное свойство <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> иметь значение null.</summary>
      <returns>true, если данное свойство <see cref="T:System.Data.Metadata.Edm.EdmProperty" /> может иметь значение null; в противном случае — false. </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmSchemaError">
      <summary>Содержит подробные сведения об ошибке схемы концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Column">
      <summary>Получает столбец, в котором произошла ошибка.</summary>
      <returns>Столбец, в котором произошла ошибка.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.ErrorCode">
      <summary>Получает код ошибки.</summary>
      <returns>Код ошибки.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Line">
      <summary>Получает номер строки, в которой произошла ошибка.</summary>
      <returns>Номер строки, в которой произошла ошибка.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.SchemaLocation">
      <summary>Получает расположение схемы, содержащей ошибку.В конце этой строки также содержится имя схемы.</summary>
      <returns>Расположение схемы, содержащей ошибку.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.SchemaName">
      <summary>Получает имя схемы, содержащей ошибку.</summary>
      <returns>Имя схемы, содержащей ошибку.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.Severity">
      <summary>Получает уровень серьезности ошибки.</summary>
      <returns>Одно из значений <see cref="T:System.Data.Metadata.Edm.EdmSchemaErrorSeverity" />.Значение по умолчанию — <see cref="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Warning" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmSchemaError.StackTrace">
      <summary>Получает строковое представление трассировки стека на момент, когда произошла ошибка.</summary>
      <returns>Строковое представление трассировки стека на момент, когда произошла ошибка.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmSchemaError.ToString">
      <summary>Возвращает сообщение об ошибке.</summary>
      <returns>Сообщение об ошибке.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmSchemaErrorSeverity">
      <summary>Задает уровень серьезности ошибки. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Warning">
      <summary>Предупреждение указывает на наличие некоторых проблем в схеме, которую все же можно использовать. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.EdmSchemaErrorSeverity.Error">
      <summary>Ошибка указывает, что произошла серьезная неполадка и схема не может быть использована.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.EdmType">
      <summary>Представляет базовый класс для всех типов в концептуальной модели. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.Abstract">
      <summary>Возвращает значение, указывающее, является ли этот тип абстрактным. </summary>
      <returns>true, если тип является абстрактным; в противном случае — false. </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.BaseType">
      <summary>Получает базовый тип данного типа.</summary>
      <returns>Базовый тип данного типа.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.FullName">
      <summary>Получает полное имя данного типа.</summary>
      <returns>Полное имя данного типа. </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmType.GetCollectionType">
      <summary>Возвращает экземпляр <see cref="T:System.Data.Metadata.Edm.CollectionType" />, тип элементов которого является данным типом. </summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.CollectionType" />, тип элементов которого является данным типом.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.Name">
      <summary>Получает имя данного типа.</summary>
      <returns>Имя данного типа.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EdmType.NamespaceName">
      <summary>Получает пространство имен данного типа.</summary>
      <returns>Пространство имен данного типа.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EdmType.ToString">
      <summary>Возвращает полное имя данного типа.</summary>
      <returns>Полное имя данного типа. </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityContainer">
      <summary>Представляет контейнер сущностей в концептуальной модели.Объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> представляет собой логическую группировку наборов сущностей и наборов ассоциаций.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.BaseEntitySets">
      <summary>Получает список наборов сущностей и наборов ассоциаций, содержащиеся в данном объекте <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, который содержит список наборов сущностей и наборов ассоциаций, содержащиеся в данном объекте <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного объекта <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного объекта <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.FunctionImports">
      <summary>Задает коллекцию элементов <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.Каждая функция содержит подробные сведения о хранимой процедуре, которая существует в базе данных, или эквивалентном объекте CommandText, который сопоставлен с сущностью и ее свойствами.</summary>
      <returns>Коллекция <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая элементы <see cref="T:System.Data.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.GetEntitySetByName(System.String,System.Boolean)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntitySet" />, используя заданное имя для набора сущностей.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntitySet" />, представляющий набор сущностей с указанным именем.</returns>
      <param name="name">Имя набора сущностей, по которому выполняется поиск.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.GetRelationshipSetByName(System.String,System.Boolean)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />, используя заданное имя для набора отношений.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />, представляющий набор отношений с указанным именем.</returns>
      <param name="name">Имя набора отношений, по которому выполняется поиск.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityContainer.Name">
      <summary>Получает имя данного <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Имя данного цвета <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.ToString">
      <summary>Возвращает имя данного <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Имя данного цвета <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.TryGetEntitySetByName(System.String,System.Boolean,System.Data.Metadata.Edm.EntitySet@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntitySet" />, используя заданное имя для набора сущностей.</summary>
      <returns>true, если существует набор сущностей, соответствующий критериям поиска; в противном случае — false.</returns>
      <param name="name">Имя набора сущностей, по которому выполняется поиск.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
      <param name="entitySet">Когда этот метод возвращает управление, он содержит объект <see cref="T:System.Data.Metadata.Edm.EntitySet" />.Если набор сущностей отсутствует, данный выходной параметр содержит значение null.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityContainer.TryGetRelationshipSetByName(System.String,System.Boolean,System.Data.Metadata.Edm.RelationshipSet@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />, используя заданное имя для набора отношений.</summary>
      <returns>true, если существует набор отношений, соответствующий критериям поиска; в противном случае — false. </returns>
      <param name="name">Имя набора отношений, по которому выполняется поиск.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
      <param name="relationshipSet">Когда этот метод возвращает управление, он содержит объект <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />. </param>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntitySet">
      <summary>Представляет набор сущностей в концептуальной модели.Объект <see cref="T:System.Data.Metadata.Edm.EntitySet" /> для <see cref="T:System.Data.Metadata.Edm.EntityType" /> содержит экземпляры типа <see cref="T:System.Data.Metadata.Edm.EntityType" /> или любого из его подтипов.Можно определить несколько объектов <see cref="T:System.Data.Metadata.Edm.EntitySet" />, используя один и тот же <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySet.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySet.ElementType">
      <summary>Получает тип сущности данного <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntityType" />, представляющий тип сущности данного <see cref="T:System.Data.Metadata.Edm.EntitySet" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntitySetBase">
      <summary>Базовый класс для объектов <see cref="T:System.Data.Metadata.Edm.EntitySet" /> и <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.EntitySetBase" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.EntitySetBase" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.ElementType">
      <summary>Получает тип сущности данного <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" />, представляющий тип сущности данного <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.EntityContainer">
      <summary>Получает контейнер сущностей текущего набора сущностей или отношений.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />, представляющий контейнер сущностей текущего набора сущностей или отношений.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntitySetBase.Name">
      <summary>Получает имя текущего набора сущностей или отношений.</summary>
      <returns>Имя текущего набора сущностей или отношений.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntitySetBase.ToString">
      <summary>Возвращает имя текущего набора сущностей или отношений.</summary>
      <returns>Имя текущего набора сущностей или отношений.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityType">
      <summary>Представляет определенный тип данных, например сущность клиента или сущность заказа, в концептуальной модели. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.EntityType.GetReferenceType">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.RefType" />, который ссылается на данный <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.RefType" />, который ссылается на данный <see cref="T:System.Data.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.NavigationProperties">
      <summary>Получает свойства навигации данного <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств навигации для данного <see cref="T:System.Data.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityType.Properties">
      <summary>Получает список свойств для данного <see cref="T:System.Data.Metadata.Edm.EntityType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств для данного <see cref="T:System.Data.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.EntityTypeBase">
      <summary>Базовый тип для <see cref="T:System.Data.Metadata.Edm.EntityType" /> и <see cref="T:System.Data.Metadata.Edm.RelationshipType" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.EntityTypeBase.KeyMembers">
      <summary>Получает список всех ключевых членов для текущей сущности или типа отношения.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, представляющий список ключевых членов для текущей сущности или типа отношения. </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.Facet">
      <summary>Предоставляет дополнительные сведения о членах.В иерархии типов метаданных ADO.NET аспекты предоставляют дополнительные сведения о членах посредством объявленного для члена типа.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Description">
      <summary>Получает описание данного <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.FacetDescription" />, представляющий описание данного <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.FacetType">
      <summary>Получает тип данного <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляющий тип данного <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.IsUnbounded">
      <summary>Получает значение, показывающее, является ли значения аспекта неограниченным.</summary>
      <returns>Значение true, если значение аспекта не ограничено; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Name">
      <summary>Получает имя данного объекта <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>Имя данного цвета <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.Facet.ToString">
      <summary>Возвращает имя данного объекта <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>Имя данного цвета <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.Facet.Value">
      <summary>Получает значение данного объекта <see cref="T:System.Data.Metadata.Edm.Facet" />.</summary>
      <returns>Значение данной структуры <see cref="T:System.Data.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.FacetDescription">
      <summary>Задает описание аспекта. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.DefaultValue">
      <summary>Получает значение аспекта по умолчанию с данным описанием аспекта.</summary>
      <returns>Значение аспекта по умолчанию с данным описанием аспекта.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.FacetName">
      <summary>Получает имя данного аспекта.</summary>
      <returns>Имя данного аспекта.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.FacetType">
      <summary>Получает тип данного аспекта.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляющий тип данного аспекта.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.IsConstant">
      <summary>Получает значение, указывающее, является ли значение данного аспекта константой.</summary>
      <returns>true, если этот аспект является константой; в противном случае — false. </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.IsRequired">
      <summary>Получает значение, указывающее, является ли данный аспект обязательным.</summary>
      <returns>true, если этот аспект является обязательным; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.MaxValue">
      <summary>Получает максимальное значение для данного аспекта.</summary>
      <returns>Максимальное значение для данного аспекта.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FacetDescription.MinValue">
      <summary>Получает минимальное значение для данного аспекта.</summary>
      <returns>Минимальное значение для данного аспекта.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.FacetDescription.ToString">
      <summary>Возвращает имя данного аспекта. </summary>
      <returns>Имя данного аспекта.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.FunctionParameter">
      <summary>Описывает параметры <see cref="T:System.Data.Metadata.Edm.EdmFunction" />. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.DeclaringFunction">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Metadata.Edm.EdmFunction" />, для которого объявлен данный параметр. </summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmFunction" />, представляющий функцию, для которой объявлен данный параметр.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.Mode">
      <summary>Получает режим данного <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Одно из значений <see cref="T:System.Data.Metadata.Edm.ParameterMode" />. </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.Name">
      <summary>Получает имя данного объекта <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Имя данного цвета <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.FunctionParameter.ToString">
      <summary>Возвращает имя данного <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Имя данного цвета <see cref="T:System.Data.Metadata.Edm.FunctionParameter" />. </returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.FunctionParameter.TypeUsage">
      <summary>Получает экземпляр класса <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, содержащий как тип параметра, так и аспекты типа.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, содержащий как тип параметра, так и аспекты типа.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.GlobalItem">
      <summary>Представляет базовый класс элементов для всех типов и контейнеров сущностей концептуальной модели. </summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ItemCollection">
      <summary>Базовый класс для классов <see cref="T:System.Data.Metadata.Edm.ObjectItemCollection" />, <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> и <see cref="T:System.Data.Mapping.StorageMappingItemCollection" />.Класс <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> является абстрактным и предоставляет основной интерфейс API для загрузки и содержания метаданных в памяти.Этот класс является производным от класса <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ItemCollection.DataSpace">
      <summary>Получает модель данных, связанную с этой коллекцией элементов. </summary>
      <returns>Модель данных, связанная с этой коллекцией элементов. </returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetEntityContainer(System.String)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />, используя заданное имя контейнера сущностей.</summary>
      <returns>Если контейнер сущностей отсутствует, этот метод возвращает значение null; в противном случае он возвращает первый контейнер.</returns>
      <param name="name">Имя контейнера сущностей.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetEntityContainer(System.String,System.Boolean)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />, используя заданное имя контейнера сущностей.</summary>
      <returns>Если контейнер сущностей отсутствует, этот метод возвращает значение null; в противном случае он возвращает первый контейнер сущностей.</returns>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Metadata.Edm.EdmFunction}},System.String,System.Boolean)">
      <summary>Возвращает все перегруженные версии функций, используя заданное имя из данной коллекции элементов.</summary>
      <returns>Коллекция типа ReadOnlyCollection, содержащая все функции с заданным именем.</returns>
      <param name="functionCollection">Словарь функций.</param>
      <param name="functionName">Полное имя функции.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.String)">
      <summary>Возвращает все перегруженные версии функций, используя заданное имя из данной коллекции элементов.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, которая содержит все функции с указанным именем.</returns>
      <param name="functionName">Полное имя функции.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetFunctions(System.String,System.Boolean)">
      <summary>Возвращает все перегруженные версии функций, используя заданное имя из данной коллекции элементов.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, которая содержит все функции с указанным именем.</returns>
      <param name="functionName">Полное имя функции.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItem``1(System.String)">
      <summary>Возвращает строго типизированный объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" />, используя заданное удостоверение.</summary>
      <returns>Элемент, заданный идентификатором.</returns>
      <param name="identity">Удостоверение элемента.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItem``1(System.String,System.Boolean)">
      <summary>Возвращает строго типизированный объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" />, используя заданное удостоверение с поиском либо с учетом, либо без учета регистра.</summary>
      <returns>Элемент, заданный идентификатором.</returns>
      <param name="identity">Удостоверение элемента.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetItems``1">
      <summary>Возвращает все элементы заданного типа из данной коллекции элементов.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, которая содержит все элементы заданного типа.</returns>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetType(System.String,System.String)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, используя заданное имя типа и имя пространства имен в этой коллекции элементов.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляющий тип данных, который соответствует заданному имени типа и имени пространства имен в этой коллекции элементов.При отсутствии соответствующего типа этот метод возвращает значение null.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.GetType(System.String,System.String,System.Boolean)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, используя заданное имя типа и имя пространства имен из этой коллекции элементов.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляющий тип данных, который соответствует заданному имени типа и имени пространства имен в этой коллекции элементов.При отсутствии соответствующего типа этот метод возвращает значение null.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />, используя заданное имя контейнера сущностей.Если контейнер сущностей отсутствует, этот выходной параметр содержит значение null; в противном случае он содержит первый контейнер сущностей.</summary>
      <returns>true, если существует контейнер сущностей, соответствующий критериям поиска; в противном случае — false.</returns>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
      <param name="entityContainer">Когда этот метод возвращает управление, он содержит объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.Если контейнер сущностей отсутствует, этот выходной параметр содержит значение null; в противном случае он содержит первый контейнер сущностей.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />, используя заданное имя контейнера сущностей.Если контейнер сущностей отсутствует, выходной параметр содержит значение null; в противном случае он содержит первый контейнер сущностей.</summary>
      <returns>true, если существует контейнер сущностей, соответствующий критериям поиска; в противном случае — false.</returns>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="entityContainer">Когда этот метод возвращает управление, он содержит объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.Если контейнер сущностей отсутствует, этот выходной параметр содержит значение null; в противном случае он содержит первый контейнер сущностей.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,System.Boolean,``0@)">
      <summary>Возвращает строго типизированный объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" />, используя заданное удостоверение из этой коллекции элементов.</summary>
      <returns>true, если существует элемент, соответствующий критериям поиска; в противном случае — false.</returns>
      <param name="identity">Удостоверение элемента.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
      <param name="item">Когда этот метод возвращает управление, выходной параметр содержит объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" />.При отсутствии глобального элемента с заданным идентификатором в коллекции элементов этот выходной параметр содержит значение NULL.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,``0@)">
      <summary>Возвращает строго типизированный объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" />, используя заданное удостоверение из этой коллекции элементов.</summary>
      <returns>true, если существует элемент, соответствующий критериям поиска; в противном случае — false.</returns>
      <param name="identity">Удостоверение элемента.</param>
      <param name="item">Когда этот метод возвращает управление, выходной параметр содержит объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" />.При отсутствии глобального элемента с заданным идентификатором в коллекции элементов этот выходной параметр содержит значение NULL.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.EdmType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, используя заданное имя типа и имя пространства имен из этой коллекции элементов.</summary>
      <returns>true, если существует тип, соответствующий критериям поиска; в противном случае — false. </returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
      <param name="type">Когда этот метод возвращает управление, данный выходной параметр содержит объект <see cref="T:System.Data.Metadata.Edm.EdmType" />.При отсутствии типа с заданным именем и именем пространства имен в этой коллекции элементов данный выходной параметр содержит значение NULL.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Data.Metadata.Edm.EdmType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, используя заданное имя типа и имя пространства имен из этой коллекции элементов.</summary>
      <returns>true, если существует тип, соответствующий критериям поиска; в противном случае — false.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="type">Когда этот метод возвращает управление, данный выходной параметр содержит объект <see cref="T:System.Data.Metadata.Edm.EdmType" />.При отсутствии типа с заданным именем и именем пространства имен в этой коллекции элементов данный выходной параметр содержит значение NULL.</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataItem">
      <summary>Представляет базовый класс элементов для всех метаданных в иерархии типов метаданных ADO.NET. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для этого типа.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.Documentation">
      <summary>Получает или задает документацию, связанную с этим типом.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.Documentation" />, представляющий документацию по этому типу.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Metadata.Edm.BuiltInTypeKind)">
      <summary>Возвращает встроенный тип концептуальной модели, соответствующий одному из значений <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляющий встроенный тип в модели EDM.</returns>
      <param name="builtInTypeKind">Одно из значений <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions">
      <summary>Возвращает список общих описаний аспектов для заданного типа.</summary>
      <returns>Объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, представляющий список общих описаний аспектов для заданного типа.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataItem.MetadataProperties">
      <summary>Получает список свойств текущего типа.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств текущего типа.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataProperty">
      <summary>Представляет атрибут метаданных для элемента в иерархии метаданных ADO.NET. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного объекта <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного объекта <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.Name">
      <summary>Получает имя данного <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Имя данного цвета <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.PropertyKind">
      <summary>Получает значение данного объекта <see cref="T:System.Data.Metadata.Edm.PropertyKind" />.</summary>
      <returns>Значение данного объекта <see cref="T:System.Data.Metadata.Edm.PropertyKind" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.TypeUsage">
      <summary>Получает экземпляр класса <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, содержащий как тип данного объекта <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />, так и аспекты типа. </summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, содержащий как тип данного объекта <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />, так и аспекты типа.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.MetadataProperty.Value">
      <summary>Возвращает значение данной структуры <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Значение данного объекта <see cref="T:System.Data.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.MetadataWorkspace">
      <summary>Представляет компонент службы среды выполнения метаданных ADO.NET, который обеспечивает поддержку извлечения метаданных из различных источников.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />. </summary>
      <param name="paths">Пути к метаданным рабочей области.</param>
      <param name="assembliesToConsider">Имена сборок, используемых при создании рабочего пространства.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.ClearCache">
      <summary>Удаляет все записи из кэша метаданных.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Metadata.Edm.StructuralType)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип <see cref="T:System.Data.Metadata.Edm.EdmType" />, который совпадает с типом, представляемым параметром <paramref name="objectSpaceType" />. </summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип <see cref="T:System.Data.Metadata.Edm.EdmType" />.При отсутствии соответствующего типа этот метод возвращает значение null.</returns>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип в объектном пространстве.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />, используя заданное имя контейнера сущностей и модель данных.</summary>
      <returns>Если контейнер сущностей отсутствует, этот метод возвращает значение null; в противном случае он возвращает первый контейнер сущностей.</returns>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск контейнера сущностей.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />, используя заданное имя контейнера сущностей и модель данных.</summary>
      <returns>Если контейнер сущностей отсутствует, этот метод возвращает значение null; в противном случае он возвращает первый контейнер сущностей.</returns>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск контейнера сущностей.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает все перегруженные версии функций, используя заданное имя, имя пространства имен и модель данных.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все функции, которые соответствуют заданному имени в заданном пространстве имен и модели данных.</returns>
      <param name="name">Имя функции.</param>
      <param name="namespaceName">Пространство имен функции.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск функций.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Metadata.Edm.DataSpace,System.Boolean)">
      <summary>Возвращает все перегруженные версии функций, используя заданное имя функции, имя пространства имен и модель данных.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все функции, которые соответствуют заданному имени в заданном пространстве имен и модели данных.</returns>
      <param name="name">Имя функции.</param>
      <param name="namespaceName">Пространство имен функции.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск функций.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает элемент, используя заданное удостоверение и модель данных.</summary>
      <returns>Элемент, соответствующий заданному удостоверению в указанной модели данных.</returns>
      <param name="identity">Удостоверение элемента.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск элемента.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает элемент, используя заданное удостоверение и модель данных.</summary>
      <returns>Элемент, соответствующий заданному удостоверению в указанной модели данных.</returns>
      <param name="identity">Удостоверение элемента.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск элемента.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Metadata.Edm.DataSpace)">
      <summary>Получает элементы <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</summary>
      <returns>Элементы <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</returns>
      <param name="dataSpace">Объект T:System.Data.Metadata.Edm.DataSpace, из которого извлекаются элементы.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Metadata.Edm.DataSpace)">
      <summary>Получает все элементы указанной модели данных.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, которая содержит все элементы указанной модели данных.</returns>
      <param name="dataSpace">Концептуальная модель, для которой необходим список элементов.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Metadata.Edm.DataSpace)">
      <summary>Получает все элементы указанной модели данных.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, которая содержит все элементы указанной модели данных.</returns>
      <param name="dataSpace">Концептуальная модель, для которой необходим список элементов.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Metadata.Edm.StructuralType)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип объектного пространства, который совпадает с типом, представляемым параметром <paramref name="edmSpaceType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип объектного пространства.При отсутствии соответствующего типа этот метод возвращает значение null.</returns>
      <param name="edmSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает список типов примитивов в указанной модели данных.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, которая содержит все типы примитивов указанной модели данных.</returns>
      <param name="dataSpace">Модель данных, для которой требуется список типов примитивов.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Metadata.Edm.EntitySetBase,System.Data.Metadata.Edm.EntityTypeBase)">
      <summary>Возвращает элементы исходных значений из набора сущностей и типа сущности.</summary>
      <returns>Элементы исходных значений из набора сущностей и типа сущности.</returns>
      <param name="entitySet">Набор сущностей, из которого извлекаются исходные значения.</param>
      <param name="entityType">Тип сущности, из которого извлекаются исходные значения.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, используя заданное имя типа, имя пространства имен и модель данных.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск типа.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Metadata.Edm.DataSpace)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, используя заданное имя типа, имя пространства имен и модель данных.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляющий тип данных, который соответствует заданному имени типа и имени пространства имен в указанной модели данных.При отсутствии соответствующего типа этот метод возвращает значение null.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск типа.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Загружает метаданные из заданной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружены метаданные.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
      <summary>Загружает метаданные из заданной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружены метаданные.</param>
      <param name="logLoadMessage">Делегат для ведения журнала сообщений о загрузке.</param>
    </member>
    <member name="F:System.Data.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
      <summary>Представляет максимальную версию модели EDM, поддерживаемую средой выполнения Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Metadata.Edm.ItemCollection)">
      <summary>Регистрирует коллекцию элементов с каждой из связанных моделей данных. </summary>
      <param name="collection">Коллекция выходных параметров, которую необходимо заполнить.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент коллекции равен null.</exception>
      <exception cref="T:System.InvalidOperationException">Для указанной модели данных уже зарегистрирована коллекция элементов.</exception>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Metadata.Edm.StructuralType,System.Data.Metadata.Edm.StructuralType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.StructuralType" /> посредством параметра out <paramref name="edmSpaceType" />, представляющий тип <see cref="T:System.Data.Metadata.Edm.EdmType" />, который совпадает с типом, представляемым параметром <paramref name="objectSpaceType" />.</summary>
      <returns>true, если существует тип, соответствующий критериям поиска; в противном случае — false.</returns>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип объектного пространства.</param>
      <param name="edmSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />, используя заданное имя контейнера сущностей и модель данных.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.</returns>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск контейнера сущностей.</param>
      <param name="entityContainer">В качестве возвращаемого значения этот метод содержит объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.Если контейнер сущностей отсутствует, этот выходной параметр содержит значение null; в противном случае он возвращает первый контейнер сущностей.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EntityContainer@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />, используя заданное имя контейнера сущностей и модель данных.</summary>
      <returns>true, если существует контейнер сущностей, соответствующий критериям поиска; в противном случае — false.</returns>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск контейнера сущностей.</param>
      <param name="entityContainer">В качестве возвращаемого значения этот метод содержит объект <see cref="T:System.Data.Metadata.Edm.EntityContainer" />.Если контейнер сущностей отсутствует, этот выходной параметр содержит значение null; в противном случае он возвращает первый контейнер сущностей.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,``0@)">
      <summary>Возвращает элемент, используя заданное удостоверение и модель данных.</summary>
      <returns>true, если существует элемент, соответствующий критериям поиска; в противном случае — false.</returns>
      <param name="identity">Удостоверение элемента.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск элемента.</param>
      <param name="item">В качестве возвращаемого значения этот метод содержит объект <see cref="T:System.Data.Metadata.Edm.GlobalIem" />.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Metadata.Edm.DataSpace,``0@)">
      <summary>Возвращает элемент, используя заданное удостоверение и модель данных.</summary>
      <returns>true, если существует элемент, соответствующий критериям поиска; в противном случае — false.</returns>
      <param name="identity">Удостоверение элемента.</param>
      <param name="space">Концептуальная модель, в которой производится поиск элемента.</param>
      <param name="item">В качестве возвращаемого значения этот метод содержит объект <see cref="T:System.Data.Metadata.Edm.GlobalItem" />.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.ItemCollection@)">
      <summary>Проверяет извлечение <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</summary>
      <returns>Значение равно true, если извлечение проведено успешно; в противном случае значение равно false.</returns>
      <param name="dataSpace">Объект <see cref="T:System.Data.Metadata.Edm.DataSpace" />, из которого производится попытка извлечения <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />.</param>
      <param name="collection">Коллекция элементов.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Metadata.Edm.StructuralType,System.Data.Metadata.Edm.StructuralType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.StructuralType" /> посредством параметра out <paramref name="objectSpaceType" />, представляющий тип, который совпадает с типом <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляемым параметром <paramref name="edmSpaceType" />.</summary>
      <returns>true, если существует тип, соответствующий критериям поиска; в противном случае — false.</returns>
      <param name="edmSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип объектного пространства.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EdmType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, используя заданное имя типа, имя пространства имен и модель данных.</summary>
      <returns>true, если существует тип, соответствующий критериям поиска; в противном случае — false.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск типа.</param>
      <param name="type">В качестве возвращаемого значения этот метод содержит объект <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Metadata.Edm.DataSpace,System.Data.Metadata.Edm.EdmType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, используя заданное имя типа, имя пространства имен и модель данных.</summary>
      <returns>true, если существует тип, соответствующий критериям поиска; в противном случае — false.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск типа.</param>
      <param name="type">В качестве возвращаемого значения этот метод содержит объект <see cref="T:System.Data.Metadata.Edm.EdmType" />.</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.NavigationProperty">
      <summary>Представляет переход от одного типа сущности к другому в концептуальной модели. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.NavigationProperty" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.NavigationProperty" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.FromEndMember">
      <summary>Получает конечный элемент отношения "from" для данного перехода.</summary>
      <returns>Конечный элемент отношения "from" для данного перехода.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.NavigationProperty.GetDependentProperties">
      <summary>Получает свойства внешнего ключа для свойства навигации, расположенного в зависимом элементе справочного ограничения.</summary>
      <returns>Коллекция свойств внешнего ключа.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.RelationshipType">
      <summary>Получает тип отношения, с которым работает данное свойство навигации.</summary>
      <returns>Тип отношения, с которым работает данное свойство навигации.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.NavigationProperty.ToEndMember">
      <summary>Получает конечный элемент отношения "to" для данного перехода.</summary>
      <returns>Конечный элемент отношения "to" для данного перехода.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ObjectItemCollection">
      <summary>Загружает метаданные об объектной модели данных.Этот класс является производным от класса <see cref="T:System.Data.Metadata.Edm.ItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Metadata.Edm.ObjectItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Metadata.Edm.StructuralType)">
      <summary>Возвращает тип среды CLR, который соответствует объекту <see cref="T:System.Data.Metadata.Edm.StructuralType" />, предоставляемому типом <paramref name="objectSpaceType" />.</summary>
      <returns>Тип среды CLR.</returns>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип объектного пространства.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetItems``1">
      <summary>Возвращает коллекцию элементов, принадлежащих к типу <paramref name="T" />.</summary>
      <returns>Коллекция элементов, принадлежащих к типу <paramref name="T" />.</returns>
      <typeparam name="T">Тип извлекаемых элементов.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
      <summary>Возвращает коллекцию объектов <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Коллекция объектов <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Загружает метаданные из заданной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружены метаданные.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Metadata.Edm.EdmItemCollection)">
      <summary>Загружает метаданные из указанной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружены метаданные.</param>
      <param name="edmItemCollection">Источник метаданных модели EDM для метаданных объектного пространства.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
      <summary>Загружает метаданные из заданной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружены метаданные.</param>
      <param name="edmItemCollection">Источник метаданных модели EDM для метаданных объектного пространства.</param>
      <param name="logLoadMessage">Делегат, которому отправляются сообщения журнала.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Metadata.Edm.StructuralType,System.Type@)">
      <summary>Возвращает тип среды CLR, который соответствует объекту <see cref="T:System.Data.Metadata.Edm.StructuralType" />, предоставляемому типом <paramref name="objectSpaceType" />.</summary>
      <returns>true, если существует тип, соответствующий критериям поиска; в противном случае — false.</returns>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.StructuralType" />, представляющий тип объектного пространства.</param>
      <param name="clrType">Тип среды CLR.</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.OperationAction">
      <summary>Задает список возможных действий при удалении родительского члена End объекта <see cref="T:System.Data.Metadata.Edm.RelationshipType" />. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.None">
      <summary>Удалить можно только родительский член End.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.Cascade">
      <summary>При удалении родительского члена End связанные с ним дочерние окончания также удаляются. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.OperationAction.Restrict">
      <summary>Родительский член End удалить нельзя, если он содержит один или несколько связанных дочерних окончаний.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ParameterMode">
      <summary>Задает направление параметра.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.In">
      <summary>Входной параметр.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.Out">
      <summary>Выходной параметр.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.InOut">
      <summary>Как входной, так и выходной параметр.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterMode.ReturnValue">
      <summary>Возвращаемое значение метода.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ParameterTypeSemantics">
      <summary>Задает семантику типов, используемую для разрешения перегрузки функций.Каждый поставщик хранилищ должен использовать эти флаги перечисления в файле манифеста поставщика для каждого определения функции.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
      <summary>Флаг, указывающий неявное преобразование между заданным и формальным типами аргумента.Это тип преобразования по умолчанию.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
      <summary>Флаг, указывающий повышение типа между заданным и формальным типами аргумента.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
      <summary>Флаг, указывающий использование только строгой эквивалентности.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.PrimitiveType">
      <summary>Описывает типы-примитивы .NET Framework и концептуальной модели, а также типы-примитивы, связанные с конкретными поставщиками хранилища.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.ClrEquivalentType">
      <summary>Возвращает эквивалентный CLR-тип данного <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.Следует отметить, что свойство <see cref="P:System.Data.Metadata.Edm.PrimitiveType.ClrEquivalentType" /> всегда возвращает значение типа, не допускающего значений NULL.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий эквивалентный CLR-тип данного <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.FacetDescriptions">
      <summary>Получает список описаний аспектов для данного <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список описаний аспектов для данного <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
      <summary>Возвращает эквивалентный тип <see cref="T:System.Data.Metadata.Edm.EdmType" /> данного <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />. </summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, являющийся эквивалентом данного <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Возвращает тип <see cref="T:System.Data.Metadata.Edm.EdmType" />, эквивалентный типу <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, являющийся эквивалентом указанного типа <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
      <param name="primitiveTypeKind">Значение типа <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
      <summary>Возвращает список типов примитивов.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список типов примитивов.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
      <summary>Получает значение перечисления <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" />, указывающее тип примитива данного <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Значение перечисления <see cref="T:System.Data.Metadata.Edm.PrimitiveTypeKind" />, указывающее тип примитива данного <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.PrimitiveTypeKind">
      <summary>Задает виды всех типов-примитивов, определенных концептуальной моделью. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Binary">
      <summary>Элемент перечисления, указывающий тип Binary (EDM).</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Boolean">
      <summary>Элемент перечисления, указывающий тип Boolean (EDM).</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Byte">
      <summary>Элемент перечисления, указывающий тип Byte (EDM).</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTime">
      <summary>Элемент перечисления, указывающий тип DateTime (EDM).</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Decimal">
      <summary>Элемент перечисления, указывающий тип Decimal (EDM).</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Double">
      <summary>Элемент перечисления, указывающий тип Double (EDM).</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Guid">
      <summary>Элемент перечисления, указывающий тип Guid (EDM).</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Single">
      <summary>Элемент перечисления, указывающий тип Single (EDM).</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.SByte">
      <summary>Элемент перечисления, указывающий тип SByte.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int16">
      <summary>Элемент перечисления, указывающий тип Int16 (EDM).</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int32">
      <summary>Элемент перечисления, указывающий тип Int32 (EDM).</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Int64">
      <summary>Элемент перечисления, указывающий тип Int64 (EDM).</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.String">
      <summary>Элемент перечисления, указывающий тип String (EDM).</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.Time">
      <summary>Элемент перечисления, указывающий тип Time (EDM).</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
      <summary>Элемент перечисления, указывающий тип DateTimeOffset.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.PropertyKind">
      <summary>Задает типы атрибутов элемента в концептуальной модели. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PropertyKind.System">
      <summary>Элемент перечисления, показывающий, что атрибут элемента имеет значение System.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.PropertyKind.Extended">
      <summary>Элемент перечисления, показывающий, что атрибут элемента имеет значение Extended.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1">
      <summary>Представляет коллекцию членов в иерархии метаданных ADO.NET, предоставляя доступную только для чтения коллекцию с расширенными возможностями поиска.Этот класс является производным от класса <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection" />.</summary>
      <typeparam name="T">Тип элементов в коллекции.</typeparam>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
      <summary>Определяет, содержит ли коллекция элемент с указанным идентификатором.</summary>
      <returns>true, если коллекция содержит искомый элемент; в противном случае — false.Значение по умолчанию — false.</returns>
      <param name="identity">Удостоверение элемента.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
      <summary>Возвращает перечислитель для просмотра этой коллекции.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />, который может использоваться для итерации по данной коллекции <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
      <summary>Получает элемент из этой коллекции с использованием заданного идентификатора.</summary>
      <returns>Элемент из этой коллекции.</returns>
      <param name="identity">Удостоверение искомого элемента.</param>
      <param name="ignoreCase">Значение true для выполнения поиска без учета регистра; в противном случае — значение false..</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
      <summary>Возвращает индекс указанного значения в этой коллекции.</summary>
      <returns>Индекс указанного значения в этой коллекции.</returns>
      <param name="value">Искомое значение.</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
      <summary>Получает значение, показывающее, доступна ли эта коллекция только для чтения.</summary>
      <returns>Значение true, если данная коллекция доступна только для чтения; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
      <summary>Получает элемент из этой коллекции с использованием заданного идентификатора.</summary>
      <returns>Элемент из этой коллекции.</returns>
      <param name="identity">Удостоверение искомого элемента.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
      <summary>Получает элемент из этой коллекции с использованием заданного идентификатора.</summary>
      <returns>true, если существует элемент, соответствующий критериям поиска; в противном случае — false. </returns>
      <param name="identity">Удостоверение искомого элемента.</param>
      <param name="ignoreCase">true для выполнения поиска без учета регистра; в противном случае — false. </param>
      <param name="item">Когда этот метод возвращает управление, данный выходной параметр содержит элемент из коллекции.Если искомый элемент отсутствует, данный выходной параметр содержит значение null.</param>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
      <summary>Поддерживает простой итерационный перебор элементов коллекции <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
      <summary>Возвращает член по текущей позиции. </summary>
      <returns>Член, расположенный по текущей позиции.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
      <summary>Удаляет этот перечислитель.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
      <summary>Перемещается к следующему члену в коллекции типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />.</summary>
      <returns>true, если перечислитель переместился в коллекции типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.EnumeratortaCollection" />; в противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
      <summary>Позиционирует перечислитель перед первой позицией в коллекции типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Возвращает член по текущей позиции.</summary>
      <returns>Член, расположенный по текущей позиции.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.ReferentialConstraint">
      <summary>Описывает справочные ограничения связей в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.FromProperties">
      <summary>Получает список свойств для роли "от", в которой определен данный объект <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, которая содержит список свойств для роли "от", в которой определен данный объект <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole">
      <summary>Получает роль "от", которая принимает участие в данном <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" />, представляющий роль "от", которая принимает участие в данном <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.ToProperties">
      <summary>Получает список свойств для роли "к", в которой определен данный объект <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, которая содержит список свойств для роли "к", в которой определен данный объект <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole">
      <summary>Получает роль "к", которая принимает участие в данном <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.RelationshipEndMember" />, представляющий роль "к", которая принимает участие в данном <see cref="T:System.Data.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.ReferentialConstraint.ToString">
      <summary>Возвращает сочетание имен <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole" /> и <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole" />.</summary>
      <returns>Сочетание имен <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.FromRole" /> и <see cref="P:System.Data.Metadata.Edm.ReferentialConstraint.ToRole" />. </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RefType">
      <summary>Предоставляет адрес сущности для использующих ее операций.В схеме концептуальной модели невозможно явно определить <see cref="T:System.Data.Metadata.Edm.RefType" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RefType.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.RefType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.RefType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RefType.ElementType">
      <summary>Возвращает тип сущности, на который ссылается данный <see cref="T:System.Data.Metadata.Edm.RefType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntityTypeBase" />, представляющий тип сущности, на который ссылается данный <see cref="T:System.Data.Metadata.Edm.RefType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipEndMember">
      <summary>Определяет член End для <see cref="T:System.Data.Metadata.Edm.RelationshipType" />.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
      <summary>Получает рабочие характеристики конечного элемента данного отношения.</summary>
      <returns>Одно из значений <see cref="T:System.Data.Metadata.Edm.OperationAction" />.Значение по умолчанию — <see cref="P:System.Data.Metadata.Edm.OperationAction.None" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.RelationshipEndMember.GetEntityType">
      <summary>Обращается к типу сущности EntityType конечного элемента EndMember в ассоциации.</summary>
      <returns>Тип сущности EntityType конечного элемента EndMember в ассоциации.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
      <summary>Получает количество элементов конечного элемента данного отношения.</summary>
      <returns>Одно из значений <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />.  </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipMultiplicity">
      <summary>Представляет сведения о количестве элементов для элемента End типа отношения. </summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
      <summary>Нижняя граница диапазона: 0, верхняя граница: 1.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.One">
      <summary>Нижняя граница диапазона: 1, верхняя граница: 1.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.RelationshipMultiplicity.Many">
      <summary>Нижняя граница диапазона: 0, верхняя граница: NULL.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipSet">
      <summary>Представляет набор связей в концептуальной модели. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного свойства <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipSet.ElementType">
      <summary>Получает тип отношений данного <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.RelationshipType" />, представляющий тип отношений данного <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RelationshipType">
      <summary>Представляет базовый класс связей в концептуальной модели. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RelationshipType.RelationshipEndMembers">
      <summary>Получает список конечных элементов для этого типа отношения. </summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список элементов для этого типа отношения.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.RowType">
      <summary>Описывает строку, например результат запроса.Этот класс является производным от класса <see cref="T:System.Data.Metadata.Edm.StructuralType" />.Структура типа строки зависит от того, какие столбцы базы данных проецируются в запросе.Объект <see cref="T:System.Data.Metadata.Edm.RowType" /> может быть полезен в функциях концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.RowType.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного объекта <see cref="T:System.Data.Metadata.Edm.RowType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного объекта <see cref="T:System.Data.Metadata.Edm.RowType" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.RowType.Properties">
      <summary>Получает список свойств для данного <see cref="T:System.Data.Metadata.Edm.RowType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств для данного <see cref="T:System.Data.Metadata.Edm.RowType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.SimpleType">
      <summary>Базовый класс, который описывает типы-примитивы в концептуальной модели.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.StoreGeneratedPattern">
      <summary>Представляет перечисление, которое задает три параметра, показывающие, требует ли столбец в SSDL значения в ходе операций вставки и обновления.ADO.NET считывает значение столбца, а затем сохраняет его в кэше памяти.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.None">
      <summary>Значение, показывающее, что это свойство не сгенерировано сервером.Это — значение по умолчанию.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.Identity">
      <summary>Значение генерируется при вставке, а при обновлении остается без изменения.</summary>
    </member>
    <member name="F:System.Data.Metadata.Edm.StoreGeneratedPattern.Computed">
      <summary>Значение генерируется как при вставке, так и при обновлении.</summary>
    </member>
    <member name="T:System.Data.Metadata.Edm.StoreItemCollection">
      <summary>Загружает метаданные о модели хранения (базы данных).Класс <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> загружает метаданные из SSDL-файлов.Этот класс является производным от класса <see cref="T:System.Data.Metadata.Edm.ItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />. </summary>
      <param name="xmlReaders">Средство чтения XML, использованное для создания метаданных.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</summary>
      <param name="filePaths">Путь к файлу, использованному для создания метаданных.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
      <summary>Возвращает коллекцию объектов <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection" />, представляющий коллекцию объектов <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.StructuralType">
      <summary>Базовый тип для всех типов в концептуальной модели, имеющей члены.</summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.StructuralType.Members">
      <summary>Получает список членов этого типа.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список членов этого типа. </returns>
    </member>
    <member name="T:System.Data.Metadata.Edm.TypeUsage">
      <summary>Описывает тип и набор аспектов этого типа. </summary>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.BuiltInTypeKind">
      <summary>Получает вид встроенного типа для данного объекта <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для данного объекта <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean)">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для описания двоичного типа с использованием заданных значений аспектов.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, описывающий двоичный тип с помощью указанных значений аспектов.</returns>
      <param name="primitiveType">Тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <param name="isFixedLength">true, чтобы задать фиксированную длину двоичного типа; в противном случае — false. </param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для описания двоичного типа с использованием заданных значений аспектов.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, описывающий двоичный тип с помощью указанных значений аспектов.</returns>
      <param name="primitiveType">Тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <param name="isFixedLength">true, чтобы задать фиксированную длину двоичного типа; в противном случае — false.</param>
      <param name="maxLength">Максимальная длина двоичного типа.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> типа, который описывают параметры.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" />.</returns>
      <param name="primitiveType">Простой тип, определяющий единицы измерения смещения.</param>
      <param name="precision">Точность значения объекта <see cref="T:System." /><see cref="DateTimeOffset" /> в долях секунды в зависимости от поддерживаемого числа десятичных разрядов.Например, точность 3 означает, что поддерживаются значения с точностью до миллисекунд.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> типа, который описывают параметры.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" />.</returns>
      <param name="primitiveType">Простой тип, определяющий единицы измерения объекта <see cref="T:System." /><see cref="DateTime" />.</param>
      <param name="precision">Точность значения объекта <see cref="T:System." /><see cref="DateTimeOffset" /> в долях секунды в зависимости от поддерживаемого числа десятичных разрядов.Например, точность 3 означает, что поддерживаются значения с точностью до миллисекунд.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Metadata.Edm.PrimitiveType)">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для описания десятичного типа с неограниченными значениями аспектов точности и масштаба.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для описания десятичного типа с неограниченными значениями аспектов точности и масштаба.</returns>
      <param name="primitiveType">Тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для описания десятичного типа с использованием заданных значений аспектов.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, описывающий десятичный тип с помощью указанных значений аспектов.</returns>
      <param name="primitiveType">Тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <param name="precision">Точность десятичного типа в виде типа <see cref="T:System.Byte" />.</param>
      <param name="scale">Масштаб десятичного типа в виде типа <see cref="T:System.Byte" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Metadata.Edm.EdmType)">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> с заданным типом концептуальной модели.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> со значениями аспектов по умолчанию для указанного типа <see cref="T:System.Data.Metadata.Edm.EdmType" />.</returns>
      <param name="edmType">Тип <see cref="T:System.Data.Metadata.Edm.EdmType" />, для которого создается объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для описания строкового типа с использованием заданных значений аспектов и неограниченного значения MaxLength.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, описывающий строковый тип с помощью указанных значений аспектов и неограниченного параметра MaxLength.</returns>
      <param name="primitiveType">Тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <param name="isUnicode">true, чтобы задать стандарт кодирования символов строкового типа "Юникод"; в противном случае — false.</param>
      <param name="isFixedLength">Значение true, чтобы задать фиксированную длину строкового типа; в противном случае — значение false</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> для описания строкового типа с использованием заданных значений аспектов.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, описывающий строковый тип с помощью указанных значений аспектов.</returns>
      <param name="primitiveType">Тип <see cref="T:System.Data.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <param name="isUnicode">true, чтобы задать стандарт кодирования символов строкового типа "Юникод"; в противном случае — false.</param>
      <param name="isFixedLength">true, чтобы задать стандарт кодирования символов строкового типа "Юникод"; в противном случае — false.</param>
      <param name="maxLength">true, чтобы задать фиксированную длину строкового типа; в противном случае — false.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> типа, который описывают параметры.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" />.</returns>
      <param name="primitiveType">Простой тип, определяющий единицы измерения объекта <see cref="T:System." /><see cref="DateTime" />.</param>
      <param name="precision">Точность значения объекта <see cref="T:System." /><see cref="DateTimeOffset" /> в долях секунды в зависимости от поддерживаемого числа десятичных разрядов.Например, точность 3 означает, что поддерживаются значения с точностью до миллисекунд.</param>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.EdmType">
      <summary>Получает сведения о типе, описанном данным объектом <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EdmType" />, представляющий сведения о типе, описанном данным объектом <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="P:System.Data.Metadata.Edm.TypeUsage.Facets">
      <summary>Получает список аспектов для типа, описанного данным объектом <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список аспектов для типа, описанного данным объектом <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Metadata.Edm.TypeUsage)">
      <summary>Проверяет, является ли данный <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> подтипом указанного <see cref="T:System.Data.Metadata.Edm.TypeUsage" />. </summary>
      <returns>true, если данный <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> является подтипом указанного <see cref="T:System.Data.Metadata.Edm.TypeUsage" />; в противном случае — false. </returns>
      <param name="typeUsage">Проверяемый объект <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
    </member>
    <member name="M:System.Data.Metadata.Edm.TypeUsage.ToString">
      <summary>Возвращает полное имя типа, описанного данным объектом <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Полное имя типа, описанного данным объектом <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, в виде строки.</returns>
    </member>
    <member name="T:System.Data.Objects.CompiledQuery">
      <summary>Представляет кэшируемый запрос LINQ to Entities.</summary>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`10" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg2 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg3 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg4 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg5 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg6 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg7 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg8 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`11" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg2 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg3 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg4 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg5 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg6 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg7 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg8 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg9 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`12" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg2 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg3 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg4 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg5 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg6 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg7 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg8 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg9 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg10 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`13" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg2 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg3 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg4 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg5 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg6 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg7 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg8 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg9 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg10 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg11 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`14" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg2 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg3 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg4 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg5 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg6 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg7 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg8 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg9 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg10 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg11 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg12 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`15" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg2 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg3 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg4 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg5 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg6 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg7 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg8 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg9 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg10 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg11 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg12 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg13 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`16" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg2 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg3 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg4 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg5 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg6 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg7 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg8 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg9 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg10 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg11 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg12 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg13 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg14">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg14 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`17" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg2 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg3 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg4 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg5 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg6 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg7 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg8 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg9 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg10 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg11 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg12 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg13 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg14">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg14 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg15">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg15 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`2" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`3" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1" /> должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`4" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg2 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`5" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg2 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg3 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`6" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg2 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg3 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg4 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`7" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg2 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg3 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg4 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg5 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`8" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg2 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg3 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg4 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg5 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg6 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`9" />, универсальный метод-делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg1 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg2 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg3 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg4 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg5 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg6 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному данным методом.<paramref name="TArg7 " />должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип <paramref name="T" /> результатов запроса, возвращаемых путем выполнения делегата, который возвращается методом <see cref="M:System.Data.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" />.</typeparam>
    </member>
    <member name="T:System.Data.Objects.CurrentValueRecord">
      <summary>Предоставляет доступ к текущим значениям данных объекта. </summary>
    </member>
    <member name="T:System.Data.Objects.DbUpdatableDataRecord">
      <summary>Предоставляет доступ к исходным значениям данных объекта.<see cref="T:System.Data.Objects.DbUpdatableDataRecord" /> реализует методы, позволяющие обновлять исходные значения объекта.</summary>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.DataRecordInfo">
      <summary>Возвращает сведения о записи данных.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DataRecordInfo" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.FieldCount">
      <summary>Получает количество полей в записи.</summary>
      <returns>Целочисленное значение, представляющее число полей.</returns>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
      <summary>Получает логическое значение поля.</summary>
      <returns>Значение поля логического типа.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
      <summary>Извлекает значение поля в виде byte.</summary>
      <returns>Значение поля в виде byte.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Извлекает значение поля в виде массива byte.</summary>
      <returns>Количество скопированных байтов.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="dataIndex">Индекс, с которого начинается копирование данных.</param>
      <param name="buffer">Буфер назначения, куда копируются данные.</param>
      <param name="bufferIndex">Индекс в буфере назначения, с которого начинается копирование.</param>
      <param name="length">Число байтов, предназначенных для копирования.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
      <summary>Извлекает значение поля в виде char.</summary>
      <returns>Значение поля в виде char.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Извлекает значение поля в виде массива char.</summary>
      <returns>Количество скопированных символов.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="dataIndex">Индекс, с которого начинается копирование данных.</param>
      <param name="buffer">Буфер назначения, куда копируются данные.</param>
      <param name="bufferIndex">Индекс в буфере назначения, с которого начинается копирование.</param>
      <param name="length">Число копируемых знаков.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
      <summary>Извлекает значение поля в виде <see cref="T:System.Common.DbDataReader" />.</summary>
      <returns>Значение поля в виде <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
      <summary>Извлекает значение поля в виде <see cref="T:System.Data.Common.DbDataRecord" />.</summary>
      <returns>Значение поля в виде <see cref="T:System.Data.Common.DbDataRecord" />.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
      <summary>Получает имя типа данных поля.</summary>
      <returns>Имя типа данных поля.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.DateTime" />.</summary>
      <returns>Значение поля в виде <see cref="T:System.DateTime" />.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
      <summary>Извлекает значение поля в виде <see cref="T:System.Common.DbDataReader" />.</summary>
      <returns>Значение поля в виде <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
      <summary>Извлекает значение поля в виде decimal.</summary>
      <returns>Значение поля в виде decimal.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
      <summary>Извлекает значение поля в виде double.</summary>
      <returns>Значение поля в виде double.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
      <summary>Получает тип поля.</summary>
      <returns>Тип поля.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
      <summary>Извлекает значение поля в виде float.</summary>
      <returns>Значение поля в виде float.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
      <summary>Извлекает значение поля в виде <see cref="T:System.Guid" />.</summary>
      <returns>Значение поля как <see cref="T:System.Guid" />.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Int16" />.</summary>
      <returns>Значение поля как тип <see cref="T:System.Int16" />.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Int32" />.</summary>
      <returns>Значение поля как тип <see cref="T:System.Int32" />.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Int64" />.</summary>
      <returns>Значение поля как тип <see cref="T:System.Int64" />.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
      <summary>Получает имя поля.</summary>
      <returns>Имя поля.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
      <summary>Извлекает порядковый номер поля с использованием имени поля.</summary>
      <returns>Порядковый номер поля.</returns>
      <param name="name">Имя поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
      <summary>Получает значение поля.</summary>
      <returns>Значение поля.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
      <summary>Получает значение как строку.</summary>
      <returns>Значение поля.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
      <summary>Получает значение поля.</summary>
      <returns>Значение поля.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
      <summary>Заполняет массив объектов значениями полей текущей записи.</summary>
      <returns>Число возвращенных значений полей.</returns>
      <param name="values">Массив объектов для сохранения значений полей.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
      <summary>Возвращает логическое значение, показывающее, имеет ли указанное поле значение <see cref="T:System.DBNull" />.</summary>
      <returns>Значение true, если поле имеет значение <see cref="T:System.DBNull" />; в противном случае — значение false.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.Item(System.Int32)">
      <summary>Возвращает значение с заданным порядковым номером поля.</summary>
      <returns>Значение с заданным порядковым номером поля.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="P:System.Data.Objects.DbUpdatableDataRecord.Item(System.String)">
      <summary>Получает значение с заданным именем поля.</summary>
      <returns>Значение поля.</returns>
      <param name="name">Имя поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
      <summary>Задает для поля значение <see cref="T:System.DBNull" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
      <summary>Задает значения полей в записи.</summary>
      <returns>Число полей, для которых были заданы значения.</returns>
      <param name="values">Значения поля.</param>
    </member>
    <member name="M:System.Data.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>Извлекает значение поля в виде <see cref="T:System.Data.IDataReader" />.</summary>
      <returns>Значение поля в виде <see cref="T:System.Data.IDataReader" />.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="T:System.Data.Objects.EntityFunctions">
      <summary>Предоставляет методы среды CLR, обеспечивающие канонические функции концептуальной модели в запросах LINQ to Entities.Дополнительные сведения о канонических функциях см. в разделе Canonical Functions (Entity SQL).</summary>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddDays.Дополнительные сведения о канонической функции AddDays см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="dateValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="dateValue">Допустимая дата.</param>
      <param name="addValue">Число дней для добавления к значению <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddDays.Дополнительные сведения о канонической функции AddDays см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="dateValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="dateValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число дней для добавления к значению <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddHours.Дополнительные сведения о канонической функции AddHours см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимая дата.</param>
      <param name="addValue">Число часов для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddHours.Дополнительные сведения о канонической функции AddHours см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число часов для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddHours.Дополнительные сведения о канонической функции AddHours см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимый интервал времени.</param>
      <param name="addValue">Число часов для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddMicroseconds.Дополнительные сведения о канонической функции AddMicroseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимая дата.</param>
      <param name="addValue">Число микросекунд для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddMicroseconds.Дополнительные сведения о канонической функции AddMicroseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число микросекунд для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddMicroseconds.Дополнительные сведения о канонической функции AddMicroseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимый интервал времени.</param>
      <param name="addValue">Число микросекунд для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddMilliseconds.Дополнительные сведения о канонической функции AddMilliseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимая дата.</param>
      <param name="addValue">Число миллисекунд для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddMilliseconds.Дополнительные сведения о канонической функции AddMilliseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число миллисекунд для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddMilliseconds.Дополнительные сведения о канонической функции AddMilliseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимый интервал времени.</param>
      <param name="addValue">Число миллисекунд для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddMinutes.Дополнительные сведения о канонической функции AddMinutes см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимая дата.</param>
      <param name="addValue">Число минут для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddMinutes.Дополнительные сведения о канонической функции AddMinutes см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число минут для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddMinutes.Дополнительные сведения о канонической функции AddMinutes см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимый интервал времени.</param>
      <param name="addValue">Число минут для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddMonths.Дополнительные сведения о канонической функции AddMonths см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="dateValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="dateValue">Допустимая дата.</param>
      <param name="addValue">Число месяцев для добавления к значению <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddMonths.Дополнительные сведения о канонической функции AddMonths см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="dateValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="dateValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число месяцев для добавления к значению <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddNanoseconds.Дополнительные сведения о канонической функции AddNanoseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимая дата.</param>
      <param name="addValue">Число наносекунд для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddNanoseconds.Дополнительные сведения о канонической функции AddNanoseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число наносекунд для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddNanoseconds.Дополнительные сведения о канонической функции AddNanoseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимый интервал времени.</param>
      <param name="addValue">Число наносекунд для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddSeconds.Дополнительные сведения о канонической функции AddSeconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимая дата.</param>
      <param name="addValue">Число секунд для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddSeconds.Дополнительные сведения о канонической функции AddSeconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число секунд для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddSeconds.Дополнительные сведения о канонической функции AddSeconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="timeValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="timeValue">Допустимый интервал времени.</param>
      <param name="addValue">Число секунд для добавления к значению <paramref name="timeValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddYears.Дополнительные сведения о канонической функции AddYears см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="dateValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="dateValue">Допустимая дата.</param>
      <param name="addValue">Число лет для добавления к значению <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию AddYears.Дополнительные сведения о канонической функции AddYears см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="dateValue" />, увеличенное на значение <paramref name="addValue" />.</returns>
      <param name="dateValue">Допустимое смещение даты и времени.</param>
      <param name="addValue">Число лет для добавления к значению <paramref name="dateValue" />.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AsNonUnicode(System.String)">
      <summary>Оператор LINQ to Entities, который обрабатывает входную строку в качестве строки, кодировка которой отлична от Юникода.Этот метод применяется только к запросам LINQ to Entities.</summary>
      <returns>Строка, кодировка которой отлична от Юникода.</returns>
      <param name="value">Входная строка.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.AsUnicode(System.String)">
      <summary>Оператор LINQ to Entities, который обеспечивает обработку входной строки в качестве строки, кодировка которой отлична от Юникода.Этот метод применяется только к запросам LINQ to Entities.</summary>
      <returns>Строка Юникода.</returns>
      <param name="value">Входная строка.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Вызывает каноническую функцию CreateDateTime.Сведения о канонической функции CreateDateTime см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Новая дата.</returns>
      <param name="year">Часть новой даты, содержащая год.</param>
      <param name="month">Часть новой даты, содержащая месяц.</param>
      <param name="day">Часть новой даты, содержащая день.</param>
      <param name="hour">Часть новой даты, содержащая час.</param>
      <param name="minute">Часть новой даты, содержащая минуты.</param>
      <param name="second">Часть новой даты, содержащая секунды.Обратите внимание, что этот параметр позволяет задавать доли секунды.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию CreateDateTimeOffset.Сведения о канонической функции CreateDateTimeOffset см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Новая дата.</returns>
      <param name="year">Часть новой даты, содержащая год.</param>
      <param name="month">Часть новой даты, содержащая месяц.</param>
      <param name="day">Часть новой даты, содержащая день.</param>
      <param name="hour">Часть новой даты, содержащая час.</param>
      <param name="minute">Часть новой даты, содержащая минуту.</param>
      <param name="second">Часть новой даты, содержащая секунды.Обратите внимание, что этот параметр позволяет задавать доли секунды.</param>
      <param name="timeZoneOffset">Часть новой даты, содержащая часовой пояс.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Вызывает каноническую функцию CreateTime.Сведения о канонической функции CreateTime см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Новый интервал времени.</returns>
      <param name="hour">Часть нового интервала времени, содержащая часы.</param>
      <param name="minute">Часть нового интервала времени, содержащая минуты.</param>
      <param name="second">Часть нового интервала времени, содержащая секунды.Обратите внимание, что этот параметр позволяет задавать доли секунды.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию DiffDays.Дополнительные сведения о канонической функции DiffDays см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число дней между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Допустимая дата.</param>
      <param name="dateValue2">Допустимая дата.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию DiffDays.Дополнительные сведения о канонической функции DiffDays см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число дней между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Допустимое смещение даты и времени.</param>
      <param name="dateValue2">Допустимое смещение даты и времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию DiffHours.Дополнительные сведения о канонической функции DiffHours см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число часов между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимая дата.</param>
      <param name="timeValue2">Допустимая дата.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию DiffHours.Дополнительные сведения о канонической функции DiffHours см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число часов между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимое смещение даты и времени.</param>
      <param name="timeValue2">Допустимое смещение даты и времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Вызывает каноническую функцию DiffHours.Дополнительные сведения о канонической функции DiffHours см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число часов между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимый интервал времени.</param>
      <param name="timeValue2">Допустимый интервал времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию DiffMicroseconds.Дополнительные сведения о канонической функции DiffMicroseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число микросекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимая дата.</param>
      <param name="timeValue2">Допустимая дата.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию DiffMicroseconds.Дополнительные сведения о канонической функции DiffMicroseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число микросекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимое смещение даты и времени.</param>
      <param name="timeValue2">Допустимое смещение даты и времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Вызывает каноническую функцию DiffMicroseconds.Сведения о канонической функции DiffMicroseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число микросекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимый интервал времени.</param>
      <param name="timeValue2">Допустимый интервал времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию DiffMilliseconds.Дополнительные сведения о канонической функции DiffMilliseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число миллисекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимая дата.</param>
      <param name="timeValue2">Допустимая дата.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию DiffMilliseconds.Дополнительные сведения о канонической функции DiffMilliseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число миллисекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимое смещение даты и времени.</param>
      <param name="timeValue2">Допустимое смещение даты и времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Вызывает каноническую функцию DiffMilliseconds.Сведения о канонической функции DiffMilliseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число миллисекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимый интервал времени.</param>
      <param name="timeValue2">Допустимый интервал времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию DiffMinutes.Дополнительные сведения о канонической функции DiffMinutes см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число минут между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимая дата.</param>
      <param name="timeValue2">Допустимая дата.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию DiffMinutes.Дополнительные сведения о канонической функции DiffMinutes см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число минут между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимое смещение даты и времени.</param>
      <param name="timeValue2">Допустимое смещение даты и времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Вызывает каноническую функцию DiffMinutes.Дополнительные сведения о канонической функции DiffMinutes см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число минут между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимый интервал времени.</param>
      <param name="timeValue2">Допустимый интервал времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию DiffMonths.Дополнительные сведения о канонической функции DiffMonths см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число месяцев между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Допустимая дата.</param>
      <param name="dateValue2">Допустимая дата.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию DiffMonths.Дополнительные сведения о канонической функции DiffMonths см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число месяцев между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Допустимое смещение даты и времени.</param>
      <param name="dateValue2">Допустимое смещение даты и времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию DiffNanoseconds.Дополнительные сведения о канонической функции DiffNanoseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число наносекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимая дата.</param>
      <param name="timeValue2">Допустимая дата.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию DiffNanoseconds.Дополнительные сведения о канонической функции DiffNanoseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число наносекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимое смещение даты и времени.</param>
      <param name="timeValue2">Допустимое смещение даты и времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Вызывает каноническую функцию DiffNanoseconds.Сведения о канонической функции DiffNanoseconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число наносекунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимая дата.</param>
      <param name="timeValue2">Допустимая дата.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию DiffSeconds.Дополнительные сведения о канонической функции DiffSeconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число секунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимая дата.</param>
      <param name="timeValue2">Допустимая дата.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию DiffSeconds.Дополнительные сведения о канонической функции DiffSeconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число секунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимое смещение даты и времени.</param>
      <param name="timeValue2">Допустимое смещение даты и времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Вызывает каноническую функцию DiffSeconds.Дополнительные сведения о канонической функции DiffSeconds см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число секунд между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Допустимый интервал времени.</param>
      <param name="timeValue2">Допустимый интервал времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию DiffYears.Дополнительные сведения о канонической функции DiffYears см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число лет между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Допустимая дата.</param>
      <param name="dateValue2">Допустимая дата.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию DiffYears.Дополнительные сведения о канонической функции DiffYears см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число лет между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Допустимое смещение даты и времени.</param>
      <param name="dateValue2">Допустимое смещение даты и времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию GetTotalOffsetMinutes.Дополнительные сведения о канонической функции GetTotalOffsetMinutes см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Число минут, на которое <paramref name="dateTimeOffsetArgument" /> смещено относительно времени по Гринвичу (GMT).Обычно это значение находится в диапазоне от +780 до -780 (плюс или минус 13 часов).</returns>
      <param name="dateTimeOffsetArgument">Допустимое смещение даты и времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>Вызывает каноническую функцию Left.Дополнительные сведения о канонической функции Left см. в разделе String Canonical Functions (Entity SQL).</summary>
      <returns>Число знаков с левого края <paramref name="length" /> в <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">Допустимое строковое выражение.</param>
      <param name="length">Число возвращаемых знаков.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Reverse(System.String)">
      <summary>Вызывает каноническую функцию Reverse.Дополнительные сведения о канонической функции Reverse см. в разделе String Canonical Functions (Entity SQL).</summary>
      <returns>Входная строка с обратным порядком символов.</returns>
      <param name="stringArgument">Допустимая строка.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>Вызывает каноническую функцию Right.Дополнительные сведения о канонической функции Right см. в разделе String Canonical Functions (Entity SQL).</summary>
      <returns>Число знаков с правого края <paramref name="length" /> в <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">Допустимое строковое выражение.</param>
      <param name="length">Число возвращаемых знаков.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Вызывает каноническую функцию StDev.Дополнительные сведения о канонической функции StDev см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Вызывает каноническую функцию StDev.Дополнительные сведения о канонической функции StDev см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Вызывает каноническую функцию StDev.Дополнительные сведения о канонической функции StDev см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Вызывает каноническую функцию StDev.Дополнительные сведения о канонической функции StDev см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Вызывает каноническую функцию StDev.Сведения о канонической функции StDev см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Вызывает каноническую функцию StDev.Сведения о канонической функции StDev см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Вызывает каноническую функцию StDev.Сведения о канонической функции StDev см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Вызывает каноническую функцию StDev.Сведения о канонической функции StDev см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Вызывает каноническую функцию StDevP.Дополнительные сведения о канонической функции StDevP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Вызывает каноническую функцию StDevP.Дополнительные сведения о канонической функции StDevP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Вызывает каноническую функцию StDevP.Дополнительные сведения о канонической функции StDevP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Вызывает каноническую функцию StDevP.Дополнительные сведения о канонической функции StDevP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Вызывает каноническую функцию StDevP.Сведения о канонической функции StDevP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Вызывает каноническую функцию StDevP.Сведения о канонической функции StDevP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Вызывает каноническую функцию StDevP.Сведения о канонической функции StDevP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Вызывает каноническую функцию StDevP.Сведения о канонической функции StDevP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Стандартное статистическое отклонение заполнения входной коллекции.</returns>
      <param name="collection">Набор числовых значений.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию Truncate.Дополнительные сведения о канонической функции Truncate см. в разделе  Math Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="value" />, усеченное до длины или точности, заданной параметром <paramref name="digits" />.</returns>
      <param name="value">Усекаемое число.</param>
      <param name="digits">Длина или точность усечения.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Вызывает каноническую функцию Truncate.Дополнительные сведения о канонической функции Truncate см. в разделе  Math Canonical Functions (Entity SQL).</summary>
      <returns>Значение <paramref name="value" />, усеченное до длины или точности, заданной параметром <paramref name="digits" />.</returns>
      <param name="value">Усекаемое число.</param>
      <param name="digits">Длина или точность усечения.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>Вызывает каноническую функцию TruncateTime.Дополнительные сведения о канонической функции TruncateTime см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Входная дата без части, содержащей время.</returns>
      <param name="dateValue">Усекаемая дата.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>Вызывает каноническую функцию TruncateTime.Дополнительные сведения о канонической функции TruncateTime см. в разделе Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>Входная дата без части, содержащей время.</returns>
      <param name="dateValue">Усекаемое смещение даты и времени.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Вызывает каноническую функцию Var.Дополнительные сведения о канонической функции Var см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Вызывает каноническую функцию Var.Дополнительные сведения о канонической функции Var см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Вызывает каноническую функцию Var.Дополнительные сведения о канонической функции Var см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Вызывает каноническую функцию Var.Дополнительные сведения о канонической функции Var см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Вызывает каноническую функцию Var.Дополнительные сведения о канонической функции Var см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Вызывает каноническую функцию Var.Дополнительные сведения о канонической функции Var см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Вызывает каноническую функцию Var.Дополнительные сведения о канонической функции Var см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Вызывает каноническую функцию Var.Дополнительные сведения о канонической функции Var см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия, рассчитанная для всех значений в указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Вызывает каноническую функцию VarP.Дополнительные сведения о канонической функции VarP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Вызывает каноническую функцию VarP.Дополнительные сведения о канонической функции VarP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Вызывает каноническую функцию VarP.Дополнительные сведения о канонической функции VarP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Вызывает каноническую функцию VarP.Дополнительные сведения о канонической функции VarP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Вызывает каноническую функцию VarP.Дополнительные сведения о канонической функции VarP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Вызывает каноническую функцию VarP.Дополнительные сведения о канонической функции VarP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Вызывает каноническую функцию VarP.Дополнительные сведения о канонической функции VarP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Вызывает каноническую функцию VarP.Дополнительные сведения о канонической функции VarP см. в разделе Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>Статистическая дисперсия заполнения указанной коллекции.</returns>
      <param name="collection">Набор значений, для которых будет вычислена дисперсия.</param>
    </member>
    <member name="T:System.Data.Objects.IObjectSet`1">
      <summary>Обеспечивает функциональные возможности для изменения набора объектов данных.</summary>
      <typeparam name="TEntity">Тип объекта сущности, возвращаемого запросом.</typeparam>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.AddObject(`0)">
      <summary>Уведомляет набор, что к набору нужно добавить объект, представляющий новую сущность.</summary>
      <param name="entity">Новый объект для добавления в набор.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.Attach(`0)">
      <summary>Уведомляет набор, что к набору нужно добавить объект, представляющий текущую сущность.</summary>
      <param name="entity">Существующий объект для добавления в набор.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>Уведомляет набор о том, что из набора нужно удалить объект, представляющий имеющуюся сущность. </summary>
      <param name="entity">Существующий объект для удаления из набора.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.Detach(`0)">
      <summary>Уведомляет набор о том, что от набора нужно отсоединить объект, представляющий имеющуюся сущность.</summary>
      <param name="entity">Объект, который необходимо отсоединить от набора.</param>
    </member>
    <member name="T:System.Data.Objects.MergeOption">
      <summary>Определяет, как объекты, загружаемые в контекст объектов, объединяются с объектами, которые уже находятся в этом контексте объектов. </summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.AppendOnly">
      <summary>Объекты, которые уже существуют в контексте объекта, не загружаются из источника данных.Таково поведение по умолчанию для запросов или при вызове метода <see cref="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)" /> класса <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.OverwriteChanges">
      <summary>Объекты всегда загружаются из источника данных.Любые изменения в свойствах объектов в контексте объектов перекрываются значениями из источника данных.</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.PreserveChanges">
      <summary>В версии Entity Framework 3.5 SP1 неизмененные свойства объектов в контексте объекта перезаписываются со значениями сервера. </summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.NoTracking">
      <summary>Объекты поддерживаются в состоянии <see cref="F:System.Data.EntityState.Detached" /> и не отслеживаются в <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="T:System.Data.Objects.ObjectContext">
      <summary>Обеспечивает средства обработки запросов и работы с данными сущности как с объектами. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ObjectContext" /> с заданным подключением.Во время построения рабочая область метаданных извлекается из объекта <see cref="T:System.Data.EntityClient.EntityConnection" />.</summary>
      <param name="connection">Объект <see cref="T:System.Data.EntityClient.EntityConnection" />, содержащий ссылки на модель и подключение к источнику данных.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="connection" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="connection" /> недопустимо.— или —Недопустимая рабочая область метаданных. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ObjectContext" /> с заданным подключением и именем контейнера сущностей.</summary>
      <param name="connection">Объект <see cref="T:System.Data.EntityClient.EntityConnection" />, содержащий ссылки на модель и подключение к источнику данных.</param>
      <param name="defaultContainerName">Имя контейнера сущностей по умолчанию.Если задание <paramref name="defaultContainerName" /> осуществляется посредством данного метода, это свойство становится доступным только для чтения.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="connection" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="connection" /> или <paramref name="defaultContainerName" /> либо рабочая область метаданных недопустимы.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ObjectContext" /> с заданной строкой подключения и именем контейнера сущностей по умолчанию.</summary>
      <param name="connectionString">Строка подключения, которая, кроме того, обеспечивает доступ к метаданным.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="connectionString" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="connectionString" /> недопустимо.— или —Недопустимая рабочая область метаданных. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ObjectContext" /> с заданной строкой подключения и именем контейнера сущностей.  </summary>
      <param name="connectionString">Строка подключения, которая, кроме того, обеспечивает доступ к метаданным.</param>
      <param name="defaultContainerName">Имя контейнера сущностей по умолчанию.Если задание <paramref name="defaultContainerName" /> осуществляется посредством данного метода, это свойство становится доступным только для чтения.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="connectionString" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="connectionString" /> или <paramref name="defaultContainerName" /> либо рабочая область метаданных недопустимы.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AcceptAllChanges">
      <summary>Принимает все изменения, внесенные в объекты в данном контексте объекта.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>Добавляет объект в контекст объекта. </summary>
      <param name="entitySetName">Представляет имя набора сущностей, которое можно уточнить по имени контейнера сущностей. </param>
      <param name="entity">Объект <see cref="T:System.Object" /> для добавления.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="entity" /> — null. — или —Имя <paramref name="entitySetName" /> не уточнено.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>Задает свойство <see cref="P:System.Data.Objects.ObjectStateEntry.CurrentValues" /> объекта <see cref="T:System.Data.Objects.ObjectStateEntry" />, совпадающее со значениями свойств предоставленного объекта.</summary>
      <returns>Обновленный объект.</returns>
      <param name="entitySetName">Имя набора сущностей, к которому принадлежит объект.</param>
      <param name="currentEntity">Отсоединенный объект, к исходному объекту которого нужно применить обновления свойств.</param>
      <typeparam name="TEntity">Тип сущности объекта.</typeparam>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="entitySetName" /> или <paramref name="current" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Когда набор сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> из параметра <paramref name="entitySetName" /> не совпадает с набором сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> ключа <see cref="T:System.Data.EntityKey" /> объекта.— или —Когда объект не находится в состоянии <see cref="T:System.Data.Objects.ObjectStateManager" /> или находится в состоянии <see cref="F:System.Data.EntityState.Detached" />.— или — Ключ сущности предоставленного объекта является недопустимым.</exception>
      <exception cref="T:System.ArgumentException">Когда <paramref name="entitySetName" /> равно пустой строке.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>Задает свойство <see cref="P:System.Data.Objects.ObjectStateEntry.OriginalValues" /> объекта <see cref="T:System.Data.Objects.ObjectStateEntry" />, совпадающее со значениями свойств предоставленного объекта.</summary>
      <returns>Обновленный объект.</returns>
      <param name="entitySetName">Имя набора сущностей, к которому принадлежит объект.</param>
      <param name="originalEntity">Отсоединенный объект, имеющий исходные значения, применяемые к данному объекту.</param>
      <typeparam name="TEntity">Тип объекта сущности.</typeparam>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="entitySetName" /> или <paramref name="original" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Когда набор сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> из параметра <paramref name="entitySetName" /> не совпадает с набором сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> ключа <see cref="T:System.Data.EntityKey" /> объекта.— или —Когда для объекта не удается найти <see cref="T:System.Data.Objects.ObjectStateEntry" /> в <see cref="T:System.Data.Objects.ObjectStateManager" />.— или —Когда объект находится в состоянии <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Detached" />.— или — Ключ сущности предоставленного объекта является недопустимым или имеет измененные свойства.</exception>
      <exception cref="T:System.ArgumentException">Когда <paramref name="entitySetName" /> равно пустой строке.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>Применяет изменения свойств из отсоединенного объекта к объекту, который уже был присоединен к контексту объекта.</summary>
      <param name="entitySetName">Имя набора сущностей, к которому принадлежит объект.</param>
      <param name="changed">Отсоединенный объект, к исходному объекту которого нужно применить обновления свойств.</param>
      <exception cref="T:System.ArgumentNullException">Если <paramref name="entitySetName" /> равно null или пустая строка.— или —Когда <paramref name="changed" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">Когда набор сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> из параметра <paramref name="entitySetName" /> не совпадает с набором сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> ключа <see cref="T:System.Data.EntityKey" /> объекта.— или —Сущность находится в состоянии, отличном от <see cref="F:System.Data.EntityState.Modified" /> или <see cref="F:System.Data.EntityState.Unchanged" />.— или — Исходный объект не присоединен к контексту.</exception>
      <exception cref="T:System.ArgumentException">Когда тип объекта <paramref name="changed" /> отличается от типа исходного объекта.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Attach(System.Data.Objects.DataClasses.IEntityWithKey)">
      <summary>Присоединяет объект или граф объекта к контексту объекта, если объект имеет ключ сущности. </summary>
      <param name="entity">Присоединяемый объект.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="entity" /> имеет значение null. </exception>
      <exception cref="T:System.InvalidOperationException">Недопустимый ключ сущности. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>Присоединяет объект или граф объекта к контексту объекта в конкретном наборе сущностей. </summary>
      <param name="entitySetName">Представляет имя набора сущностей, которое можно уточнить по имени контейнера сущностей. </param>
      <param name="entity">Присоединяемый объект <see cref="T:System.Object" />. </param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="entity" /> имеет значение null. </exception>
      <exception cref="T:System.InvalidOperationException">Недопустимый набор сущностей.— или —Объект имеет временный ключ. — или —Объект имеет ключ <see cref="T:System.Data.EntityKey" />, а набор <see cref="T:System.Data.Metadata.Edm.EntitySet" /> не соответствует набору сущностей, переданному в качества параметра метода.— или —Объект не имеет ключа <see cref="T:System.Data.EntityKey" />, и не предоставлено ни одного набора сущностей.— или —Объект из графа объектов имеет временный ключ <see cref="T:System.Data.EntityKey" />.— или —Объект из графа объектов имеет недопустимый ключ <see cref="T:System.Data.EntityKey" /> (например, значения в ключе не совпадают со значениями в объекте).— или —Не удалось найти набор сущностей по заданному имени <paramref name="entitySetName" /> и имени контейнера сущностей.— или —Объект из графа объектов уже существует в другом диспетчере состояния.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.CommandTimeout">
      <summary>Получает или задает значение времени ожидания (в секундах) для всех операций контекста объекта.Значение null указывает, что будет использоваться значение базового поставщика по умолчанию.</summary>
      <returns>Значение <see cref="T:System.Int32" />, которое является значением времени ожидания (в секундах).</returns>
      <exception cref="T:System.ArgumentException">Значение времени ожидания меньше 0. </exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.Connection">
      <summary>Получает подключение, используемое контекстом объекта.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DbConnection" />, представляющий собой подключение.</returns>
      <exception cref="T:System.ObjectDisposedException">Когда экземпляр <see cref="T:System.Data.Objects.ObjectContext" /> был удален.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.ContextOptions">
      <summary>Получает экземпляр <see cref="T:System.Data.Objects.ObjectContextOptions" />, содержащий параметры, которые воздействуют на поведение <see cref="T:System.Data.Objects.ObjectContext" />.</summary>
      <returns>Экземпляр <see cref="T:System.Data.Objects.ObjectContextOptions" />, содержащий параметры, которые воздействуют на поведение <see cref="T:System.Data.Objects.ObjectContext" />.  </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateDatabase">
      <summary>Создает базу данных, используя текущее подключение к источнику данных и метаданные в коллекции <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateDatabaseScript">
      <summary>Генерирует DDL-скрипт, создающий объекты схемы (таблицы, первичные ключи, внешние ключи) для метаданных в коллекции <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</summary>
      <returns>DDL-скрипт, создающий объекты схемы для метаданных в коллекции <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>Создает ключ сущности для определенного объекта или возвращает ключ сущности, если тот уже существует. </summary>
      <returns>
        <see cref="T:System.Data.EntityKey" /> объекта.</returns>
      <param name="entitySetName">Полное имя набора сущностей, к которому принадлежит объект сущности.</param>
      <param name="entity">Объект, для которого извлекается ключ сущности.Объект должен реализовывать <see cref="T:System.Data.Objects.DataClasses.IEntityWithKey" />.</param>
      <exception cref="T:System.ArgumentNullException">Один из параметров имеет значение null. </exception>
      <exception cref="T:System.ArgumentException">Когда <paramref name="entitySetName" /> пусто.— или — Когда тип объекта <paramref name="entity" /> не существует в наборе сущностей.— или —Когда имя <paramref name="entitySetName" /> является неполным.</exception>
      <exception cref="T:System.InvalidOperationException">Ключ сущности невозможно построить на основе предоставленных параметров.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObject``1">
      <summary>Создает и возвращает экземпляр запрашиваемого типа.</summary>
      <returns>Экземпляр запрашиваемого типа <paramref name="T" /> или экземпляр производного типа, позволяющий использовать <paramref name="T" /> с Entity Framework.Возвращаемый объект является экземпляром запрашиваемого типа или экземпляром производного типа, который позволяет использовать запрашиваемый тип с Entity Framework.</returns>
      <typeparam name="T">Тип возвращаемого объекта.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObjectSet``1">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Objects.ObjectSet`1" />, используемый для запроса, добавления, изменения и удаления объектов указанного типа сущности.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectSet`1" />.</returns>
      <typeparam name="TEntity">Тип сущности запрошенного объекта <see cref="T:System.Data.Objects.ObjectSet`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">Когда свойство <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> не задано для <see cref="T:System.Data.Objects.ObjectContext" />.— или —Когда заданный тип относится к более чем одному набору сущностей.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Objects.ObjectSet`1" />, используемый для запроса, добавления, изменения и удаления объектов указанного типа с заданным именем набора сущностей.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectSet`1" />.</returns>
      <param name="entitySetName">Имя набора сущностей для возвращенного объекта <see cref="T:System.Data.Objects.ObjectSet`1" />.Данная строка подлежит уточнению посредством указанного по умолчанию имени контейнера, если свойство <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> не задано в <see cref="T:System.Data.Objects.ObjectContext" />.</param>
      <typeparam name="TEntity">Тип сущности запрошенного объекта <see cref="T:System.Data.Objects.ObjectSet`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">Когда набор сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> из параметра <paramref name="entitySetName" /> не совпадает с набором сущностей <see cref="T:System.Data.Metadata.Edm.EntitySet" /> ключа <see cref="T:System.Data.EntityKey" /> объекта.— или —Если свойство <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> не задается на <see cref="T:System.Data.Objects.ObjectContext" />, а имя не задано как часть параметра <paramref name="entitySetName" />.— или —Когда заданный тип относится к более чем одному набору сущностей.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Создает эквивалентный тип, который можно использовать с Entity Framework для каждого типа в предоставленном перечислении.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Создает объект <see cref="T:System.Data.Objects.ObjectQuery`1" /> в текущем контексте объекта с помощью указанной строки запроса.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectQuery`1" /> указанного типа.</returns>
      <param name="queryString">Строка запроса, которую необходимо выполнить.</param>
      <param name="parameters">Параметры для передачи в запрос.</param>
      <typeparam name="T">Тип сущности возвращенного объекта <see cref="T:System.Data.Objects.ObjectQuery`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="queryString" /> или <paramref name="parameters" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DatabaseExists">
      <summary>Проверяет, существует ли в источнике данных база данных, указанная в качестве базы данных в текущем подключении к источнику данных. </summary>
      <returns>Значение true, если база данных существует.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.DefaultContainerName">
      <summary>Возвращает или задает имя контейнера по умолчанию.</summary>
      <returns>Объект <see cref="T:System.String" />, являющийся именем контейнера по умолчанию. </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DeleteDatabase">
      <summary>Удаляет базу данных, указанную в качестве базы данных в текущем подключении к источнику данных.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>Помечает объект для удаления. </summary>
      <param name="entity">Объект, задающий удаляемую сущность.Объект может находиться в любом состоянии, кроме <see cref="F:System.Data.EntityState.Detached" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Detach(System.Object)">
      <summary>Удаляет объект из контекста объекта.</summary>
      <param name="entity">Отсоединяемый объект.Удаляется только <paramref name="entity" />; при наличии связанных объектов, отслеживаемых тем же <see cref="T:System.Data.Objects.ObjectStateManager" />, они не будут автоматически отсоединены.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="entity" /> имеет значение null. </exception>
      <exception cref="T:System.InvalidOperationException">Сущность <paramref name="entity" /> не ассоциирована с этим контекстом <see cref="T:System.Data.Objects.ObjectContext" /> (например, она вновь создана и еще не ассоциирована с каким-либо контекстом, или была получена через какой-либо другой контекст, или уже была отсоединена).</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DetectChanges">
      <summary>Обеспечивает синхронизацию изменений <see cref="T:System.Data.Objects.ObjectStateEntry" /> с изменениями во всех объектах, отслеживание которых производится посредством <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Dispose">
      <summary>Освобождает ресурсы, используемые контекстом объекта.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>Освобождает ресурсы, используемые контекстом объекта.</summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые); значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])">
      <summary>Выполняет данную хранимую процедуру или функцию, определенную в источнике данных и выраженную в концептуальной модели (с применением указанных параметров и команды слияния).Возвращает типизированный объект <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectResult`1" /> для данных, возвращенных хранимой процедурой.</returns>
      <param name="functionName">Имя хранимой процедуры или функции.Имя может содержать имя контейнера, например &lt;Container Name&gt;.&lt;Function Name&gt;.Если имя контейнера по умолчанию известно, требуется только имя функции.</param>
      <param name="mergeOption">Значение из перечисления <see cref="T:System.Data.Objects.MergeOption" />, используемое для выполнения запроса. </param>
      <param name="parameters">Массив объектов <see cref="T:System.Data.Objects.ObjectParameter" />.</param>
      <typeparam name="TElement">Тип сущности объекта <see cref="T:System.Data.Objects.ObjectResult`1" />, возвращаемого при выполнении функции в отношении источника данных.Данный тип должен реализовывать <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />.</typeparam>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="function" /> имеет значение null или пуст — или —Параметр <paramref name="function" /> не найден.</exception>
      <exception cref="T:System.InvalidOperationException">Средство чтения сущностей не поддерживает эту функцию <paramref name="function" />.— или —Несоответствие типов между средством чтения и функцией <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Выполняет хранимую процедуру или функцию, определенную в источнике данных и сопоставленную в концептуальной модели (с применением указанных параметров).Возвращает типизированный объект <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectResult`1" /> для данных, возвращенных хранимой процедурой.</returns>
      <param name="functionName">Имя хранимой процедуры или функции.Имя может содержать имя контейнера, например &lt;Container Name&gt;.&lt;Function Name&gt;.Если имя контейнера по умолчанию известно, требуется только имя функции.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Data.Objects.ObjectParameter" />.</param>
      <typeparam name="TElement">Тип сущности объекта <see cref="T:System.Data.Objects.ObjectResult`1" />, возвращаемого при выполнении функции в отношении источника данных.Данный тип должен реализовывать <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />.</typeparam>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="function" /> имеет значение null или пуст — или —Параметр <paramref name="function" /> не найден.</exception>
      <exception cref="T:System.InvalidOperationException">Средство чтения сущностей не поддерживает эту функцию <paramref name="function" />.— или —Несоответствие типов между средством чтения и функцией <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Выполняет хранимую процедуру или функцию, определенную в источнике данных и выраженную в концептуальной модели; отменяет любые результаты, возвращенные функцией; возвращает количество строк, обработанных при выполнении команды.</summary>
      <returns>Количество обработанных строк.</returns>
      <param name="functionName">Имя хранимой процедуры или функции.Имя может содержать имя контейнера, например &lt;Container Name&gt;.&lt;Function Name&gt;.Если имя контейнера по умолчанию известно, требуется только имя функции.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Data.Objects.ObjectParameter" />.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="function" /> имеет значение null или пуст — или —Параметр <paramref name="function" /> не найден.</exception>
      <exception cref="T:System.InvalidOperationException">Средство чтения сущностей не поддерживает эту функцию <paramref name="function" />.— или —Несоответствие типов между средством чтения и функцией <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
      <summary>Выполняет произвольную команду непосредственно в отношении источника данных с помощью существующего подключения.</summary>
      <returns>Количество обработанных строк.</returns>
      <param name="commandText">Выполняемая команда на языке источника данных.</param>
      <param name="parameters">Массив параметров для передачи команде.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>Выполняет запрос непосредственно в отношении источника данных, возвращающего последовательность типизированных результатов. </summary>
      <returns>Перечисление объектов типа <paramref name="TResult" />.</returns>
      <param name="commandText">Выполняемая команда на языке источника данных.</param>
      <param name="parameters">Массив параметров для передачи команде.</param>
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])">
      <summary>Выполняет запрос непосредственно в отношении источника данных и возвращает последовательность типизированных результатов.Укажите набор сущностей и параметр слияния, посредством которых результаты запроса можно будет отслеживать в качестве сущностей.</summary>
      <returns>Перечисление объектов типа <paramref name="TResult" />.</returns>
      <param name="commandText">Выполняемая команда на языке источника данных.</param>
      <param name="entitySetName">Набор сущностей типа <paramref name="TResult" />.Без указания имени набора сущностей отслеживания результатов не будет.</param>
      <param name="mergeOption">Значение из перечисления <see cref="T:System.Data.Objects.MergeOption" />, используемое для выполнения запроса.Значение по умолчанию — <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
      <param name="parameters">Массив параметров для передачи команде.</param>
      <typeparam name="TEntity"></typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>Возвращает все существующие типы прокси.</summary>
      <returns>Перечисление <see cref="T:System.Collections.Generic.IEnumerable`1" /> всех существующих типов прокси.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetObjectByKey(System.Data.EntityKey)">
      <summary>Возвращает объект, имеющий указанный ключ сущности.</summary>
      <returns>Объект <see cref="T:System.Object" />, являющийся экземпляром типа сущности.</returns>
      <param name="key">Ключ объекта, который нужно найти.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="key" /> — null.</exception>
      <exception cref="T:System.Data.ObjectNotFoundException">Объект не найден ни в объекте <see cref="T:System.Data.Objects.ObjectStateManager" />, ни в источнике данных.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>Возвращает тип сущности POCO, связанной с прокси-объектом заданного типа.</summary>
      <returns>Тип <see cref="T:System.Type" /> связанной сущности POCO.</returns>
      <param name="type">Объект <see cref="T:System.Type" /> прокси-объекта.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>Явным образом загружает объект, связанный с предоставленным объектом, посредством заданного свойства навигации и параметра слияния по умолчанию. </summary>
      <param name="entity">Сущность, для которой необходимо загрузить связанные объекты.</param>
      <param name="navigationProperty">Имя свойства навигации, возвращающего связанные объекты для загрузки.</param>
      <exception cref="T:System.InvalidOperationException">Когда <paramref name="entity" /> находится в состоянии <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> или <see cref="F:System.Data.EntityState.Deleted" />.— или —Если <paramref name="entity" /> присоединен к другому экземпляру <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)">
      <summary>Явным образом загружает объект, связанный с предоставленным объектом, посредством заданного свойства навигации и указанного параметра слияния. </summary>
      <param name="entity">Сущность, для которой необходимо загрузить связанные объекты.</param>
      <param name="navigationProperty">Имя свойства навигации, возвращающего связанные объекты для загрузки.</param>
      <param name="mergeOption">Значение <see cref="T:System.Data.Objects.MergeOption" />, используемое при загрузке связанных объектов.</param>
      <exception cref="T:System.InvalidOperationException">Когда <paramref name="entity" /> находится в состоянии <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> или <see cref="F:System.Data.EntityState.Deleted" />.— или —Если <paramref name="entity" /> присоединен к другому экземпляру <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Явным образом загружает объект, связанный с предоставленным объектом, посредством заданного запроса LINQ и параметра слияния по умолчанию. </summary>
      <param name="entity">Исходный объект, для которого необходимо загрузить связанные объекты.</param>
      <param name="selector">Выражение LINQ, определяющее связанные объекты для загрузки.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentException">Когда <paramref name="selector" /> не предоставляет допустимый входной параметр.</exception>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Когда <paramref name="entity" /> находится в состоянии <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> или <see cref="F:System.Data.EntityState.Deleted" />.— или —Если <paramref name="entity" /> присоединен к другому экземпляру <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)">
      <summary>Явным образом загружает объект, связанный с предоставленным объектом, посредством заданного запроса LINQ и указанного параметра слияния. </summary>
      <param name="entity">Исходный объект, для которого необходимо загрузить связанные объекты.</param>
      <param name="selector">Выражение LINQ, определяющее связанные объекты для загрузки.</param>
      <param name="mergeOption">Значение <see cref="T:System.Data.Objects.MergeOption" />, используемое при загрузке связанных объектов.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentException">Когда <paramref name="selector" /> не предоставляет допустимый входной параметр.</exception>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Когда <paramref name="entity" /> находится в состоянии <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> или <see cref="F:System.Data.EntityState.Deleted" />.— или —Если <paramref name="entity" /> присоединен к другому экземпляру <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.MetadataWorkspace">
      <summary>Получает рабочую область метаданных, используемую контекстом объекта. </summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, связанный с этим объектом <see cref="T:System.Data.Objects.ObjectContext" />.</returns>
    </member>
    <member name="E:System.Data.Objects.ObjectContext.ObjectMaterialized">
      <summary>Возникает при создании нового объекта сущности на основании данных в источнике данных в составе операции загрузки или запроса. </summary>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.ObjectStateManager">
      <summary>Получает диспетчер состояния объекта, используемый контекстом объекта для отслеживания изменений объекта.</summary>
      <returns>Хранилище <see cref="T:System.Data.Objects.ObjectStateManager" />, используемое данной службой <see cref="T:System.Data.Objects.ObjectContext" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.QueryProvider">
      <summary>Получает поставщик запроса LINQ, связанного с контекстом данного объекта.</summary>
      <returns>Экземпляр <see cref="T:System.Linq.IQueryProvider" />, используемый контекстом данного объекта.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>Обновляет коллекцию объектов в контексте объекта, используя данные из источника данных. </summary>
      <param name="refreshMode">Значение <see cref="T:System.Data.Objects.RefreshMode" />, которое указывает, перезаписываются ли изменения свойств в контексте объекта значениями свойств из источника данных.</param>
      <param name="collection">Обновляемая коллекция объектов <see cref="T:System.Collections.IEnumerable" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимый параметр <paramref name="refreshMode" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="collection" /> пуст. — или — Объект не присоединен к контексту. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Object)">
      <summary>Обновляет какой-либо объект в контексте объекта, используя данные из источника данных. </summary>
      <param name="refreshMode">Одно из значений <see cref="T:System.Data.Objects.RefreshMode" />, которое задает режим, используемый для обновления <see cref="T:System.Data.Objects.ObjectStateManager" />.</param>
      <param name="entity">Обновляемый объект. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимый параметр <paramref name="refreshMode" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="collection" /> пуст. — или — Объект не присоединен к контексту. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges">
      <summary>Сохраняет все обновления в источнике данных и сбрасывает отслеживание изменений в контексте объекта.</summary>
      <returns>Количество объектов в состоянии <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" /> или <see cref="F:System.Data.EntityState.Deleted" /> на момент вызова метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />.</returns>
      <exception cref="T:System.Data.OptimisticConcurrencyException">В источнике данных произошло нарушение оптимистичного параллелизма.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>Сохраняет все обновления в источнике данных и при необходимости сбрасывает отслеживание изменений в контексте объекта.</summary>
      <returns>Количество объектов в состоянии <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" /> или <see cref="F:System.Data.EntityState.Deleted" /> на момент вызова метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />.</returns>
      <param name="acceptChangesDuringSave">Этот параметр необходим для поддержки транзакций на стороне клиента.Если он имеет значение true, сброс отслеживания изменений во всех объектах производится по завершении работы <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" />.Если значение параметра равно false, необходимо вызвать метод <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChanges" /> по окончании работы <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" />.</param>
      <exception cref="T:System.Data.OptimisticConcurrencyException">Произошло нарушение оптимистической блокировки.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)">
      <summary>Сохраняет все обновления в источнике данных, используя указанные параметры <see cref="T:System.Data.Objects.SaveOptions" />.</summary>
      <returns>Количество объектов в состоянии <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" /> или <see cref="F:System.Data.EntityState.Deleted" /> на момент вызова метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />.</returns>
      <param name="options">Значение <see cref="T:System.Data.Objects.SaveOptions" />, определяющее поведение операции.</param>
      <exception cref="T:System.Data.OptimisticConcurrencyException">Произошло нарушение оптимистической блокировки.</exception>
    </member>
    <member name="E:System.Data.Objects.ObjectContext.SavingChanges">
      <summary>Возникает при сохранении изменений в источнике данных. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>Преобразует объект <see cref="T:System.Data.Common.DbDataReader" />, содержащий строки данных сущности, в объекты запрошенного типа сущности.</summary>
      <returns>Перечисление объектов типа <paramref name="TResult" />.</returns>
      <param name="reader">Объект <see cref="T:System.Data.Common.DbDataReader" />, содержащий данные сущности для преобразования в объекты сущности.</param>
      <typeparam name="TElement"></typeparam>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="reader" /> равняется null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)">
      <summary>Преобразует объект <see cref="T:System.Data.Common.DbDataReader" />, содержащий строки данных сущности, в объекты запрошенного типа сущности (в определенном наборе сущностей и с применением указанного параметра слияния).</summary>
      <returns>Перечисление объектов типа <paramref name="TResult" />.</returns>
      <param name="reader">Объект <see cref="T:System.Data.Common.DbDataReader" />, содержащий данные сущности для преобразования в объекты сущности.</param>
      <param name="entitySetName">Набор сущностей типа <paramref name="TResult" />.</param>
      <param name="mergeOption">Объект <see cref="T:System.Data.Objects.MergeOption" />, используемый при добавлении преобразованных объектов в контекст объекта.Значение по умолчанию — <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="reader" /> равняется null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Когда предоставленный <paramref name="mergeOption" /> не является допустимым значением <see cref="T:System.Data.Objects.MergeOption" />.</exception>
      <exception cref="T:System.InvalidOperationException">Когда предоставленный <paramref name="entitySetName" /> не является допустимым набором сущностей для типа <paramref name="TResult" />. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.TryGetObjectByKey(System.Data.EntityKey,System.Object@)">
      <summary>Возвращает объект, имеющий указанный ключ сущности.</summary>
      <returns>true, если объект был успешно извлечен.Значение false, если параметр <paramref name="key" /> является временным, подключение равно null или значение <paramref name="value" /> равно null.</returns>
      <param name="key">Ключ объекта, который нужно найти.</param>
      <param name="value">При возвращении данного метода содержит объект.</param>
      <exception cref="T:System.ArgumentException">Несовместимые метаданные для <paramref name="key" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение null;</exception>
    </member>
    <member name="T:System.Data.Objects.ObjectContextOptions">
      <summary>Определяет параметры, воздействующие на поведение <see cref="T:System.Data.Objects.ObjectContext" />. </summary>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>Получает или задает логическое значение, которое определяет, происходит ли автоматическая загрузка связанных объектов при осуществлении доступа к какому-либо свойству навигации.</summary>
      <returns>Значение <see cref="T:System.Boolean" />, равное true, если разрешена "неспешная" загрузка; в противном случае значение равно false.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>Получает или задает логическое значение, которое определяет, создаются ли экземпляры прокси для пользовательских классов данных, игнорирующих сохраняемость. </summary>
      <returns>Значение <see cref="T:System.Boolean" />, равное true при создании прокси; в противном случае значение равно false.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>Получает или задает значение <see cref="T:System.Boolean" />, которое определяет, использовать ли традиционное поведение <see cref="F:System.Data.Objects.MergeOption.PreserveChanges" />. </summary>
      <returns>Значение равно true, если необходимо использовать традиционное поведение <see cref="F:System.Data.Objects.MergeOption.PreserveChanges" />; в противном случае значение равно false.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectMaterializedEventArgs">
      <summary>Содержит данные события <see cref="E:System.Data.Objects.ObjectContext.ObjectMaterialized" />.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>Получает созданный объект сущности.</summary>
      <returns>Созданный объект сущности.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectMaterializedEventHandler">
      <summary>Представляет метод, обрабатывающий событие <see cref="E:System.Data.Objects.ObjectContext.ObjectMaterialized" /> класса <see cref="T:System.Data.Objects.ObjectContext" />.</summary>
      <param name="sender">Экземпляр <see cref="T:System.Data.Objects.ObjectContext" />, вызвавший данное событие. </param>
      <param name="e">Объект <see cref="T:System.Data.Objects.ObjectMaterializedEventArgs" />, содержащий данные о событии. </param>
    </member>
    <member name="T:System.Data.Objects.ObjectParameter">
      <summary>Представляет параметр запроса, передаваемый запросу объектов. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ObjectParameter" /> с помощью указанного имени и значения. </summary>
      <param name="name">Имя параметра.Это имя не должно содержать токен параметра "@", используемый в операторах Entity SQL, а только фактическое имя.Первый символ выражения должен быть буквой.Все последующие символы должны быть буквами, цифрами или символами подчеркивания (_).</param>
      <param name="value">Исходное значение (и по существу тип) параметра.</param>
      <exception cref="T:System.ArgumentNullException">Если значение любого из аргументов равно null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Если аргумент имени имеет недопустимое значение.Имена параметров должны начинаться с буквы и могут состоять из букв, цифр и символов подчеркивания.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ObjectParameter" /> с заданными именем и типом. </summary>
      <param name="name">Имя параметра.Это имя не должно содержать токен параметра "@", используемый в операторах Entity SQL, а только фактическое имя.Первый символ выражения должен быть буквой.Все последующие символы должны быть буквами, цифрами или символами подчеркивания (_).</param>
      <param name="type">CLR-тип параметра.</param>
      <exception cref="T:System.ArgumentNullException">Если значение любого из аргументов равно null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Если аргумент имени имеет недопустимое значение.Имена параметров должны начинаться с буквы и могут состоять из букв, цифр и символов подчеркивания.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.Name">
      <summary>Получает имя параметра, которое может быть задано только через конструктор.</summary>
      <returns>Имя параметра, которое может быть задано только через конструктор.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.ParameterType">
      <summary>Получает тип параметра.</summary>
      <returns>Тип <see cref="T:System.Type" /> параметра.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.Value">
      <summary>Получает или задает значение параметра.</summary>
      <returns>Значение параметра.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectParameterCollection">
      <summary>Представляет параметры запроса в виде объектов <see cref="T:System.Data.Objects.ObjectParameter" />, определенных в <see cref="T:System.Data.Objects.ObjectQuery`1" />. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Add(System.Data.Objects.ObjectParameter)">
      <summary>Добавляет в коллекцию заданный объект <see cref="T:System.Data.Objects.ObjectParameter" />.</summary>
      <param name="parameter">Параметр, добавляемый в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name=" parameter" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Аргумент <paramref name="parameter" /> уже присутствует в коллекции.Это поведение отличается от поведения большинства коллекций, где разрешены дублирующиеся элементы.–либо–В коллекции уже присутствует другой параметр с тем же именем, что и у аргумента <paramref name="parameter" />.Обратите внимание, что поиск не учитывает регистр.Это поведение отличается от поведения большинства коллекций и больше напоминает поведение <see cref="T:System.Collections.Generic.Dictionary" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимый тип <paramref name="parameter" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Clear">
      <summary>Удаляет из коллекции все экземпляры <see cref="T:System.Data.Objects.ObjectParameter" />.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Contains(System.Data.Objects.ObjectParameter)">
      <summary>Проверяет наличие указанного параметра <see cref="T:System.Data.Objects.ObjectParameter" /> в коллекции по ссылке.</summary>
      <returns>Возвращает значение true, если объект параметра найден в коллекции; в противном случае — значение false.  </returns>
      <param name="parameter">Объект <see cref="T:System.Data.Objects.ObjectParameter" />, который нужно найти в коллекции.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="parameter" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>Определяет, есть ли в коллекции объект <see cref="T:System.Data.Objects.ObjectParameter" /> с указанным именем.</summary>
      <returns>Возвращает значение true, если параметр с указанным именем найден в коллекции; в противном случае — значение false.</returns>
      <param name="name">Имя параметра, который нужно найти в коллекции.Это имя не должно содержать токен параметра "@", используемый в операторах Entity SQL, а только фактическое имя.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="name" /> — null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.CopyTo(System.Data.Objects.ObjectParameter[],System.Int32)">
      <summary>Позволяет копировать параметры коллекции в предоставленный массив, начиная с объекта по указанному индексу.</summary>
      <param name="array">Массив, в который копируются параметры.</param>
      <param name="index">Индекс в массиве, с которого начнется копирование параметров.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.Count">
      <summary>Получает число параметров в коллекции на данный момент.</summary>
      <returns>Число объектов <see cref="T:System.Data.Objects.ObjectParameter" />, находящихся в коллекции в данный момент.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>Предоставляет индексатор, который позволяет вызывающим объектам извлекать параметры по имени.</summary>
      <returns>Экземпляр <see cref="T:System.Data.Objects.ObjectParameter" />.</returns>
      <param name="name">Имя искомого параметра.Это имя не должно содержать токен параметра "@", используемый в операторах Entity SQL, а только фактическое имя.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр с указанным именем не найден в коллекции.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Remove(System.Data.Objects.ObjectParameter)">
      <summary>Удаляет экземпляр <see cref="T:System.Data.Objects.ObjectParameter" /> из коллекции по ссылке, если он существует в этой коллекции.  </summary>
      <returns>Возвращает значение true, если объект параметра найден и удален из коллекции; в противном случае — значение false. </returns>
      <param name="parameter">Объект, удаляемый из коллекции.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="parameter" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, которое определяет, является ли коллекция доступной только для чтения.</summary>
      <returns>Логическое значение true, если коллекция доступна только для чтения; если коллекцию можно изменять — значение false.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает типизированный перечислитель по коллекции. </summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.IEnumerator`1" /> типа <see cref="T:System.Data.Objects.ObjectParameter" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает нетипизированный перечислитель по коллекции. </summary>
      <returns>Экземпляр <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectQuery">
      <summary>Реализует общие функции запросов относительно модели концептуальной модели с использованием как LINQ to Entities, так и <see cref="T:System.Data.Objects.ObjectQuery`1" />.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.CommandText">
      <summary>Возвращает текст команды запроса.</summary>
      <returns>Значение типа string.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Context">
      <summary>Возвращает контекст объекта, связанный с данным запросом объектов.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectContext" />, связанный с данным экземпляром <see cref="T:System.Data.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.EnablePlanCaching">
      <summary>Получает или задает значение, указывающее, должен ли быть кэширован план запроса.</summary>
      <returns>Значение, указывающее, должен ли быть кэширован план запроса.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.Execute(System.Data.Objects.MergeOption)">
      <summary>Выполняет нетипизированный запрос объектов с указанным параметром слияния.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectResult`1" />, содержащий коллекцию объектов сущности, возвращенных запросом.</returns>
      <param name="mergeOption">Значение из перечисления <see cref="T:System.Data.Objects.MergeOption" />, используемое для выполнения запроса.Значение по умолчанию — <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.GetResultType">
      <summary>Возвращает сведения о результирующем типе запроса.</summary>
      <returns>Значение <see cref="T:System.Data.Metadata.Edm.TypeUsage" />, которое содержит сведения об результирующем типе запроса.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.MergeOption">
      <summary>Получает или задает способ добавления к контексту объекта объектов, возвращенных запросом. </summary>
      <returns>Значение из перечисления <see cref="T:System.Data.Objects.MergeOption" /> для запроса.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Parameters">
      <summary>Получает коллекцию параметров для этого запроса объектов.</summary>
      <returns>Коллекция параметров для данного <see cref="T:System.Data.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для перебора коллекции.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Получает значение, которое показывает, содержит ли коллекция, возвращенная запросом, объекты коллекции.</summary>
      <returns>Логическое значение.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>Возвращает коллекцию в виде объекта <see cref="T:System.Collections.IList" />, используемого для привязки данных.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IList" /> объектов сущностей.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>Возвращает тип элемента результата для данного экземпляра запроса.</summary>
      <returns>Объект <see cref="T:System.Type" />, который является результирующим типом элемента для данного экземпляра запроса.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>Возвращает выражение, описывающее запрос. </summary>
      <returns>Выражение LINQ <see cref="T:System.Linq.Expressions.Expression" />, описывающее этот запрос.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>Получает поставщик LINQ <see cref="T:System.Linq.IQueryProvider" />, связанный с этим экземпляром запроса.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryProvider" />, связанный с этим экземпляром запроса.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.ToTraceString">
      <summary>Возвращает команды для выполнения относительно источника данных.</summary>
      <returns>Строка string, представляющая команды, которые запрос выполняет относительно источника данных.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectQuery`1">
      <summary>Представляет типизированный запрос по отношению к концептуальной модели в данном контексте объекта. </summary>
      <typeparam name="T">Тип сущности запроса.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" /> с помощью указанной команды языка Entity SQL в качестве начального запроса.</summary>
      <param name="commandText">Запрос Entity SQL.</param>
      <param name="context">Контекст <see cref="T:System.Data.Objects.ObjectContext" />, в котором выполняется запрос.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" />, используя указанную команду языка Entity SQL в качестве начального запроса, а также указанные параметры слияния.</summary>
      <param name="commandText">Запрос Entity SQL.</param>
      <param name="context">Контекст <see cref="T:System.Data.Objects.ObjectContext" />, в котором выполняется запрос.</param>
      <param name="mergeOption">Указывает, каким образом сущности, получаемые этим запросом, должны сливаться с сущностями, возвращенными предыдущими запросами к тому же контексту <see cref="T:System.Data.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Distinct">
      <summary>Ограничивает запрос уникальными результатами.</summary>
      <returns>Новый экземпляр объекта <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему выражением SELECT DISTINCT.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})">
      <summary>Ограничивает результаты запроса, исключая принадлежащие к результатам другого запроса объектов.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему выражением EXCEPT, основанном на указанном запросе <paramref name="query" />.</returns>
      <param name="query">Объект <see cref="T:System.Data.Objects.ObjectQuery`1" /> представляющий результаты, исключаемые из запроса.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="query" /> — null или пустая строка.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)">
      <summary>Выполняет запрос объектов с указанным параметром слияния.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectResult`1" />, содержащий коллекцию объектов сущности, возвращенных запросом.</returns>
      <param name="mergeOption">Значение из перечисления <see cref="T:System.Data.Objects.MergeOption" />, используемое для выполнения запроса.Значение по умолчанию — <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Группирует результаты запроса по заданным критериям.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" /> типа <see cref="T:System.Data.Common.DbDataRecord" />, эквивалентный первоначальному экземпляру с примененным к нему выражением GROUP BY. </returns>
      <param name="keys">Ключевые столбцы, по которым группируются результаты.</param>
      <param name="projection">Список выбранных свойств, определяющий проекцию. </param>
      <param name="parameters">Параметры (ноль или более), используемые в этом методе.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="query" /> — null или пустая строка.— или —Значение параметра <paramref name="projection" /> — null или пустая строка.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Include(System.String)">
      <summary>Задает связанные объекты, включаемые в результаты запроса.</summary>
      <returns>Новый объект <see cref="T:System.Data.Objects.ObjectQuery`1" /> с определенным путем запроса.</returns>
      <param name="path">Разделенный точками список связанных объектов, включаемых в результаты запроса.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> имеет значение empty;</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})">
      <summary>Ограничивает результаты запроса, включая только те, которые вошли в результаты другого запроса объектов. </summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему выражением INTERSECT, основанном на указанном запросе <paramref name="query" />.</returns>
      <param name="query">Объект <see cref="T:System.Data.Objects.ObjectQuery`1" />, представляющий результаты, включаемые в запрос.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="query" /> — null или пустая строка.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery`1.Name">
      <summary>Получает или задает имя данного запроса объектов.</summary>
      <returns>Значение string, представляющее имя данного объекта <see cref="T:System.Data.Objects.ObjectQuery`1" />.</returns>
      <exception cref="T:System.ArgumentException">Задаваемое значение является недопустимым.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.OfType``1">
      <summary>Ограничивает запрос результатами определенного типа.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему выражением OFTYPE.</returns>
      <typeparam name="TResultType">Тип объекта <see cref="T:System.Data.Objects.ObjectResult`1" />, возвращаемого при выполнении запроса с примененным фильтром.</typeparam>
      <exception cref="T:System.Data.EntitySqlException">Задан недопустимый тип.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Сортирует результаты запроса по заданным критериям.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему выражением ORDER BY. </returns>
      <param name="keys">Ключевые столбцы, по которым сортируются результаты.</param>
      <param name="parameters">Параметры (ноль или более), используемые в этом методе.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="keys" /> или <paramref name="parameters" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Параметром <paramref name="key" /> является пустая строка.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Ограничивает результаты запроса только теми свойствами, которые определены в заданной проекции.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" /> типа <see cref="T:System.Data.Common.DbDataRecord" />, эквивалентный первоначальному экземпляру с примененным к нему выражением SELECT. </returns>
      <param name="projection">Список выбранных свойств, определяющий проекцию.</param>
      <param name="parameters">Параметры (ноль или более), используемые в этом методе.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> имеет значение null;— или —<paramref name="parameters" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметром <paramref name="projection" /> является пустая строка.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Ограничивает результаты запроса только свойствами, заданными в проекции.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" /> типа, совместимого с определенной проекцией.Возвращаемый объект <see cref="T:System.Data.Objects.ObjectQuery`1" /> эквивалентен первоначальному экземпляру с примененным к нему выражением SELECT VALUE.</returns>
      <param name="projection">Список полей проекции.</param>
      <param name="parameters">Необязательный набор параметров запроса, которые должны быть в области действия при анализе запроса.</param>
      <typeparam name="TResultType">Тип объекта <see cref="T:System.Data.Objects.ObjectQuery`1" />, возвращаемого методом <see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> имеет значение null;— или —<paramref name="parameters" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметром <paramref name="projection" /> является пустая строка.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Сортирует результаты запроса по заданным критериям и пропускает указанное число результатов.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененными к нему выражениями ORDER BY и SKIP. </returns>
      <param name="keys">Ключевые столбцы, по которым сортируются результаты.</param>
      <param name="count">Число результатов, которые нужно пропустить.Должен быть константой или ссылкой на параметр.</param>
      <param name="parameters">Необязательный набор параметров запроса, которые должны быть в области действия при анализе запроса.</param>
      <exception cref="T:System.ArgumentNullException">Какой-либо из аргументов равен null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="keys" /> содержит пустую строку.— или —Параметр <paramref name="count" /> содержит пустую строку.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель для перебора результатов запроса.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerator`1" /> для последовательного перебора результатов.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Ограничивает результаты запроса указанным числом элементов.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему выражением TOP. </returns>
      <param name="count">Количество элементов в результатах, в виде строки. </param>
      <param name="parameters">Необязательный набор параметров запроса, которые должны быть в области действия при анализе запроса.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="count" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="count" /> содержит пустую строку.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})">
      <summary>Сочетает результаты запроса с результатами другого запроса объектов, исключая повторы. </summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему выражением UNION для добавления результатов указанного запроса <paramref name="query" />.</returns>
      <param name="query">Объект <see cref="T:System.Data.Objects.ObjectQuery`1" />, представляющий добавляемые результаты.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="query" /> — null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})">
      <summary>Сочетает результаты запроса с результатами другого запроса объектов, включая все повторы. </summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему выражением UNION ALL для добавления результатов указанного запроса <paramref name="query" />.</returns>
      <param name="query">Объект <see cref="T:System.Data.Objects.ObjectQuery`1" />, представляющий добавляемые результаты.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="query" /> — null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Ограничивает запрос результатами, соответствующими определенным критериям фильтрации.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему выражением WHERE.</returns>
      <param name="predicate">Предикат фильтра.</param>
      <param name="parameters">Параметры (ноль или более), используемые в этом методе.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> имеет значение null;— или —<paramref name="parameters" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметром <paramref name="predicate" /> является пустая строка .</exception>
    </member>
    <member name="T:System.Data.Objects.ObjectResult">
      <summary>Базовый класс для результатов запроса объектов по отношению к концептуальной модели.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.Dispose">
      <summary>Выполняет задачи, связанные с освобождением или сбросом ресурсов.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectResult.ElementType">
      <summary>При переопределении в производном типе получает тип универсального объекта <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий собой тип универсального объекта <see cref="T:System.Data.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель для перебора результатов запроса.</summary>
      <returns>Перечислитель, выполняющий перебор результатов запроса.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Получает значение, которое показывает, содержит ли коллекция, возвращенная запросом, объекты коллекции.</summary>
      <returns>Логическое значение.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>Возвращает результаты в формате, применимом для привязки данных.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IList" /> объектов сущностей.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectResult`1">
      <summary>Представляет результат запроса <see cref="T:System.Data.Objects.ObjectQuery`1" /> в виде перечисляемой коллекции объектов.</summary>
      <typeparam name="T">Тип сущности результата.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectResult`1.Dispose">
      <summary>Выполняет задачи, связанные с освобождением или сбросом ресурсов.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectResult`1.ElementType">
      <summary>Получает тип объекта <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>Объект <see cref="T:System.Type" />, который является типом результата <see cref="T:System.Data.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult`1.GetEnumerator">
      <summary>Возвращает перечислитель для перебора результатов запроса.</summary>
      <returns>Перечислитель, выполняющий перебор результатов запроса.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectSet`1">
      <summary>Представляет набор типизированных сущностей, используемый для выполнения операция создания, чтения, обновления и удаления. </summary>
      <typeparam name="TEntity">Тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.AddObject(`0)">
      <summary>Добавляет объект к контексту объекта в текущем наборе сущностей. </summary>
      <param name="entity">Добавляемый объект.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>Задает свойство <see cref="P:System.Data.Objects.ObjectStateEntry.CurrentValues" /> объекта <see cref="T:System.Data.Objects.ObjectStateEntry" />, совпадающее со значениями свойств предоставленного объекта.</summary>
      <returns>Обновленный объект.</returns>
      <param name="currentEntity">Отсоединенный объект, к исходному объекту которого нужно применить обновления свойств.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>Задает свойство <see cref="P:System.Data.Objects.ObjectStateEntry.OriginalValues" /> объекта <see cref="T:System.Data.Objects.ObjectStateEntry" />, совпадающее со значениями свойств предоставленного объекта.</summary>
      <returns>Обновленный объект.</returns>
      <param name="originalEntity">Отсоединенный объект, к исходному объекту которого нужно применить обновления свойств.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.Attach(`0)">
      <summary>Присоединяет объект или граф объектов к контексту объекта в текущем наборе сущностей. </summary>
      <param name="entity">Присоединяемый объект.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.CreateObject``1">
      <summary>Создает экземпляр заданного типа.</summary>
      <returns>Экземпляр запрошенного типа <paramref name="T" /> или экземпляр прокси-типа, соответствующего типу <paramref name="T" />.</returns>
      <typeparam name="T">Тип возвращаемого объекта.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.CreateObject">
      <summary>Создает новый объект типа сущности.</summary>
      <returns>Новый объект типа сущности или экземпляр прокси-типа, соответствующий типу сущности.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>Помечает объект для удаления. </summary>
      <param name="entity">Объект, представляющий удаляемую сущность.Объект может находиться в любом состоянии, кроме <see cref="F:System.Data.EntityState.Detached" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.Detach(`0)">
      <summary>Удаляет объект из контекста объекта.</summary>
      <param name="entity">Отсоединяемый объект.Удаляется только <paramref name="entity" />; при наличии связанных объектов, отслеживаемых тем же <see cref="T:System.Data.Objects.ObjectStateManager" />, они не будут автоматически отсоединены.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectSet`1.EntitySet">
      <summary>Получает метаданные набора сущностей, представленного данным экземпляром <see cref="T:System.Data.Objects.ObjectSet`1" />.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.EntitySet" />. </returns>
    </member>
    <member name="T:System.Data.Objects.ObjectStateEntry">
      <summary>Поддерживает информацию о состоянии и ключах объектов и отношений, а также об отслеживании изменений свойств объектов. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.AcceptChanges">
      <summary>Принимает текущие значения как исходные.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>Задает текущие значения записи, совпадающие со значениями свойств предоставленного объекта.</summary>
      <param name="currentEntity">Отсоединенный объект, который содержит обновленные значения, применяемые к данному объекту.<paramref name="currentEntity " />также может быть ключом сущности объекта.</param>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="currentEntity " /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">Когда ключ предоставленного объекта не соответствует свойству <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> объекта <see cref="T:System.Data.Objects.ObjectStateEntry" />.— или —Когда <see cref="T:System.Data.Objects.ObjectStateEntry" /> является записью <see cref="T:System.Data.EntityKey" />.— или —Когда объект не находится в <see cref="T:System.Data.Objects.ObjectStateManager." />— или — Объект находится в состоянии <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Deleted" /> или <see cref="F:System.Data.EntityState.Detached" />.— или —Ключ сущности предоставленного объекта является недопустимым или имеет измененные свойства.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>Задает исходные значения записи, совпадающие со значениями свойств предоставленного объекта.</summary>
      <param name="originalEntity">Отсоединенный объект, имеющий исходные значения, применяемые к данному объекту.Значение <paramref name="original" /> также может быть ключом сущности объекта.</param>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="original" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">Когда ключ предоставленного объекта не соответствует свойству <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> объекта <see cref="T:System.Data.Objects.ObjectStateEntry" />.— или —Когда <see cref="T:System.Data.Objects.ObjectStateEntry" /> является записью <see cref="T:System.Data.EntityKey" />.— или —Когда объект не находится в <see cref="T:System.Data.Objects.ObjectStateManager." />— или — Объект находится в одном из состояний <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Detached" />.— или —Ключ сущности предоставленного объекта является недопустимым или имеет измененные свойства.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ChangeState(System.Data.EntityState)">
      <summary>Изменяет состояние записи на указанное значение <see cref="T:System.Data.EntityState" />.</summary>
      <param name="state">Значение <see cref="T:System.Data.EntityState" />, задаваемое для свойства <see cref="P:System.Data.Objects.ObjectStateEntry.State" /> записи.</param>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="original" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">При попытке изменить состояние на <see cref="F:System.Data.EntityState.Detached" /> из любого другого <see cref="T:System.Data.EntityState." />— или — При попытке изменить состояние ввода ключа сущности на любое состояние, кроме <see cref="F:System.Data.EntityState.Unchanged" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.CurrentValues">
      <summary>Получает текущие значения свойств объекта или отношения, связанного с этим объектом <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.CurrentValueRecord" />, содержащий текущие значения объекта или отношения, связанного с данным объектом <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.Delete">
      <summary>Обозначает сущность как удаленную.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.Entity">
      <summary>Получает объект, связанный с данным объектом <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>Объект, связанный с данным объектом <see cref="T:System.Data.Objects.ObjectStateEntry" />. </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.EntityKey">
      <summary>Получает объект <see cref="T:System.Data.EntityKey" />, связанный с <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>Объект <see cref="T:System.Data.EntityKey" />, связанный с <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.EntitySet">
      <summary>Получает объект <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> для объекта или отношения, связанного с данным <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> данного объекта <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>Возвращает имена свойств объекта, которые изменились с момента последнего вызова метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />.</summary>
      <returns>Коллекция имен <see cref="T:System.Collections.Generic.IEnumerable`1" /> как строка <see cref="T:System.String" />. </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>Получает обновляемую версию исходных значений объекта, связанного с данным объектом <see cref="T:System.Data.Objects.ObjectStateEntry" />.  </summary>
      <returns>Обновляемые исходные значения данных объекта.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.IsRelationship">
      <summary>Получает логическое значение, показывающее, представляет ли данный объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> отношение.</summary>
      <returns>Логическое значение true, если данный объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> представляет отношение; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>Получает объект <see cref="T:System.Data.Objects.ObjectStateManager" /> для этого объекта <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectStateManager" /> для данного <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.OriginalValues">
      <summary>Получает предназначенную только для чтения версию исходных значений объекта или отношения, связанного с данным объектом <see cref="T:System.Data.Objects.ObjectStateEntry" />.Для получения обновляемых исходных значений используется объект <see cref="M:System.Data.Objects.ObjectStateEntry.GetUpdatableOriginalValues" />.</summary>
      <returns>Предназначенная только для чтения версия исходных значений сущности или набора отношений, связанных с данным объектом <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.RelationshipManager">
      <summary>Возвращает экземпляр <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> объекта, представленного записью.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</returns>
      <exception cref="T:System.InvalidOperationException">Когда <see cref="T:System.Data.Objects.ObjectStateEntry" /> является записью <see cref="T:System.Data.EntityKey" />.— или —Объект находится в состоянии <see cref="F:System.Data.EntityState.Detached" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.SetModified">
      <summary>Задает для объекта или отношения состояние Modified.</summary>
      <exception cref="T:System.InvalidOperationException">Состояние не равно <see cref="F:System.Data.EntityState.Modified" /> или <see cref="F:System.Data.EntityState.Unchanged" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>Обозначает указанное свойство как измененное.</summary>
      <param name="propertyName">Имя модели EDM.</param>
      <exception cref="T:System.InvalidOperationException">Состояние не равно <see cref="F:System.Data.EntityState.Modified" /> или <see cref="F:System.Data.EntityState.Unchanged" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.State">
      <summary>Получает состояние данного <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>Состояние <see cref="T:System.Data.EntityState" />, представляющее текущее состояние объекта или отношения. </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Уведомляет диспетчер состояния об изменении сложного свойства.</summary>
      <param name="entityMemberName">Имя изменяемого свойства объекта верхнего уровня.Это свойство возвращает сложный объект.</param>
      <param name="complexObject">Сложный объект, содержащий изменяемое свойство.</param>
      <param name="complexObjectMemberName">Имя изменяемого свойства сложного объекта.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="entityMemberName" /> равно null (Nothing в Visual Basic).— или — Значение <paramref name="complexObjectMemberName" /> равно null (Nothing в Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="complexObject" /> равно null (Nothing в Visual Basic).Объекты не могут иметь сложные свойства со значением null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Уведомляет диспетчер состояния, что сложное свойство имеет ожидающее изменение.</summary>
      <param name="entityMemberName">Имя сложного свойства.Это свойство возвращает сложный объект.</param>
      <param name="complexObject">Сложный объект, содержащий изменяемое свойство.</param>
      <param name="complexObjectMemberName">Имя изменяемого свойства сложного объекта.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="entityMemberName" /> равно null (Nothing в Visual Basic).— или — Значение <paramref name="complexObjectMemberName" /> равно null (Nothing в Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="complexObject" /> равно null (Nothing в Visual Basic).Объекты не могут иметь сложные свойства со значением null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>Уведомляет диспетчер состояний об изменении свойства.</summary>
      <param name="entityMemberName">Имя измененного свойства сущности.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>Уведомляет диспетчер состояний, что свойство имеет ожидающее изменение.</summary>
      <param name="entityMemberName">Имя изменяемого свойства сущности.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>Получает объект <see cref="T:System.Data.EntityState" /> для объекта <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>Состояние <see cref="T:System.Data.EntityState" /> для объекта <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectStateManager">
      <summary>Поддерживает состояние объекта и обеспечивает управление идентификаторами для экземпляров типов сущностей и экземпляров отношений.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.#ctor(System.Data.Metadata.Edm.MetadataWorkspace)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ObjectStateManager" />. </summary>
      <param name="metadataWorkspace">Рабочая область метаданных <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, которая предоставляет информацию о сопоставлении и метаданных.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.EntityState)">
      <summary>Изменяет состояние записи <see cref="T:System.Data.Objects.ObjectStateEntry" /> для определенного объекта на указанное состояние <paramref name="entityState" />.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для предоставленной записи <paramref name="entity" />.</returns>
      <param name="entity">Объект, для которого должно быть изменено состояние.</param>
      <param name="entityState">Новое состояние объекта.</param>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="entity" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">Когда объект не отсоединен и не имеет записи в диспетчере состояния.— или —При попытке изменить состояние на <see cref="F:System.Data.EntityState.Detached" /> из любого другого <see cref="T:System.Data.EntityState." />— или — Когда <paramref name="state" /> не является допустимым значением <see cref="T:System.Data.EntityState" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.EntityState)">
      <summary>Изменяет состояние отношения между двумя объектами сущностей, заданное на основании двух связанных объектов и имени свойства навигации.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для измененного отношения.</returns>
      <param name="sourceEntity">Экземпляр объекта или объект <see cref="T:System.Data.EntityKey" /> исходной сущности с одной стороны отношения.</param>
      <param name="targetEntity">Экземпляр объекта или объект <see cref="T:System.Data.EntityKey" /> целевой сущности с другой стороны отношения.</param>
      <param name="navigationProperty">Имя свойства навигации исходного объекта <paramref name="source" />, возвращающего указанный объект <paramref name="target" />.</param>
      <param name="relationshipState">Запрошенное состояние <see cref="T:System.Data.EntityState" /> указанного отношения.</param>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="source" /> или <paramref name="target" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">При попытке изменить состояние связи на состояние, отличное от <see cref="F:System.Data.EntityState.Deleted" /> или <see cref="F:System.Data.EntityState.Detached" />, когда <paramref name="source" /> или <paramref name="target" /> находится в состоянии <see cref="F:System.Data.EntityState.Deleted" />. — или — При попытке изменить состояние связи на состояние, отличное от <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Detached" />, когда <paramref name="source" /> или <paramref name="target" /> находится в состоянии <see cref="F:System.Data.EntityState.Added" />. — или —Когда <paramref name="state" /> не является допустимым значением <see cref="T:System.Data.EntityState" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.EntityState)">
      <summary>Изменяет состояние отношения между двумя объектами сущностей, заданное на основании двух связанных объектов и свойств отношения.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для измененного отношения.</returns>
      <param name="sourceEntity">Экземпляр объекта или объект <see cref="T:System.Data.EntityKey" /> исходной сущности с одной стороны отношения.</param>
      <param name="targetEntity">Экземпляр объекта или объект <see cref="T:System.Data.EntityKey" /> целевой сущности с другой стороны отношения.</param>
      <param name="relationshipName">Имя связи.</param>
      <param name="targetRoleName">Имя роли на конце <paramref name="target" /> отношения.</param>
      <param name="relationshipState">Запрошенное состояние <see cref="T:System.Data.EntityState" /> указанного отношения.</param>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="source" /> или <paramref name="target" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">При попытке изменить состояние связи на состояние, отличное от <see cref="F:System.Data.EntityState.Deleted" /> или <see cref="F:System.Data.EntityState.Detached" />, когда <paramref name="source" /> или <paramref name="target" /> находится в состоянии <see cref="F:System.Data.EntityState.Deleted" />. — или — При попытке изменить состояние связи на состояние, отличное от <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Detached" />, когда <paramref name="source" /> или <paramref name="target" /> находится в состоянии <see cref="F:System.Data.EntityState.Added" />. — или —Когда <paramref name="state" /> не является допустимым значением <see cref="T:System.Data.EntityState" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.EntityState)">
      <summary>Изменяет состояние отношения между двумя объектами сущностей, заданное на основании двух связанных объектов и выражения LINQ, определяющего свойство навигации.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для измененного отношения.</returns>
      <param name="sourceEntity">Экземпляр объекта или объект <see cref="T:System.Data.EntityKey" /> исходной сущности с одной стороны отношения.</param>
      <param name="targetEntity">Экземпляр объекта или объект <see cref="T:System.Data.EntityKey" /> целевой сущности с другой стороны отношения.</param>
      <param name="navigationPropertySelector">Выражение LINQ, выбирающее свойство навигации исходного объекта <paramref name="source" />, возвращающего указанный объект <paramref name="target" />.</param>
      <param name="relationshipState">Запрошенное состояние <see cref="T:System.Data.EntityState" /> указанного отношения.</param>
      <typeparam name="TEntity">Тип сущности объекта <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="source" />, <paramref name="target" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> имеет неверный формат или не может возвратить свойство навигации.</exception>
      <exception cref="T:System.InvalidOperationException">При попытке изменить состояние связи на состояние, отличное от <see cref="F:System.Data.EntityState.Deleted" /> или <see cref="F:System.Data.EntityState.Detached" />, когда <paramref name="source" /> или <paramref name="target" /> находится в состоянии <see cref="F:System.Data.EntityState.Deleted" />. — или — При попытке изменить состояние связи на состояние, отличное от <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Detached" />, когда <paramref name="source" /> или <paramref name="target" /> находится в состоянии <see cref="F:System.Data.EntityState.Added" />. — или —Когда <paramref name="state" /> не является допустимым значением <see cref="T:System.Data.EntityState" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.EntityState)">
      <summary>Возвращает коллекцию объектов <see cref="T:System.Data.Objects.ObjectStateEntry" /> для объектов или отношений с заданным состоянием.</summary>
      <returns>Коллекция объектов <see cref="T:System.Data.Objects.ObjectStateEntry" /> в заданном состоянии <see cref="T:System.Data.EntityState" />.</returns>
      <param name="state">Состояние <see cref="T:System.Data.EntityState" />, которое используется для фильтрации возвращаемых объектов <see cref="T:System.Data.Objects.ObjectStateEntry" />. </param>
      <exception cref="T:System.ArgumentException">Когда <paramref name="state" /> равняется <see cref="F:System.Data.EntityState.Detached" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.EntityKey)">
      <summary>Возвращает объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для объекта или записи отношения с указанным ключом.</summary>
      <returns>Соответствующий объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для заданного <see cref="T:System.Data.EntityKey" />.</returns>
      <param name="key">Словарь <see cref="T:System.Data.EntityKey" />.  </param>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="key" /> равняется null.</exception>
      <exception cref="T:System.ArgumentException">Когда указанный <paramref name="key" /> не удается найти в диспетчере состояния.</exception>
      <exception cref="T:System.InvalidOperationException">В <see cref="T:System.Data.Objects.ObjectStateManager" /> отсутствует сущность с указанным <see cref="T:System.Data.EntityKey" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>Возвращает объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для указанного объекта.</summary>
      <returns>Соответствующий объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для заданного <see cref="T:System.Object" />.</returns>
      <param name="entity">Объект <see cref="T:System.Object" />, которому принадлежит полученный объект <see cref="T:System.Data.Objects.ObjectStateEntry" />.</param>
      <exception cref="T:System.InvalidOperationException">Сущность для указанного ключа <see cref="T:System.Object" /> отсутствует в диспетчере <see cref="T:System.Data.Objects.ObjectStateManager" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>Возвращает объект <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />, используемый указанным объектом. </summary>
      <returns>Объект <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> для заданного объекта.</returns>
      <param name="entity">Объект, для которого возвращается <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</param>
      <exception cref="T:System.InvalidOperationException">Когда <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> не может быть возвращен для указанного параметра <paramref name="entity" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>Получает рабочую область метаданных <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, связанную с этим диспетчером состояний.</summary>
      <returns>Диспетчер <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, сопоставленный с этим компонентом <see cref="T:System.Data.Objects.ObjectStateManager" />.</returns>
    </member>
    <member name="E:System.Data.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>Событие происходит при добавлении или удалении сущностей из диспетчера состояний.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.EntityKey,System.Data.Objects.ObjectStateEntry@)">
      <summary>Пытается получить объект <see cref="T:System.Data.Objects.ObjectStateEntry" />, соответствующий объекту или отношению с указанным <see cref="T:System.Data.EntityKey" />.</summary>
      <returns>Логическое значение true, если имеется соответствующий объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для данного <see cref="T:System.Data.EntityKey" />; в противном случае — значение false.</returns>
      <param name="key">Заданный объект <see cref="T:System.Data.EntityKey" />.</param>
      <param name="entry">Когда этот метод возвращает управление, он содержит объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для заданного <see cref="T:System.Data.EntityKey" />. Этот параметр передается неинициализированным.</param>
      <exception cref="T:System.ArgumentNullException">значение null (Nothing в Visual Basic) значение предоставляется для параметра <paramref name="key" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Objects.ObjectStateEntry@)">
      <summary>Пытается получить объект <see cref="T:System.Data.Objects.ObjectStateEntry" />, соответствующий указанному объекту <see cref="T:System.Object" />.</summary>
      <returns>Логическое значение true, если для заданного объекта имеется соответствующий объект <see cref="T:System.Data.Objects.ObjectStateEntry" />; в противном случае — значение false.</returns>
      <param name="entity">Объект <see cref="T:System.Object" />, которому принадлежит полученный объект <see cref="T:System.Data.Objects.ObjectStateEntry" />.</param>
      <param name="entry">После выполнения возврата этим методом содержит объект <see cref="T:System.Data.Objects.ObjectStateEntry" /> для указанного объекта <see cref="T:System.Data.EntityKey" />. Этот параметр передается в неинициализированном виде.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Objects.DataClasses.RelationshipManager@)">
      <summary>Возвращает объект <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />, используемый указанным объектом. </summary>
      <returns>Значение true, если для предоставленной сущности <paramref name="entity" /> возвращен экземпляр объекта <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />; в противном случае — значение false. </returns>
      <param name="entity">Объект, для которого возвращается <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</param>
      <param name="relationshipManager">После выполнения возврата этим методом содержит объект <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> для сущности <paramref name="entity" />.</param>
    </member>
    <member name="T:System.Data.Objects.OriginalValueRecord">
      <summary>Предоставляет доступ к исходным значениям данных объекта.</summary>
    </member>
    <member name="T:System.Data.Objects.ProxyDataContractResolver">
      <summary>Данный класс помогает преобразовать типы прокси, созданные для классов данных, игнорирующих сохраняемость, в фактические типы объектов, игнорирующих сохраняемость. </summary>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.ProxyDataContractResolver" />. </summary>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>При десериализации сопоставляет любую информацию xsi:type с фактическим типом объекта, игнорирующего сохраняемость. </summary>
      <returns>Возвращает тип, которому сопоставляется тип xsi:type.Возвращает значение null, если не был найден известный тип, соответствующий типу xsi:type.</returns>
      <param name="typeName">Информация xsi:type, предназначенная для сопоставления.</param>
      <param name="typeNamespace">Пространство имен типа xsi:type.</param>
      <param name="declaredType">Объявленный тип.</param>
      <param name="knownTypeResolver">Экземпляр класса <see cref="T:System.Data.Objects.ProxyDataContractResolver" />.</param>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>При сериализации сопоставляет фактические типы с информацией xsi:type.</summary>
      <returns>Значение true, если тип был разрешен, в противном случае — значение false.  </returns>
      <param name="dataContractType">Фактический тип объекта, игнорирующего сохраняемость.</param>
      <param name="declaredType">Объявленный тип.</param>
      <param name="knownTypeResolver">Экземпляр класса <see cref="T:System.Data.Objects.ProxyDataContractResolver" />.</param>
      <param name="typeName">При возвращении этот метод содержит список объявлений xsi:type.</param>
      <param name="typeNamespace">При возвращении данного метода содержит список использованных пространств имен.</param>
    </member>
    <member name="T:System.Data.Objects.RefreshMode">
      <summary>Указывает, сохраняются ли изменения свойств объектов, отслеживаемые службами объектов, или заменяются значениями свойств из источника данных. </summary>
    </member>
    <member name="F:System.Data.Objects.RefreshMode.ClientWins">
      <summary>Изменения свойств объектов в контексте объектов не заменяются значениями из источника данных.При следующем вызове метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> эти изменения будут переданы в источник данных.</summary>
    </member>
    <member name="F:System.Data.Objects.RefreshMode.StoreWins">
      <summary>Изменения свойств объектов в контексте объектов заменяются значениями из источника данных. </summary>
    </member>
    <member name="T:System.Data.Objects.SaveOptions">
      <summary>Задает поведение контекста объекта при вызове метода <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)" />.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.None">
      <summary>Изменения сохраняются без вызова методов <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> или <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChangesAfterSave" />.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>После сохранения изменений вызывается метод <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChangesAfterSave" />, который сбрасывает отслеживание изменений в <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>До того как изменения сохранены, метод <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> вызывается для синхронизации значений свойств объектов, прикрепленных к контексту объектов, с данными в <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.ComplexObject">
      <summary>Базовый класс для сложных типов.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.#ctor">
      <summary>Создает экземпляр <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>Уведомляет объект отслеживания изменений об изменении свойства сложного объекта.</summary>
      <param name="property">Имя измененного свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="property" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>Уведомляет объект отслеживания изменений об ожидающем изменении свойства сложного объекта.</summary>
      <param name="property">Имя изменяемого свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="property" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>Атрибут, указывающий, что свойство представляет сложное свойство.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>Создает новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute" />. </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>Атрибут, указывающий, что класс представляет сложный тип.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>Создает новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmComplexTypeAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>Атрибут, указывающий, что класс представляет тип сущности. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmEntityTypeAttribute" />. </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmFunctionAttribute">
      <summary>Атрибут, указывающий при применении к методу, что метод является прокси-методом для функции в концептуальной модели или модели хранения. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmFunctionAttribute" />.</summary>
      <param name="namespaceName">Пространство имен сопоставляемой функции.</param>
      <param name="functionName">Имя сопоставляемой функции.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmFunctionAttribute.FunctionName">
      <summary>Имя сопоставляемой функции.</summary>
      <returns>Имя сопоставляемой функции.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmFunctionAttribute.NamespaceName">
      <summary>Пространство имен сопоставляемой функции.</summary>
      <returns>Пространство имен сопоставляемой функции.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmPropertyAttribute">
      <summary>Базовый класс для атрибутов, указывающих сопоставление свойств типов на уровне объектов со свойствами типов сущностей или сложных типов в концептуальной модели.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>Определяет связь между двумя типами сущностей на основе ассоциации в концептуальной модели.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>Создает экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" />.</summary>
      <param name="relationshipNamespaceName">Имя пространства имен для ассоциации, в которой участвует эта сущность.</param>
      <param name="relationshipName">Возвращает имя связи, в которой участвует данная сущность. </param>
      <param name="role1Name">Имя роли для типа одного из окончаний ассоциации.</param>
      <param name="role1Multiplicity">Значение параметра <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />, указывающее количество элементов одного из окончаний ассоциации, например один или несколько.</param>
      <param name="role1Type">Тип сущности, представляющей собой одно из окончаний ассоциации.</param>
      <param name="role2Name">Имя роли для типа другого окончания ассоциации.</param>
      <param name="role2Multiplicity">Значение параметра <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />, указывающее количество элементов второго окончания ассоциации, например один или несколько.</param>
      <param name="role2Type">Тип сущности, представляющей собой другое окончание ассоциации.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" />. </summary>
      <param name="relationshipNamespaceName">Имя пространства имен для ассоциации, в которой участвует эта сущность.</param>
      <param name="relationshipName">Возвращает имя связи, в которой участвует данная сущность.</param>
      <param name="role1Name">Имя роли для типа одного из окончаний ассоциации.</param>
      <param name="role1Multiplicity">Значение параметра <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />, указывающее количество элементов одного из окончаний ассоциации, например один или несколько.</param>
      <param name="role1Type">Тип сущности, представляющей собой одно из окончаний ассоциации.</param>
      <param name="role2Name">Имя роли для типа другого окончания ассоциации.</param>
      <param name="role2Multiplicity">Значение параметра <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />, указывающее количество элементов второго окончания ассоциации, например один или несколько.</param>
      <param name="role2Type">Тип сущности, представляющей собой другое окончание ассоциации.</param>
      <param name="isForeignKey">Значение, указывающее на то, основывается ли отношение на значении внешнего ключа.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>Получает логическое значение, указывающее, основывается ли связь на значении внешнего ключа.</summary>
      <returns>Значение true, если связь основана на значении внешнего ключа; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>Имя отношения. </summary>
      <returns>Строка <see cref="T:System.String" />, содержащая имя отношения, заданного данным атрибутом <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" />. </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>Пространство имен данного отношения.</summary>
      <returns>Строка <see cref="T:System.String" />, содержащая пространство имен данного отношения.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>Количество элементов на одном окончании отношения.</summary>
      <returns>Значение <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />, показывающее количество элементов.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>Имя роли для одного из окончаний отношения.</summary>
      <returns>Объект <see cref="T:System.String" />, который является именем роли.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>Тип сущности одного из окончаний отношения.</summary>
      <returns>Объект <see cref="T:System.Type" /> — тип объекта, представляющего собой данное окончание ассоциации.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>Количество элементов на другом окончании отношения.</summary>
      <returns>Значение <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" />, показывающее количество элементов.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>Имя роли для другого окончания отношения.</summary>
      <returns>Объект <see cref="T:System.String" />, который является именем роли.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>Тип сущности другого окончания отношения.</summary>
      <returns>Объект <see cref="T:System.Type" /> — тип объекта, представляющего собой другое окончание ассоциации. </returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>Атрибут, который указывает, что свойство представляет свойство навигации.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" />. </summary>
      <param name="relationshipNamespaceName">Имя пространства имен свойства отношения.</param>
      <param name="relationshipName">Имя связи.Имя отношения не содержит пространства имен.</param>
      <param name="targetRoleName">Имя роли для другого окончания отношения.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>Получает неполное имя отношения. </summary>
      <returns>Имя отношения.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>Имя пространства имен свойства навигации.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий имя пространства имен.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>Получает имя роли для другого окончания отношения.</summary>
      <returns>Имя целевой роли задается атрибутом Role другого элемента End ассоциации, которая определяет отношение в концептуальной модели.Дополнительные сведения см. в разделе Association (EDM).</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>Атрибут, который указывает, что свойство является скалярным.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute" />.  </summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>Получает или задает значение, которое указывает, является ли свойство частью ключа сущности.</summary>
      <returns>Значение, которое указывает, является ли свойство частью ключа сущности.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>Получает или задает значение, которое указывает, может ли свойство иметь значение null.</summary>
      <returns>Значение, которое указывает, может ли свойство иметь значение null.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmSchemaAttribute">
      <summary>Атрибут, указывающий, что сборка содержит классы, которые сопоставлены с типами сущностей в концептуальной модели.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmSchemaAttribute" />. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EdmSchemaAttribute" /> с уникальным значением для каждой модели, на которую ссылается сборка. </summary>
      <param name="assemblyGuid">Строка, являющаяся уникальным значением GUID для модели в сборке.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmTypeAttribute">
      <summary>Базовый класс для атрибутов, определяющих, как типы на уровне объектов сопоставляются с типами сущностей и сложными типами в концептуальной модели.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>Имя типа в концептуальной схеме, сопоставляемого с классом, к которому применен этот атрибут.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий имя.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>Имя пространства имен типа объекта сущности или сложного типа в концептуальной схеме, которая сопоставляется с этим типом.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий имя пространства имен.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityCollection`1">
      <summary>Представляет коллекцию объектов, образующих сторону отношения "many". </summary>
      <typeparam name="TEntity">Тип сущности коллекции.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>Добавляет объект в коллекцию.</summary>
      <param name="entity">Объект, добавляемый в коллекцию.<paramref name="entity" /> должен реализовывать объект <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="entity " /> равно null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет отношения между объектом и коллекцией связанных объектов в контексте объекта.</summary>
      <param name="entities">Коллекция объектов в контексте объекта, которые связаны с исходным объектом.</param>
      <exception cref="T:System.ArgumentNullException">Коллекция <paramref name="entities" /> равна null.</exception>
      <exception cref="T:System.InvalidOperationException">Исходный объект или объект в коллекции <paramref name="entities" /> имеет значение null либо не находится в состоянии <see cref="F:System.Data.EntityState.Unchanged" /> или <see cref="F:System.Data.EntityState.Modified" />.— или —Не удается определить связь на основании метаданных модели EDM.Это может происходить, если ассоциация в концептуальной схеме не поддерживает наличие связи между двумя типами.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>Определяет отношение между двумя присоединенными объектами в контексте объекта.</summary>
      <param name="entity">Присоединяемый объект.</param>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="entity" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Если объект <paramref name="entity" /> не может быть связан с исходным объектом.Это может происходить, если ассоциация в концептуальной схеме не поддерживает наличие связи между двумя типами.— или —Если объект имеет значение null либо не находится в состоянии <see cref="F:System.Data.EntityState.Unchanged" /> или <see cref="F:System.Data.EntityState.Modified" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>Удаляет все сущности из коллекции. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>Определяет, существует ли в коллекции определенный объект.</summary>
      <returns>Значение true, если объект найден в коллекции <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />, в противном случае — значение false.</returns>
      <param name="entity">Объект, который требуется найти в <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует все содержимое коллекции в массив, начиная с указанного индекса в массиве назначения.</summary>
      <param name="array">Массив, в который выполняется копирование.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.Count">
      <summary>Получает число объектов, содержащихся в коллекции.</summary>
      <returns>Число элементов, содержащихся в объекте <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>Возвращает запрос объектов, в результате выполнения которого возвращается набор объектов, существующих в текущей коллекции. </summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectQuery`1" />, представляющий коллекцию сущностей.</returns>
      <exception cref="T:System.InvalidOperationException">Если объект находится в состоянии <see cref="F:System.Data.EntityState.Added" />.— или —Если объект находится в состоянии <see cref="F:System.Data.EntityState.Detached" /> с параметром <see cref="T:System.Data.Objects.MergeOption" />, отличным от <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>Возвращает перечислитель, используемый для перебора объектов в коллекции.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />, который осуществляет итерацию по набору значений, кэшированных объектом <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>Получает значение, указывающее, доступен ли объект <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> только для чтения.</summary>
      <returns>Всегда возвращает false.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)">
      <summary>Загружает связанные объекты в коллекцию, используя заданный параметр слияния.</summary>
      <param name="mergeOption">Задает порядок слияния объектов в данной коллекции с объектами, которые могли быть возвращены предыдущими запросами относительно того же объекта <see cref="T:System.Data.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Используется внутренне для десериализации объектов сущности.</summary>
      <param name="context">Потоковый контекст.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Используется внутренне для сериализации объектов сущности.</summary>
      <param name="context">Потоковый контекст.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>Удаляет объект из коллекции и помечает отношение для удаления.</summary>
      <returns>true, если элемент был успешно удален; в противном случае — false. </returns>
      <param name="entity">Объект, удаляемый из коллекции.</param>
      <exception cref="T:System.ArgumentNullException">Значение объекта <paramref name="entity" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">Объект<paramref name=" entity " />не присоединен к тому же контексту объекта.— или —У объекта <paramref name="entity " />нет допустимого диспетчера отношения.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который используется для перебора набора значений, помещенных в кэш коллекцией <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />, который осуществляет итерацию по набору значений, кэшированных объектом <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Получает значение, показывающее, содержит ли коллекция связанных сущностей объекты коллекции. </summary>
      <returns>Это свойство всегда возвращает значение false, поскольку коллекция <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> содержит объекты, а не коллекции.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>Возвращает коллекцию в виде объекта <see cref="T:System.Collections.IList" />, используемого для привязки данных.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IList" /> объектов сущностей.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityObject">
      <summary>Базовый класс для типов сущностей, создаваемых средствами модели EDM.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.EntityObject" />.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.EntityKey">
      <summary>Получает или задает ключ для данного объекта.</summary>
      <returns>Ключ <see cref="T:System.Data.EntityKey" /> для данного объекта.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.EntityState">
      <summary>Получает состояние сущности объекта.</summary>
      <returns>Состояние <see cref="T:System.Data.EntityState" /> данного объекта. </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>Уведомляет объект отслеживания изменений об изменении свойства.</summary>
      <param name="property">Имя измененного свойства.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>Уведомляет объект отслеживания изменений об ожидающем изменении свойства.</summary>
      <param name="property">Имя изменяемого свойства.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.System#Data#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Задает экземпляр <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" />, который используется, чтобы сообщать об изменениях свойств.</summary>
      <param name="changeTracker">Ссылка на объект отслеживания изменений, который используется, чтобы сообщать об изменениях свойств.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.System#Data#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>Получает диспетчер отношений, используемый данным объектом.</summary>
      <returns>Класс <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />, используемый этим объектом.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityReference">
      <summary>Базовый класс, реализующий не универсальные функции для <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityReference.EntityKey">
      <summary>Возвращает ключ для связанного объекта. </summary>
      <returns>Объект <see cref="T:System.Data.EntityKey" />, который является ключом для связанного объекта.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityReference`1">
      <summary>Представляет связанное окончание ассоциации, имеющей 0 или 1 элемент. </summary>
      <typeparam name="TEntity">Тип сущности ссылки.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>Создает связь "многие к одному" или "один к одному" между двумя объектами в контексте объекта.</summary>
      <param name="entity">Присоединяемый объект.</param>
      <exception cref="T:System.ArgumentNullException">Когда <paramref name="entity" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Если объект <paramref name="entity" /> не может быть связан с текущим связанным элементом.Это может происходить, если ассоциация в концептуальной схеме не поддерживает наличие связи между двумя типами.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>Создает эквивалентный запрос объектов, возвращающий связанный объект.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.ObjectQuery`1" />, возвращающий связанный объект.</returns>
      <exception cref="T:System.InvalidOperationException">Если объект находится в состоянии <see cref="F:System.Data.EntityState.Added" />.–либо–Если объект находится в состоянии <see cref="F:System.Data.EntityState.Detached" /> с параметром <see cref="P:System.Data.Objects.ObjectQuery.MergeOption" />, отличным от <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.Load(System.Data.Objects.MergeOption)">
      <summary>Загружает связанный объект для этого объекта <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> с указанным параметром слияния.</summary>
      <param name="mergeOption">Определяет, как должен происходит возврат объекта, если он уже существует в контексте <see cref="T:System.Data.Objects.ObjectContext" />.</param>
      <exception cref="T:System.InvalidOperationException">Источник <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> имеет значение null.–либо–Запрос вернул несколько связанных окончаний.–либо–Запрос возвращает нулевое количество связанных элементов, хотя ожидался возврат одного связанного элемента.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Данный метод используется внутренне для сериализации связанных объектов сущности.</summary>
      <param name="context">Сериализованный поток.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Данный метод используется внутренне для сериализации связанных объектов сущности.</summary>
      <param name="context">Сериализованный поток.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityReference`1.Value">
      <summary>Получает или задает связанный объект, возвращаемый этим объектом <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />. </summary>
      <returns>Объект, возвращаемый этим объектом <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityChangeTracker">
      <summary>Определяет средства, используемые службами объектов для отслеживания изменений свойств объекта.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Уведомляет объект отслеживания изменений об изменении свойства сложного типа.</summary>
      <param name="entityMemberName">Имя измененного сложного свойства типа сущности.</param>
      <param name="complexObject">Сложный тип, содержащий измененное свойство.</param>
      <param name="complexObjectMemberName">Имя измененного свойства сложного типа.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Уведомляет объект отслеживания изменений об ожидающем изменении сложного свойства.</summary>
      <param name="entityMemberName">Имя изменяемого свойства сущности верхнего уровня.</param>
      <param name="complexObject">Сложный тип, содержащий изменяемое свойство.</param>
      <param name="complexObjectMemberName">Имя изменяемого свойства сложного типа.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>Уведомляет объект отслеживания изменений об изменении свойства типа сущности.</summary>
      <param name="entityMemberName">Имя измененного свойства.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>Уведомляет объект отслеживания изменений об ожидающем изменении свойства типа сущности.</summary>
      <param name="entityMemberName">Имя изменяемого свойства.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>Получает текущее состояние отслеживаемого объекта.</summary>
      <returns>Свойство <see cref="T:System.Data.EntityState" />, представляющее собой состояние отслеживаемого объекта.Дополнительные сведения см. в разделах Identity Resolution, State Managment, and Change Tracking и Tracking Changes in POCO Entities.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>Определяет тип сущности, реализующей отслеживание изменений. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Получает или задает интерфейс <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" />, используемый для создания сообщений об изменениях.</summary>
      <param name="changeTracker">Интерфейс <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" />, используемый для создания сообщений об изменениях.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithKey">
      <summary>Определяет тип сущности, предоставляющей ключ сущности.  </summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>Получает или задает ключ <see cref="T:System.Data.EntityKey" /> для экземпляров типов сущностей, реализующих этот интерфейс.</summary>
      <returns>Словарь <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithRelationships">
      <summary>Определяет тип сущности с отношением с одним или несколькими другими типами сущности.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>Возвращает диспетчер отношений, который управляет отношениями экземпляра типа сущности.</summary>
      <returns>Объект <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> для этой сущности.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IRelatedEnd">
      <summary>Определяет окончание отношения. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Добавляет объект в связанное окончание.</summary>
      <param name="entity">Объект, добавляемый в коллекцию.<paramref name="entity" /> должен реализовывать объект <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>Добавляет объект в связанное окончание.</summary>
      <param name="entity">Объект, добавляемый в коллекцию.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Определяет отношение между двумя присоединенными объектами.</summary>
      <param name="entity">Присоединяемый объект.<paramref name="entity" /> должен реализовывать объект <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>Определяет отношение между двумя присоединенными объектами.</summary>
      <param name="entity">Присоединяемый объект.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>Возвращает объект <see cref="T:System.Collections.IEnumerable" />, который представляет объекты, принадлежащие к связанному окончанию. </summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerable" />, который представляет объекты, принадлежащие связанному окончанию.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.IEnumerator" />, выполняющий перебор коллекции связанных объектов.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>Получает значение, показывающее, все ли связанные объекты загружены.</summary>
      <returns>Значение true, если связанное окончание содержит все связанные сущности из базы данных; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Load">
      <summary>Загружает связанный объект или объекты в это связанное окончание с параметром слияния по умолчанию.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)">
      <summary>Загружает связанный объект или объекты в связанное окончание с указанным параметром слияния.</summary>
      <param name="mergeOption">Объект <see cref="T:System.Data.Objects.MergeOption" />, используемый при слиянии объектов в существующую коллекцию <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>Получает имя отношения, в котором участвует данное связанное окончание.</summary>
      <returns>Имя отношения, в котором участвует данный <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />.Имя отношения не содержит пространства имен.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>Возвращает ссылку на метаданные для связанного окончания.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />, который содержит метаданные для окончания отношения.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Удаляет объект из коллекции объектов связанного окончания.</summary>
      <returns>Значение true, если сущность <paramref name="entity" /> успешно удалена, значение false, если сущность <paramref name="entity" />не входила в <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />.</returns>
      <param name="entity">Объект, удаляемый из коллекции.<paramref name="entity" /> должен реализовывать объект <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>Удаляет объект из коллекции объектов связанного окончания.</summary>
      <returns>Значение true, если сущность <paramref name="entity" /> успешно удалена; значение false, если сущность <paramref name="entity" />не входила в <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />.</returns>
      <param name="entity">Объект, удаляемый из коллекции.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>Получает имя роли в исходном окончании отношения.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий имя роли.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>Получает имя роли в целевом окончании отношения.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий имя роли.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelatedEnd">
      <summary>Базовый класс, реализующий общие функции для связанного окончания.</summary>
    </member>
    <member name="E:System.Data.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>Происходит, если изменяется связанное окончание. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.IEnumerator" />, выполняющий перебор коллекции связанных объектов.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>Получает значение, показывающее, все ли связанные объекты загружены.</summary>
      <returns>Значение true, если связанное окончание содержит все связанные объекты из базы данных; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.Load">
      <summary>В случае переопределения в производном классе загружает связанный объект или объекты в связанное окончание с параметром слияния по умолчанию.</summary>
      <exception cref="T:System.InvalidOperationException">Если исходный объект был получен с помощью запроса <see cref="F:System.Data.Objects.MergeOption.NoTracking" />, а параметр <see cref="T:System.Data.Objects.MergeOption" /> отличен от <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> или связанные объекты уже загружены.— или —Если исходный объект не присоединен к <see cref="T:System.Data.Objects.ObjectContext" />.— или —Если исходный объект отслеживается, но находится в состоянии <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Deleted" />, либо параметр <see cref="T:System.Data.Objects.MergeOption" />, используемый для <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" />, имеет значение <see cref="F:System.Data.Objects.MergeOption.NoTracking" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.Load(System.Data.Objects.MergeOption)">
      <summary>Этот метод, переопределенный в производном классе, загружает объекты из связанного окончания с заданным параметром слияния.</summary>
      <param name="mergeOption">Объект <see cref="T:System.Data.Objects.MergeOption" />, используемый при слиянии объектов в существующую коллекцию <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
      <exception cref="T:System.InvalidOperationException">Если исходный объект был получен с помощью запроса <see cref="F:System.Data.Objects.MergeOption.NoTracking" />, а параметр <see cref="T:System.Data.Objects.MergeOption" /> отличен от <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> или связанные объекты уже загружены.— или —Если исходный объект не присоединен к <see cref="T:System.Data.Objects.ObjectContext" />.— или —Если исходный объект отслеживается, но находится в состоянии <see cref="F:System.Data.EntityState.Added" /> или <see cref="F:System.Data.EntityState.Deleted" />, либо параметр <see cref="T:System.Data.Objects.MergeOption" />, используемый для <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" />, имеет значение <see cref="F:System.Data.Objects.MergeOption.NoTracking" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Используется внутренне для десериализации объектов сущности вместе с экземплярами <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</summary>
      <param name="context">Сериализованный поток.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>Получает имя отношения, в котором участвует данное связанное окончание.</summary>
      <returns>Имя отношения, в котором участвует этот объект <see cref="T:System.Data.Objects.DataClasses.RelatedEnd" />.Имя отношения не содержит пространства имен.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>Возвращает ссылку на метаданные для связанного окончания.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.RelationshipSet" />, который содержит метаданные для окончания отношения.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>Получает имя роли в исходном окончании отношения.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий имя роли.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Добавляет объект в связанное окончание.</summary>
      <param name="entity">Объект, добавляемый в коллекцию.Данный объект должен реализовывать интерфейс <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>Добавляет объект в связанное окончание.  </summary>
      <param name="entity">Экземпляр сущности для добавления в связанное окончание.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Присоединяет объект к связанному окончанию.</summary>
      <param name="entity">Присоединяемый объект.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>Присоединяет объект к связанному окончанию.</summary>
      <param name="entity">Экземпляр сущности для присоединения к связанному окончанию.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>Возвращает объект <see cref="T:System.Collections.IEnumerable" />, который представляет объекты, принадлежащие к связанному окончанию. </summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerable" />, который представляет объекты, принадлежащие связанному окончанию.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Удаляет объект из связанного окончания коллекции.</summary>
      <returns>Значение, указывающее, удален ли объект.</returns>
      <param name="entity">Экземпляр сущности для удаления из коллекции.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>Удаляет объект из связанного окончания, если объект является его частью.  </summary>
      <returns>Значение true, если сущность успешно удалена; в противном случае — значение false.</returns>
      <param name="entity">Экземпляр сущности для удаления из связанного окончания.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>Получает имя роли в целевом окончании отношения.</summary>
      <returns>Объект <see cref="T:System.String" />, содержащий имя роли.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelationshipKind">
      <summary>Перечисляет тип отношения между двумя или несколькими сущностями. </summary>
    </member>
    <member name="F:System.Data.Objects.DataClasses.RelationshipKind.Association">
      <summary>Связь определяется ассоциацией в концептуальной модели.Дополнительные сведения см. в разделе Association (EDM).</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelationshipManager">
      <summary>Отслеживает отношения между объектами в контексте объекта.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.Create(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Создает новый объект <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</summary>
      <returns>Запрошенный <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</returns>
      <param name="owner">Ссылка на сущность, вызывающую данный метод.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>Возвращает перечисление всех связанных окончаний, управляемых диспетчером отношений.</summary>
      <returns>Перечисление <see cref="T:System.Collections.Generic.IEnumerable`1" /> объектов, реализующих <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />.Возвращается пустое перечисление, если отношения еще не заполнены.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>Получает коллекцию <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> связанных объектов с заданными именем отношения и целевой роли. </summary>
      <returns>Коллекция <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> связанных объектов.</returns>
      <param name="relationshipName">Имя отношения для перехода.Имя отношения не содержит пространства имен.</param>
      <param name="targetRoleName">Имя целевой роли для перехода.Показывает направление перемещения по отношению.</param>
      <typeparam name="TTargetEntity">Тип возвращаемого объекта <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">Указанная роль вернула ссылку <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> вместо коллекции <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>Возвращает коллекцию <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> или <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> правильного типа для указанной целевой роли в отношении. </summary>
      <returns>
        <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />, представляющий полученную коллекцию <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> или ссылку <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</returns>
      <param name="relationshipName">Имя отношения, в котором определено имя <paramref name="targetRoleName" />.Имя отношения не содержит пространства имен.</param>
      <param name="targetRoleName">Целевая роль для получения другого окончания <paramref name="relationshipName" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="relationshipName" /> или <paramref name="targetRoleName" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Исходный тип не соответствует типу владельца.</exception>
      <exception cref="T:System.ArgumentException">Недопустимое значение параметра <paramref name="targetRoleName" />.— или —не удалось найти тип связи в метаданных.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>Получает ссылку <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> для связанного объекта, используя заданное сочетание имени отношения и целевой роли.</summary>
      <returns>Ссылка <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> связанного объекта.</returns>
      <param name="relationshipName">Имя отношения для перехода.Имя отношения не содержит пространства имен.</param>
      <param name="targetRoleName">Имя целевой роли для перехода.Показывает направление перемещения по отношению.</param>
      <typeparam name="TTargetEntity">Тип возвращаемого объекта <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">Указанная роль вернула ссылку <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> вместо коллекции <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Objects.DataClasses.EntityCollection{``0})">
      <summary>Инициализирует существующий объект <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />, созданный конструктором по умолчанию.</summary>
      <param name="relationshipName">Имя отношения.</param>
      <param name="targetRoleName">Имя роли связанного окончания.</param>
      <param name="entityCollection">Подлежащий инициализации объект <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
      <typeparam name="TTargetEntity">Тип инициализируемого объекта <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">Если переданный объект <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> уже инициализирован.— или —Если диспетчер связей уже присоединен к контексту <see cref="T:System.Data.Objects.ObjectContext" />. — или —Если диспетчер связей уже содержит связь с таким именем и целевой ролью.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Objects.DataClasses.EntityReference{``0})">
      <summary>Инициализирует существующий объект <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />, который был создан конструктором по умолчанию.</summary>
      <param name="relationshipName">Имя отношения.</param>
      <param name="targetRoleName">Имя роли связанного окончания.</param>
      <param name="entityReference">Подлежащий инициализации объект <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</param>
      <typeparam name="TTargetEntity">Тип инициализируемого объекта <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">Если переданный объект <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> уже инициализирован.— или —Если диспетчер связей уже присоединен к контексту <see cref="T:System.Data.Objects.ObjectContext" />. — или —Если диспетчер связей уже содержит связь с таким именем и целевой ролью.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Используется внутренне для десериализации объектов сущности вместе с экземплярами <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</summary>
      <param name="context">Сериализованный поток.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Вызывается службами объектов для подготовки объекта <see cref="T:System.Data.EntityKey" /> к двоичной сериализации с сериализованным отношением. </summary>
      <param name="context">Описывает источник и назначение данного сериализованного потока и предоставляет дополнительный, определяемый вызывающим, контекст.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.StructuralObject">
      <summary>Предоставляет поддержку генерирования кода в форме вспомогательных методов, используемых для задания значений полей для свойств. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Objects.DataClasses.StructuralObject" />.  </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>Определяет, содержат ли указанные байтовые массивы одинаковые значения.</summary>
      <returns>Значение равно True, если оба массива имеют одинаковую длину и содержат одинаковые байтовые значения, или же если оба массива имеют значение null; в иных случаях значение равно false.</returns>
      <param name="first">Значение первого байтового массива, подлежащего сравнению.</param>
      <param name="second">Значение второго байтового массива, подлежащего сравнению.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>Возвращает минимальное значение даты и времени, поддерживаемое источником данных.</summary>
      <returns>Значение <see cref="T:System.DateTime" />, представляющее собой минимальное значение даты и времени, поддерживаемое источником данных.</returns>
    </member>
    <member name="F:System.Data.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>Имя этой константы используется для отслеживания изменений. </summary>
      <returns>Возвращает объект <see cref="T:System.String" />, представляющий собой имя свойства, являющегося ключом.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>Возвращает копию значения текущего байта.</summary>
      <returns>Копия текущего значения байта.</returns>
      <param name="currentValue">Текущее значение массива байтов.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>Возвращает сложный тип для указанного свойства.</summary>
      <returns>Объект сложного типа для свойства.</returns>
      <param name="currentValue">Сложный объект, который наследуется от <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</param>
      <param name="property">Имя сложного свойства, представляющего собой сложный объект.</param>
      <param name="isNullable">Указывает, допускает ли тип значения NULL.</param>
      <param name="isInitialized">Указывает, является ли тип инициализированным.</param>
      <typeparam name="T">Тип запрашиваемого сложного объекта.Этот тип должен наследоваться от <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>Создает событие <see cref="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanged" />. </summary>
      <param name="property">Имя измененного свойства.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>Создает событие <see cref="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanging" />. </summary>
      <param name="property">Имя изменяемого свойства.</param>
    </member>
    <member name="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>Происходит при изменении значения свойства.</summary>
    </member>
    <member name="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>Происходит, если ожидается изменение значения свойства.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>При переопределении в производном классе создает событие, которое используется для передачи сообщения об изменении свойства.</summary>
      <param name="property">Имя для измененного свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="property" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="property" /> пуст.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>При переопределении в производном классе, создает событие, которое используется для передачи сообщения о том, что ожидается изменение свойства.</summary>
      <param name="property">Имя изменяемого свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="property" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Boolean" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Byte" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>Возвращает копию предоставленного массива байтов или значение null, если оно поддерживается.</summary>
      <returns>Возвращает копию массива <see cref="T:System.Byte" /> или значение null. </returns>
      <param name="value">Проверяемый массив <see cref="T:System.Byte" />.</param>
      <param name="isNullable">Логическое значение, указывающее, поддерживаются ли значения null.</param>
      <exception cref="T:System.Data.ConstraintException">Если ненулевое значения равно null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.DateTimeOffset" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Decimal" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Double" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Guid" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Int16" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Int32" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Int64" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Boolean" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Byte" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение <see cref="T:System.DateTime" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение <see cref="T:System.DateTimeOffset" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Decimal" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Double" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Guid" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Int16" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Int32" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Int64" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.SBtye" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Single" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение <see cref="T:System.TimeSpan" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.UInt16" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение, представляющее собой целое число без знака, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.UInt64" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.SByte" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.Single" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>Возвращает копию предоставленной строки или значение null, если оно поддерживается.</summary>
      <returns>Предоставленное значение <see cref="T:System.String" /> или значение null.</returns>
      <param name="value">Значение типа <see cref="T:System.String" />.</param>
      <param name="isNullable">Значение типа <see cref="T:System.Boolean" />, указывающее, поддерживаются ли значения null.</param>
      <exception cref="T:System.Data.ConstraintException">Если ненулевое значение равно null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.TimeSpan" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.UInt16" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.UInt32" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>Этот метод зарезервирован для использования в будущем.</summary>
      <returns>Предоставленное значение.</returns>
      <param name="value">Значение типа <see cref="T:System.UInt64" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>Задает сложный объект для указанного свойства. </summary>
      <returns>Сложный тип, наследуемый от <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</returns>
      <param name="oldValue">Первоначальный сложный объект для этого свойства, если он существует.</param>
      <param name="newValue">Задаваемый сложный объект.</param>
      <param name="property">Сложное свойство, которое задается для сложного объекта.</param>
      <typeparam name="T">Тип заменяемого сложного объекта.Этот тип должен наследоваться от <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>Проверяет, не содержит ли сложный объект значение null.</summary>
      <returns>Проверяемый сложный объект.</returns>
      <param name="complexObject">Сложный объект, подлежащий проверке.</param>
      <param name="propertyName">Сложное свойство родительского объекта, связанного с объектом <paramref name="complexObject" />.</param>
      <typeparam name="TComplex">Тип проверяемого сложного объекта.Этот тип должен наследоваться от <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</typeparam>
      <exception cref="T:System.Data.ConstraintException">Если сложный тип имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Objects.SqlClient.SqlFunctions">
      <summary>Предоставляет методы среды CLR, вызывающие функции базы данных в запросах LINQ to Entities. </summary>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Acos(System.Nullable{System.Decimal})">
      <summary>Математическая функция, возвращающая значение угла (в радианах), косинус которого равен указанному числовому значению.Этот угол называется арккосинусом.</summary>
      <returns>Угол, измеряемый в радианах.</returns>
      <param name="arg1">Косинус угла.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Acos(System.Nullable{System.Double})">
      <summary>Математическая функция, возвращающая значение угла (в радианах), косинус которого равен указанному числовому значению.Этот угол называется арккосинусом.</summary>
      <returns>Угол в радианах, определяемый входным значением косинуса.</returns>
      <param name="arg1">Косинус угла.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Ascii(System.String)">
      <summary>Возвращает код ASCII самого левого символа указанного символьного выражения.</summary>
      <returns>Код ASCII первого символа входной строки.</returns>
      <param name="arg">Допустимая строка.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Asin(System.Nullable{System.Decimal})">
      <summary>Математическая функция, возвращающая значение угла (в радианах), синус которого равен указанному числовому значению.Этот угол называется арксинусом.</summary>
      <returns>Угол, измеряемый в радианах.</returns>
      <param name="arg">Синус угла.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Asin(System.Nullable{System.Double})">
      <summary>Математическая функция, возвращающая значение угла (в радианах), синус которого равен указанному числовому значению.Этот угол называется арксинусом.</summary>
      <returns>Угол, измеряемый в радианах.</returns>
      <param name="arg">Синус угла.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan(System.Nullable{System.Decimal})">
      <summary>Математическая функция, возвращающая значение угла (в радианах), тангенс которого равен указанному числовому значению.Этот угол называется арктангенсом.</summary>
      <returns>Угол, измеряемый в радианах.</returns>
      <param name="arg">Тангенс угла.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan(System.Nullable{System.Double})">
      <summary>Математическая функция, возвращающая значение угла (в радианах), тангенс которого равен указанному числовому значению.Этот угол называется арктангенсом.</summary>
      <returns>Угол, измеряемый в радианах.</returns>
      <param name="arg">Тангенс угла.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan2(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Возвращает положительное значение угла (в радианах) между положительной часть оси X и прямой, проведенной через начало координат и точку (x, y), где x и y — два заданных числовых значения.Первый параметр, передаваемый функции, представляет собой значение y, а второй параметр — значение x.</summary>
      <returns>Угол, измеряемый в радианах.</returns>
      <param name="arg1">Координата y точки.</param>
      <param name="arg2">Координата х точки.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan2(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Возвращает положительное значение угла (в радианах) между положительной часть оси X и прямой, проведенной через начало координат и точку (x, y), где x и y — два заданных числовых значения.Первый параметр, передаваемый функции, представляет собой значение y, а второй параметр — значение x.</summary>
      <returns>Угол, измеряемый в радианах.</returns>
      <param name="arg1">Координата y точки.</param>
      <param name="arg2">Координата х точки.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Char(System.Nullable{System.Int32})">
      <summary>Возвращает символ, соответствующий указанному целому значению ASCII.</summary>
      <returns>Символ, соответствующий указанному значению ASCII.</returns>
      <param name="arg">Код ASCII.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[])">
      <summary>Возвращает начальное положение выражения внутри другого выражения.</summary>
      <returns>Начальное положение <paramref name="target" />, если оно найдено в <paramref name="toSearch" />.</returns>
      <param name="toSearch">Строковое выражение, в котором требуется выполнить поиск.</param>
      <param name="target">Строковое выражение, которое требуется найти.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int32})">
      <summary>Возвращает начальное положение выражения внутри другого выражения.</summary>
      <returns>Начальное положение <paramref name="target" />, если оно найдено в <paramref name="toSearch" />.</returns>
      <param name="toSearch">Строковое выражение, в котором требуется выполнить поиск.</param>
      <param name="target">Строковое выражение, которое требуется найти.</param>
      <param name="startLocation">Положение знака в <paramref name="toSearch" />, с которого начинается поиск.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int64})">
      <summary>Возвращает начальное положение выражения внутри другого выражения.</summary>
      <returns>Начальное положение <paramref name="target" />, если оно найдено в <paramref name="toSearch" />.</returns>
      <param name="toSearch">Строковое выражение, в котором требуется выполнить поиск.</param>
      <param name="target">Строковое выражение, которое требуется найти.</param>
      <param name="startLocation">Положение знака в <paramref name="toSearch" />, с которого начинается поиск.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String)">
      <summary>Возвращает начальное положение выражения внутри другого выражения.</summary>
      <returns>Начальное положение <paramref name="target" />, если оно найдено в <paramref name="toSearch" />.</returns>
      <param name="toSearch">Строковое выражение, в котором требуется выполнить поиск.</param>
      <param name="target">Строковое выражение, которое требуется найти.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int32})">
      <summary>Возвращает начальное положение выражения внутри другого выражения.</summary>
      <returns>Начальное положение <paramref name="target" />, если оно найдено в <paramref name="toSearch" />.</returns>
      <param name="toSearch">Строковое выражение, в котором требуется выполнить поиск.</param>
      <param name="target">Строковое выражение, которое требуется найти.</param>
      <param name="startLocation">Положение знака в <paramref name="toSearch" />, с которого начинается поиск.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int64})">
      <summary>Возвращает начальное положение выражения внутри другого выражения.</summary>
      <returns>
        <see cref="T:System.Nullable`1" /> значения <see cref="T:System.Int64" />, являющегося начальным положением <paramref name="target" />, если оно найдено в <paramref name="toSearch" />.</returns>
      <param name="toSearch">Строковое выражение, в котором требуется выполнить поиск.</param>
      <param name="target">Строковое выражение, которое требуется найти.</param>
      <param name="startLocation">Положение знака в <paramref name="toSearch" />, с которого начинается поиск.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[])">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
      <param name="arg1">Массив знаков, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[],System.Byte[])">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Массив знаков, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Массив знаков, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[],System.Byte[],System.Byte[])">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Массив знаков, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Массив знаков, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Массив знаков, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String)">
      <summary>Возвращает значение контрольной суммы, вычисленное для входного аргумента.</summary>
      <returns>Контрольная сумма, вычисленная для входного значения.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String,System.String)">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String,System.String,System.String)">
      <summary>Возвращает значение контрольной суммы, вычисленное для входных аргументов.</summary>
      <returns>Контрольная сумма, вычисленная для входных значений.</returns>
      <param name="arg1">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg2">Значение, для которого вычисляется контрольная сумма.</param>
      <param name="arg3">Значение, для которого вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Возвращает контрольную сумму значений в коллекции.Значения NULL не учитываются.</summary>
      <returns>Контрольная сумма, вычисленная для входной коллекции.</returns>
      <param name="arg">Коллекция значений, для которой вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Возвращает контрольную сумму значений в коллекции.Значения NULL не учитываются.</summary>
      <returns>Контрольная сумма, вычисленная для входной коллекции.</returns>
      <param name="arg">Коллекция значений, для которой вычисляется контрольная сумма.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cos(System.Nullable{System.Decimal})">
      <summary>Возвращает тригонометрический косинус указанного угла (в радианах) в указанном выражении.</summary>
      <returns>Тригонометрический косинус заданного угла.</returns>
      <param name="arg">Угол, измеряемый в радианах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cos(System.Nullable{System.Double})">
      <summary>Возвращает тригонометрический косинус указанного угла (в радианах) в указанном выражении.</summary>
      <returns>Тригонометрический косинус заданного угла.</returns>
      <param name="arg">Угол, измеряемый в радианах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cot(System.Nullable{System.Decimal})">
      <summary>Математическая функция, возвращающая значение котангенса заданного угла (в радианах).</summary>
      <returns>Тригонометрический котангенс заданного угла.</returns>
      <param name="arg">Угол, измеряемый в радианах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cot(System.Nullable{System.Double})">
      <summary>Математическая функция, возвращающая значение котангенса заданного угла (в радианах).</summary>
      <returns>Тригонометрический котангенс заданного угла.</returns>
      <param name="arg">Угол, измеряемый в радианах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CurrentTimestamp">
      <summary>Возвращает текущие дату и время. </summary>
      <returns>Текущие дата и время.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CurrentUser">
      <summary>Возвращает имя текущего пользователя.</summary>
      <returns>Имя текущего пользователя.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Byte[])">
      <summary>Возвращает число байтов, используемых для представления любого выражения.</summary>
      <returns>Число байтов во входном значении.</returns>
      <param name="arg">Значение, которое необходимо проверить на длину.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Boolean})">
      <summary>Возвращает число байтов, используемых для представления любого выражения.</summary>
      <returns>Число байтов во входном значении.</returns>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.DateTime})">
      <summary>Возвращает число байтов, используемых для представления любого выражения.</summary>
      <returns>Число байтов во входном значении.</returns>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает число байтов, используемых для представления любого выражения.</summary>
      <returns>Число байтов во входном значении.</returns>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Decimal})">
      <summary>Возвращает число байтов, используемых для представления любого выражения.</summary>
      <returns>Число байтов во входном значении.</returns>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Double})">
      <summary>Возвращает число байтов, используемых для представления любого выражения.</summary>
      <returns>Число байтов во входном значении.</returns>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Guid})">
      <summary>Возвращает число байтов, используемых для представления любого выражения.</summary>
      <returns>Число байтов во входном значении.</returns>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.TimeSpan})">
      <summary>Возвращает число байтов, используемых для представления любого выражения.</summary>
      <returns>Число байтов во входном значении.</returns>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.String)">
      <summary>Возвращает число байтов, используемых для представления любого выражения.</summary>
      <returns>Число байтов во входном значении.</returns>
      <param name="arg">Значение, которое необходимо проверить на длину данных.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>Возвращает новое значение datetime, полученное в результате прибавления интервала к указанной дате.</summary>
      <returns>Новая дата.</returns>
      <param name="datePartArg">Часть даты, которую требуется увеличить. </param>
      <param name="number">Значение, которое используется для увеличения даты на указанную величину.</param>
      <param name="date">Дата, которую требуется увеличить.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает новое значение даты, полученное в результате прибавления интервала к указанной дате.</summary>
      <returns>Новый момент времени, который выражается в виде даты и времени суток относительно времени в формате UTC.</returns>
      <param name="datePartArg">Часть даты, которую требуется увеличить.</param>
      <param name="number">Значение, которое используется для увеличения даты на указанную величину.</param>
      <param name="dateTimeOffsetArg">Дата, которую требуется увеличить.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.TimeSpan})">
      <summary>Возвращает новое значение промежутка времени, полученное в результате прибавления интервала к указанному промежутку времени.</summary>
      <returns>Новый интервал времени.</returns>
      <param name="datePartArg">Часть даты, которую требуется увеличить.</param>
      <param name="number">Значение, которое используется для увеличения даты на указанную величину.</param>
      <param name="time">Увеличиваемый интервал времени.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.String)">
      <summary>Возвращает новое значение datetime, полученное в результате прибавления интервала к указанной дате.</summary>
      <returns>Значение <see cref="T:System.Nullable`1" /> значения <see cref="T:System.DateTime" />, являющееся новой датой.</returns>
      <param name="datePartArg">Часть даты, которую требуется увеличить.</param>
      <param name="number">Значение, которое используется для увеличения даты на указанную величину.</param>
      <param name="date">Дата, которую требуется увеличить.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.String)">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTime})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.TimeSpan})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.String)">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.String)">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTime})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.TimeSpan})">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Значение, задающее число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.String)">
      <summary>Возвращает число заданных границ частей даты между указанными начальной и конечной датами.</summary>
      <returns>Число интервалов времени между двумя датами.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="startDate">Первая дата.</param>
      <param name="endDate">Вторая дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.DateTime})">
      <summary>Возвращает строку знаков, представляющую заданную часть указанной даты.</summary>
      <returns>Заданная часть указанной даты.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="date">Дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает строку знаков, представляющую заданную часть указанной даты.</summary>
      <returns>Заданная часть указанной даты.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="date">Дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.TimeSpan})">
      <summary>Возвращает строку знаков, представляющую заданную часть указанной даты.</summary>
      <returns>Заданная часть указанной даты.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="date">Дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.String)">
      <summary>Возвращает строку знаков, представляющую заданную часть указанной даты.</summary>
      <returns>Заданная часть указанной даты.</returns>
      <param name="datePartArg">Часть даты для вычисления числа интервалов времени, составляющих разницу.</param>
      <param name="date">Дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTime})">
      <summary>Возвращает целое число, представляющее указанную часть заданной даты.</summary>
      <returns>Заданная часть указанной даты.</returns>
      <param name="datePartArg">Часть даты для возврата значения.</param>
      <param name="date">Дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Возвращает целое число, представляющее указанную часть заданной даты.</summary>
      <returns>Заданная часть указанной даты.</returns>
      <param name="datePartArg">Часть даты для возврата значения.</param>
      <param name="date">Дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.TimeSpan})">
      <summary>Возвращает целое число, представляющее указанную часть заданной даты.</summary>
      <returns>Заданная часть указанной даты.</returns>
      <param name="datePartArg">Часть даты для возврата значения.</param>
      <param name="date">Дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.String)">
      <summary>Возвращает целое число, представляющее указанную часть заданной даты.</summary>
      <returns>Заданная часть указанной даты.</returns>
      <param name="datePartArg">Часть даты для возврата значения.</param>
      <param name="date">Дата.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Decimal})">
      <summary>Возвращает значение угла в градусах, равное указанному значению в радианах.</summary>
      <returns>Указанный угол, преобразованный в градусы.</returns>
      <param name="arg1">Угол, измеряемый в радианах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Double})">
      <summary>Возвращает значение угла в градусах, равное указанному значению в радианах.</summary>
      <returns>Указанный угол, преобразованный в градусы.</returns>
      <param name="arg1">Угол, измеряемый в радианах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Int32})">
      <summary>Возвращает значение угла в градусах, равное указанному значению в радианах.</summary>
      <returns>Указанный угол, преобразованный в градусы.</returns>
      <param name="arg1">Угол, измеряемый в радианах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Int64})">
      <summary>Возвращает значение угла в градусах, равное указанному значению в радианах.</summary>
      <returns>Указанный угол, преобразованный в градусы.</returns>
      <param name="arg1">Угол, измеряемый в радианах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Difference(System.String,System.String)">
      <summary>Возвращает целочисленное значение, указывающее разницу между значениями SOUNDEX двух символьных выражений.</summary>
      <returns>Разница между значениями SOUNDEX двух строк.</returns>
      <param name="string1">Первая строка.</param>
      <param name="string2">Вторая строка.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Exp(System.Nullable{System.Decimal})">
      <summary>Возвращает экспоненциальное значение указанного выражения с плавающей точкой.</summary>
      <returns>Константа e в степени, равной входному значению.</returns>
      <param name="arg">Входное значение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Exp(System.Nullable{System.Double})">
      <summary>Возвращает экспоненциальное значение указанного выражения с плавающей точкой.</summary>
      <returns>Константа e в степени, равной входному значению.</returns>
      <param name="arg">Входное значение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.GetDate">
      <summary>Возвращает текущую отметку времени базы данных в виде значения даты и времени без смещения часового пояса базы данных.Это значение происходит из операционной системы компьютера, на котором запущен экземпляр SQL Server.</summary>
      <returns>Текущая отметка времени базы данных.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.GetUtcDate">
      <summary>Возвращает текущую отметку времени базы данных в виде значения даты и времени.Смещение часового пояса базы данных не включается.Данное значение представляет текущее время в формате UTC.Это значение происходит из операционной системы компьютера, на котором запущен экземпляр SQL Server.</summary>
      <returns>Текущая отметка времени базы данных в формате UTC.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.HostName">
      <summary>Возвращает имя рабочей станции.</summary>
      <returns>Имя рабочей станции.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.IsDate(System.String)">
      <summary>Указывает, является ли входное значение допустимой датой или временем.</summary>
      <returns>Значение 1, если входное выражение является допустимым значением даты или времени типов данных datetime или smalldatetime; в противном случае, значение 0.</returns>
      <param name="arg">Протестированное значение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.IsNumeric(System.String)">
      <summary>Указывает, является ли входное значение допустимым числовым типом.</summary>
      <returns>Значение 1, если входное выражение является допустимым числовым типом данных; в противном случае — значение 0.</returns>
      <param name="arg">Строковое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log(System.Nullable{System.Decimal})">
      <summary>Возвращает натуральный логарифм указанного входного значения.</summary>
      <returns>Натуральный логарифм входного значения.</returns>
      <param name="arg">Числовое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log(System.Nullable{System.Double})">
      <summary>Возвращает натуральный логарифм указанного входного значения.</summary>
      <returns>Натуральный логарифм входного значения.</returns>
      <param name="arg">Числовое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log10(System.Nullable{System.Decimal})">
      <summary>Возвращает десятичный логарифм указанного входного значения.</summary>
      <returns>Десятичный логарифм входного значения.</returns>
      <param name="arg">Числовое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log10(System.Nullable{System.Double})">
      <summary>Возвращает десятичный логарифм указанного входного значения.</summary>
      <returns>Десятичный логарифм входного значения.</returns>
      <param name="arg">Числовое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.NChar(System.Nullable{System.Int32})">
      <summary>Возвращает символ Юникода с указанным целочисленным кодом, определенным в стандарте Юникода.</summary>
      <returns>Символ, соответствующий входному коду знака.</returns>
      <param name="arg">Код знака.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.PatIndex(System.String,System.String)">
      <summary>Возвращает начальную позицию первого найденного шаблона в указанном выражении или ноли, если шаблон не найден во всех допустимых типах данных текста и символов.</summary>
      <returns>Положение первого символа, в котором был найден шаблон строки.</returns>
      <param name="stringPattern">Шаблон строки для поиска соответствия.</param>
      <param name="target">Строка для поиска.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Pi">
      <summary>Возвращает значение константы "пи".</summary>
      <returns>Численное значение числа "пи".</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.QuoteName(System.String)">
      <summary>Возвращает строку Юникода, в которую добавлены разделители, чтобы входная строка являлась допустимым идентификатором с разделителем Microsoft SQL Server.</summary>
      <returns>Исходная строка с квадратными скобками.</returns>
      <param name="stringArg">Выражение, к которому будут добавлены символы кавычек.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.QuoteName(System.String,System.String)">
      <summary>Возвращает строку Юникода, в которую добавлены разделители, чтобы входная строка являлась допустимым идентификатором с разделителем Microsoft SQL Server.</summary>
      <returns>Исходная строка с указанными символами кавычек.</returns>
      <param name="stringArg">Выражение, к которому будут добавлены символы кавычек.</param>
      <param name="quoteCharacter">Односимвольная строка, используемая в качестве разделителя.Это может быть одинарная кавычка ( ' ), открывающая или закрывающая квадратная скобка ( [ ] ) или двойная кавычка ( " ).Если значение аргумента quote_character не указано, используются скобки.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Decimal})">
      <summary>Возвращает значение угла в радианах, равное указанному значению в градусах.</summary>
      <returns>Величина указанного угла в радианах.</returns>
      <param name="arg">Величина угла в градусах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Double})">
      <summary>Возвращает значение угла в радианах, равное указанному значению в градусах.</summary>
      <returns>Величина указанного угла в радианах.</returns>
      <param name="arg">Величина угла в градусах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Int32})">
      <summary>Возвращает значение угла в радианах, равное указанному значению в градусах.</summary>
      <returns>Величина указанного угла в радианах.</returns>
      <param name="arg">Величина угла в градусах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Int64})">
      <summary>Возвращает значение угла в радианах, равное указанному значению в градусах.</summary>
      <returns>Величина указанного угла в радианах.</returns>
      <param name="arg">Величина угла в градусах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Rand">
      <summary>Возвращает псевдослучайное число с плавающей точкой в диапазоне от 0 до 1, не включающем границы.</summary>
      <returns>Псевдослучайное значение.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Rand(System.Nullable{System.Int32})">
      <summary>Возвращает псевдослучайное число с плавающей точкой в диапазоне от 0 до 1, не включающем границы.</summary>
      <returns>Псевдослучайное значение.</returns>
      <param name="seed">Начальное значение.Если аргумент <paramref name="seed" /> не задан, то компонент SQL Server Database Engine присваивает случайное начальное значение.Для указанного начального значения возвращаемый результат всегда будет один и тот же.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Replicate(System.String,System.Nullable{System.Int32})">
      <summary>Повторяет строковое значение заданное количество раз.</summary>
      <returns>Целевая строка, повторенная количество раз, заданное параметром <paramref name="count" />.</returns>
      <param name="target">Допустимая строка.</param>
      <param name="count">Значение, указывающее, сколько раз нужно повторить <paramref name="target" />.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Decimal})">
      <summary>Возвращает положительный знак (+1), ноль (0) или отрицательный знак (-1) указанного выражения.</summary>
      <returns>Знак входного выражения.</returns>
      <param name="arg">Числовое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Double})">
      <summary>Возвращает положительный знак (+1), ноль (0) или отрицательный знак (-1) указанного выражения.</summary>
      <returns>Знак входного выражения.</returns>
      <param name="arg">Числовое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Int32})">
      <summary>Возвращает положительный знак (+1), ноль (0) или отрицательный знак (-1) указанного выражения.</summary>
      <returns>Знак входного выражения.</returns>
      <param name="arg">Числовое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Int64})">
      <summary>Возвращает положительный знак (+1), ноль (0) или отрицательный знак (-1) указанного выражения.</summary>
      <returns>Знак входного выражения.</returns>
      <param name="arg">Числовое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sin(System.Nullable{System.Decimal})">
      <summary>Возвращает тригонометрический синус указанного угла.</summary>
      <returns>Тригонометрический синус входного выражения.</returns>
      <param name="arg">Угол, измеряемый в радианах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sin(System.Nullable{System.Double})">
      <summary>Возвращает тригонометрический синус указанного угла.</summary>
      <returns>Тригонометрический синус входного выражения.</returns>
      <param name="arg">Угол, измеряемый в радианах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SoundCode(System.String)">
      <summary>Преобразует буквенно-цифровую строку в четырехсимвольный код (SOUNDEX) для поиска слов или имен с похожим звучанием.</summary>
      <returns>Код SOUNDEX входной строки.</returns>
      <param name="arg">Допустимая строка.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Space(System.Nullable{System.Int32})">
      <summary>Возвращает строку пробелов.</summary>
      <returns>Строка, состоящая из указанного количества пробелов.</returns>
      <param name="arg1">Количество пробелов.Если значение отрицательное, возвращается пустая строка.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Square(System.Nullable{System.Decimal})">
      <summary>Возвращает квадрат указанного числа.</summary>
      <returns>Квадрат входного значения.</returns>
      <param name="arg1">Числовое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Square(System.Nullable{System.Double})">
      <summary>Возвращает квадрат указанного числа.</summary>
      <returns>Квадрат входного значения.</returns>
      <param name="arg1">Числовое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SquareRoot(System.Nullable{System.Decimal})">
      <summary>Возвращает квадратный корень из указанного числа.</summary>
      <returns>Квадратный корень из входного значения.</returns>
      <param name="arg">Числовое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SquareRoot(System.Nullable{System.Double})">
      <summary>Возвращает квадратный корень из указанного числа.</summary>
      <returns>Квадратный корень из входного значения.</returns>
      <param name="arg">Числовое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal})">
      <summary>Возвращает символьные данные, преобразованные из числовых данных.</summary>
      <returns>Входное выражение, преобразованное в строку.</returns>
      <param name="number">Числовое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Возвращает символьные данные, преобразованные из числовых данных.</summary>
      <returns>Входное выражение, преобразованное в строку.</returns>
      <param name="number">Числовое выражение.</param>
      <param name="length">Общая длина строки.Включает десятичный разделитель, знак, цифры и пробелы.Значение по умолчанию — 10.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>Возвращает символьные данные, преобразованные из числовых данных.</summary>
      <returns>Входное выражение, преобразованное в строку.</returns>
      <param name="number">Числовое выражение.</param>
      <param name="length">Общая длина строки.Включает десятичный разделитель, знак, цифры и пробелы.Значение по умолчанию — 10.</param>
      <param name="decimalArg">Количество знаков справа от десятичного разделителя.Значение параметра <paramref name="decimal" /> должно быть меньше либо равно 16.Если значение<paramref name=" decimal" /> больше 16, результат обрезается до шестнадцати разрядов справа от десятичного разделителя.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double})">
      <summary>Возвращает символьные данные, преобразованные из числовых данных.</summary>
      <returns>Числовое входное выражение, преобразованное в строку.</returns>
      <param name="number">Числовое выражение.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Возвращает символьные данные, преобразованные из числовых данных.</summary>
      <returns>Числовое входное выражение, преобразованное в строку.</returns>
      <param name="number">Числовое выражение.</param>
      <param name="length">Общая длина строки.Включает десятичный разделитель, знак, цифры и пробелы.Значение по умолчанию — 10.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>Возвращает символьные данные, преобразованные из числовых данных.</summary>
      <returns>Числовое входное выражение, преобразованное в строку.</returns>
      <param name="number">Числовое выражение.</param>
      <param name="length">Общая длина строки.Включает десятичный разделитель, знак, цифры и пробелы.Значение по умолчанию — 10.</param>
      <param name="decimalArg">Количество знаков справа от десятичного разделителя.Значение параметра <paramref name="decimal" /> должно быть меньше либо равно 16.Если значение<paramref name=" decimal" /> больше 16, результат обрезается до шестнадцати разрядов справа от десятичного разделителя.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Stuff(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
      <summary>Вставляет строку в другую строку.Удаляет указанное количество символов из целевой строки в положении начала и вставляет вторую строку в целевую строку, начиная с этого положения.</summary>
      <returns>Строка, содержащая две строки.</returns>
      <param name="stringInput">Целевая строка.</param>
      <param name="start">Положение символа в <paramref name="stringinput" />, куда нужно вставить новую строку.</param>
      <param name="length">Число символов, предназначенных для удаления из <paramref name="stringInput" />.Если значение аргумента <paramref name="length" /> превышает длину <paramref name="stringInput" />, удаляются все символы вплоть до последнего в <paramref name="stringReplacement" />.</param>
      <param name="stringReplacement">Строка для вставки в <paramref name="stringInput" />.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Tan(System.Nullable{System.Decimal})">
      <summary>Возвращает тригонометрический тангенс входного выражения.</summary>
      <returns>Тангенс входного угла.</returns>
      <param name="arg">Угол, измеряемый в радианах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Tan(System.Nullable{System.Double})">
      <summary>Возвращает тригонометрический тангенс входного выражения.</summary>
      <returns>Тангенс входного угла.</returns>
      <param name="arg">Угол, измеряемый в радианах.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Unicode(System.String)">
      <summary>Возвращает целочисленное значение первого символа входного выражения в стандарте Юникод.</summary>
      <returns>Код знака первого символа входной строки.</returns>
      <param name="arg">Допустимая строка.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.UserName">
      <summary>Возвращает имя пользователя базы данных, соответствующее указанному идентификационному номеру.</summary>
      <returns>Имя пользователя.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.UserName(System.Nullable{System.Int32})">
      <summary>Возвращает имя пользователя базы данных, соответствующее указанному идентификационному номеру.</summary>
      <returns>Имя пользователя.</returns>
      <param name="arg">ИД пользователя.</param>
    </member>
  </members>
</doc>