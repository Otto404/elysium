<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Activities.Design</name>
  </assembly>
  <members>
    <member name="T:System.Activities.Design.ActivityDesigner">
      <summary>Provides a base class for all activity designer components.</summary>
    </member>
    <member name="M:System.Activities.Design.ActivityDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.ActivityDesigner" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.ActivityDesigner.GetAutomationHelpText">
      <summary>Returns a string of automation property/value pairs related to the <see cref="T:System.Activities.Design.ActivityDesigner" />.
</summary>
      <returns>Returns a 
<see cref="T:System.String" /> containing the automation property/value pairs related to the <see cref="T:System.Activities.Design.ActivityDesigner" />.
.
</returns>
    </member>
    <member name="M:System.Activities.Design.ActivityDesigner.GetAutomationIdMemberName">
      <summary>Returns the string “DisplayName” in this overridden method implementation. 
</summary>
      <returns>Returns a 
<see cref="T:System.String" /> containing “DisplayName.”
.
</returns>
    </member>
    <member name="P:System.Activities.Design.ActivityDesigner.Icon">
      <summary>Gets or sets the icon associated with this <see cref="T:System.Activities.Design.ActivityDesigner" />. 
</summary>
      <returns>Returns a 
<see cref="T:System.Windows.Media.DrawingBrush" /> representing the icon associated with this <see cref="T:System.Activities.Design.ActivityDesigner" />.
.
</returns>
    </member>
    <member name="F:System.Activities.Design.ActivityDesigner.IconProperty">
      <summary>Identifies the <see cref="F:System.Activities.Design.ActivityDesigner.IconProperty" /> dependency property. 
</summary>
    </member>
    <member name="M:System.Activities.Design.ActivityDesigner.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>Raises the DragEnter event, calls the base class implementation of the OnDragEnter method, and handles <see cref="T:System.Activities.Design.Model.ModelItem" /> objects that are dragged onto the <see cref="T:System.Activities.Design.ActivityDesigner" /> surface.
</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.
</param>
    </member>
    <member name="T:System.Activities.Design.ActivityDesignerOptionsAttribute">
      <summary>Specifies options for the activity designer.</summary>
    </member>
    <member name="M:System.Activities.Design.ActivityDesignerOptionsAttribute.#ctor">
      <summary>Creates an instance of an <see cref="M:System.Activities.Design.ActivityDesignerOptionsAttribute.#ctor" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.ActivityDesignerOptionsAttribute.AllowDrillIn">
      <summary>Gets or sets a value that indicates whether drill in is allowed.</summary>
      <returns>true if drill in is allowed; false if it is not allowed.</returns>
    </member>
    <member name="P:System.Activities.Design.ActivityDesignerOptionsAttribute.AlwaysCollapseChildren">
      <summary>Gets or sets a value that indicates whether the child nodes are always collapsed.</summary>
      <returns>true if the child nodes are always collapses; otherwise false.</returns>
    </member>
    <member name="T:System.Activities.Design.BreakpointTypes">
      <summary>An enumeration that represents types of breakpoints.</summary>
    </member>
    <member name="F:System.Activities.Design.BreakpointTypes.None">
      <summary>No breakpoint is set.</summary>
    </member>
    <member name="F:System.Activities.Design.BreakpointTypes.Enabled">
      <summary>The breakpoint is enabled. </summary>
    </member>
    <member name="F:System.Activities.Design.BreakpointTypes.Bounded">
      <summary>Represents a bounded breakpoint, which implements the where and when of breaking at a desired point in a program. </summary>
    </member>
    <member name="F:System.Activities.Design.BreakpointTypes.Conditional">
      <summary>Represents a conditional breakpoint, which is an expression that is evaluated to determine whether the breakpoint will occur. </summary>
    </member>
    <member name="T:System.Activities.Design.CachedResourceDictionaryExtension"></member>
    <member name="M:System.Activities.Design.CachedResourceDictionaryExtension.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.CachedResourceDictionaryExtension" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.CachedResourceDictionaryExtension.ProvideValue(System.IServiceProvider)">
      <returns>Returns 
<see cref="T:System.Object" />
.</returns>
      <param name="serviceProvider"></param>
    </member>
    <member name="P:System.Activities.Design.CachedResourceDictionaryExtension.Source">
      <returns>Returns 
<see cref="T:System.Uri" />
.</returns>
    </member>
    <member name="T:System.Activities.Design.ClipboardData"></member>
    <member name="M:System.Activities.Design.ClipboardData.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.ClipboardData" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.ClipboardData.Data">
      <returns>Returns 
<see cref="T:System.Collections.Generic.List`1" />
.</returns>
    </member>
    <member name="P:System.Activities.Design.ClipboardData.Metadata">
      <returns>Returns 
<see cref="T:System.Collections.Generic.List`1" />
.</returns>
    </member>
    <member name="P:System.Activities.Design.ClipboardData.Version">
      <returns>Returns 
<see cref="T:System.String" />
.</returns>
    </member>
    <member name="T:System.Activities.Design.CommandInfo">
      <summary>Describes a command on the designer, such as copy or paste.</summary>
    </member>
    <member name="P:System.Activities.Design.CommandInfo.Command">
      <summary>A unique identifier that represents some behavior or action.</summary>
      <returns>Returns 
<see cref="T:System.Windows.Input.ICommand" />.</returns>
    </member>
    <member name="P:System.Activities.Design.CommandInfo.IsBindingEnabledInDesigner">
      <summary>Determines whether binding is enabled in the designer for the specified command.</summary>
      <returns>true if binding is enabled in the designer for the specified command; otherwise, false.</returns>
    </member>
    <member name="T:System.Activities.Design.CommandValues">
      <summary>A commanding interface that is used for integration of workflow designer actions (e.g., context menu) with custom provided implementation - i.e. property browser service, debugging service, etc.
</summary>
    </member>
    <member name="F:System.Activities.Design.CommandValues.DeleteBreakpoint">
      <summary>The command to delete a breakpoint.</summary>
    </member>
    <member name="F:System.Activities.Design.CommandValues.DisableBreakpoint">
      <summary>The command to disable a breakpoint.</summary>
    </member>
    <member name="F:System.Activities.Design.CommandValues.EnableBreakpoint">
      <summary>The command to enable a breakpoint.</summary>
    </member>
    <member name="F:System.Activities.Design.CommandValues.InsertBreakpoint">
      <summary>The command to insert a breakpoint.</summary>
    </member>
    <member name="F:System.Activities.Design.CommandValues.ShowProperties">
      <summary>Opens the Visual Studio Proeprty Grid to show the properties.
</summary>
    </member>
    <member name="T:System.Activities.Design.CutCopyPasteHelper">
      <summary>Provides functions to cut, copy, and paste items.</summary>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.AddChildContainer(System.Activities.Design.WorkflowViewElement,System.Activities.Design.ISourceContainer)">
      <summary>Adds the specified <see cref="T:System.Activities.Design.ISourceContainer" /> to the view element.</summary>
      <param name="viewElement">The view element where the new container is added to.</param>
      <param name="sourceContainer">The container to be added.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.CanCopy(System.Activities.Design.EditingContext)">
      <summary>Verifies whether items can be copied from the specified editing context.</summary>
      <returns>true if the number of the selected objects is more than 0 and <paramref name="context" /> is not null; otherwise, false.</returns>
      <param name="context">The editing context to be verified.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.CanCut(System.Activities.Design.EditingContext)">
      <summary>Verifies whether items can be cut from the specified editing context.</summary>
      <returns>true if the number of the selected objects is more than 0 and <paramref name="context" /> is not null; otherwise, false.</returns>
      <param name="context">The editing context to be verified.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.CanPaste(System.Activities.Design.EditingContext)">
      <summary>Returns a Boolean that indicates whether the specified objects can be pasted. </summary>
      <returns>true if the number of the specified objects is more than 0 and not null; otherwise, false.</returns>
      <param name="context">The editing context for the paste operation.</param>
    </member>
    <member name="P:System.Activities.Design.CutCopyPasteHelper.ChildContainers">
      <summary>Gets all the child containers.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="F:System.Activities.Design.CutCopyPasteHelper.ChildContainersProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.CutCopyPasteHelper.ChildContainers" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.DoCopy(System.Activities.Design.EditingContext)">
      <summary>Copies the currently selected items from the specified editing context to the clipboard.</summary>
      <param name="context">The editing context from which items are copied.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.DoCopy(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem},System.Activities.Design.EditingContext)">
      <summary>Copies the specified items from the specified editing context to the clipboard.</summary>
      <param name="modelItemsToCopy">Items to be copied.</param>
      <param name="context">The editing context from which items are copied.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.DoCut(System.Activities.Design.EditingContext)">
      <summary>Deletes the currently selected items from an editing context.</summary>
      <param name="context">The editing context from which items are removed.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.DoCut(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem},System.Activities.Design.EditingContext)">
      <summary>Deletes the specified items from the specified editing context.</summary>
      <param name="modelItemsToCut">Items to be cut.</param>
      <param name="context">The editing context from which items are removed.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.DoPaste(System.Activities.Design.EditingContext)">
      <summary>Pastes items in the clipboard in a default location in the specified editing context. </summary>
      <param name="context">The editing context to which items are pasted.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.DoPaste(System.Activities.Design.EditingContext,System.Windows.Point,System.Activities.Design.WorkflowViewElement)">
      <summary>Pastes items in the clipboard in the specified location in the specified editing context. </summary>
      <param name="context">The editing context to which items are pasted.</param>
      <param name="pastePoint">The location of the paste operation.</param>
      <param name="pastePointReference">A reference to the paste point.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.DoPaste(System.Activities.Design.Model.ModelItem,System.Windows.Point,System.Activities.Design.WorkflowViewElement)">
      <summary>Pastes specified items in the specified location.</summary>
      <param name="modelItem">Items to be pasted.</param>
      <param name="pastePoint">The location of the paste operation.</param>
      <param name="pastePointReference">A reference to the paste point.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.GetChildContainers(System.Activities.Design.WorkflowViewElement)">
      <summary>Retrieves all the child containers of the specified view element.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
      <param name="workflowViewElement">The parent view element.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.GetParentViewElement(System.Windows.DependencyObject)">
      <summary>Retrieves the first <see cref="T:System.Activities.Design.WorkflowViewElement" /> instance in the parent chain.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.WorkflowViewElement" />.</returns>
      <param name="obj">The object whose parent is to be returned.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.GetSelectableParentModelItems(System.Activities.Design.Model.ModelItem)">
      <summary>Retrieves all the <see cref="T:System.Activities.Design.Model.ModelItem" /> instances in the parent chain.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
      <param name="modelItem">The item whose parent is to be returned.</param>
    </member>
    <member name="M:System.Activities.Design.CutCopyPasteHelper.RegisterWithParentViewElement(System.Activities.Design.ISourceContainer)">
      <summary>Retrieves the first <see cref="T:System.Activities.Design.WorkflowViewElement" /> instance in the parent chain of the specified container, and adds it as a child container to the view element.</summary>
      <param name="container">The child container to be added.</param>
    </member>
    <member name="F:System.Activities.Design.CutCopyPasteHelper.WorkflowCallbackClipboardFormat">
      <summary>Gets a workflow callback clipboard format, which is unique across all processes.</summary>
    </member>
    <member name="F:System.Activities.Design.CutCopyPasteHelper.WorkflowClipboardFormat">
      <summary>Gets a workflow clipboard format, which is “WorkflowXamlFormat”.</summary>
    </member>
    <member name="T:System.Activities.Design.DefaultCommandExtensionCallback">
      <summary>Provides default key input gestures for most of the Workflow commands. </summary>
    </member>
    <member name="M:System.Activities.Design.DefaultCommandExtensionCallback.#ctor">
      <summary>Initiates a new instance of the <see cref="T:System.Activities.Design.DefaultCommandExtensionCallback" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.DefaultCommandExtensionCallback.ContainsGesture(System.Windows.Input.RoutedCommand,System.Windows.Input.KeyGesture)">
      <summary>Verifies whether a command contains the specified gesture.</summary>
      <returns>Returns <see cref="T:System.Boolean" />. true if <paramref name="cmd" /> contains <paramref name="gesture" />; otherwise, false.</returns>
      <param name="cmd">The command to be checked.</param>
      <param name="gesture">The gesture to be checked.</param>
    </member>
    <member name="M:System.Activities.Design.DefaultCommandExtensionCallback.OnWorkflowCommandLoaded(System.Activities.Design.CommandInfo)">
      <summary>Adds relevant gestures based on the specified workflow command to be loaded.
</summary>
      <param name="commandInfo">The workflow command to be loaded.
</param>
    </member>
    <member name="T:System.Activities.Design.DefaultTypeArgumentAttribute"></member>
    <member name="M:System.Activities.Design.DefaultTypeArgumentAttribute.#ctor(System.Type)">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.DefaultTypeArgumentAttribute" /> class.</summary>
      <param name="type"></param>
    </member>
    <member name="P:System.Activities.Design.DefaultTypeArgumentAttribute.Type">
      <returns>Returns 
<see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.Activities.Design.DeleteHelper">
      <summary>Represents a class that can be used to delete an <see cref="System.Activities.Design.EditingContext" /> object. </summary>
    </member>
    <member name="M:System.Activities.Design.DeleteHelper.CanDelete(System.Activities.Design.EditingContext)">
      <summary>Checks whether the deletion operation can be performed by verifying whether the specified <see cref="System.Activities.Design.EditingContext" /> object is null or empty. </summary>
      <returns>true if the deletion can be performed; otherwise, false.</returns>
      <param name="context">The <see cref="System.Activities.Design.EditingContext" /> object to be deleted.</param>
    </member>
    <member name="M:System.Activities.Design.DeleteHelper.Delete(System.Activities.Design.EditingContext)">
      <summary>Deletes the specified <see cref="System.Activities.Design.EditingContext" /> object.</summary>
      <param name="context">The <see cref="System.Activities.Design.EditingContext" /> object to be deleted.</param>
    </member>
    <member name="T:System.Activities.Design.DragDropHelper">
      <summary>Represents a helper class to assist dragging and dropping inside the workflow designer.</summary>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.AllowDrop(System.Windows.IDataObject,System.Activities.Design.EditingContext,System.Type[])">
      <summary>Gets or sets a value indicating whether the designer can accept data that the user drags onto it.
</summary>
      <returns>true if drag-and-drop operations are allowed in the designer; otherwise, false.
</returns>
      <param name="draggedDataObject">The data object that is being dragged.
</param>
      <param name="context">The <see cref="T:System.Activities.Design.EditingContext" /> for the DragDropHelper.
</param>
      <param name="allowedItemTypes">Contains the types that are allowed to be dragged.
</param>
    </member>
    <member name="F:System.Activities.Design.DragDropHelper.CompletedEffectsFormat">
      <summary>Specifies the desired effects of the completion of a drag-and-drop operation.</summary>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.DoDragMove(System.Activities.Design.WorkflowViewElement,System.Windows.Point)">
      <summary>Allows a UI element to be dragged by a mouse with its left button down over an exposed area of the UI element’s client area.
</summary>
      <returns>A value from the <see cref="T:System.Windows.DragDropEffects" /> enumeration that represents the final effect that was performed during the drag-and-drop operation.</returns>
      <param name="draggedViewElement">The UI element on which the operation happens.</param>
      <param name="referencePoint">The location of the drag point.</param>
    </member>
    <member name="F:System.Activities.Design.DragDropHelper.DragAnchorPointFormat">
      <summary>Specifies the format for a drag operation anchor point.</summary>
    </member>
    <member name="F:System.Activities.Design.DragDropHelper.DragSourceProperty">
      <summary>Specifies the drag source.</summary>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.GetDragDropAnchorPoint(System.Windows.DragEventArgs)">
      <summary>Retrieves the anchor point for a drag-and-drop operation.</summary>
      <returns>Returns <see cref="T:System.Windows.Point" />.</returns>
      <param name="e">Contains the drag event data.</param>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.GetDragDropCompletedEffects(System.Windows.DataObject)">
      <summary>Retrieves the desired effects of the completion of a drag-and-drop operation.</summary>
      <returns>Returns <see cref="T:System.Windows.DragDropEffects" />.</returns>
      <param name="data">Contains the drag operation data.</param>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.GetDraggedModelItem(System.Windows.DragEventArgs)">
      <summary>Retrieves the object that is being dragged in a drag-and-drop operation.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.Model.ModelItem" />.</returns>
      <param name="e">Contains the drag event data.</param>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.GetDroppedObject(System.Windows.DependencyObject,System.Windows.DragEventArgs,System.Activities.Design.EditingContext)">
      <summary>Retrieves the object that is being dropped in a drag-and-drop operation.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="dropTarget">The location for the drag.</param>
      <param name="e">Contains the drag event data.</param>
      <param name="context">The editing context.</param>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.GetSourceContainer(System.Activities.Design.WorkflowViewElement)">
      <summary>Retrieves the source container for the specified workflow view element.</summary>
      <returns>A <see cref="T:System.Windows.UIElement" /> that is the source container for the specified workflow view element.</returns>
      <param name="workflowViewElement">The element from which the source container is retrieved.</param>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.GetSourceContainer(System.Windows.DragEventArgs)">
      <summary>Retrieves the source container for the UI element being dragged.</summary>
      <returns>An <see cref="T:System.Activities.Design.ISourceContainer" /> for the UI element being dragged.</returns>
      <param name="e">Contains the drag event data.</param>
    </member>
    <member name="F:System.Activities.Design.DragDropHelper.ModelItemDataFormat">
      <summary>Specifies the format for model item data.</summary>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.SetDragDropCompletedEffects(System.Windows.DragEventArgs,System.Windows.DragDropEffects)">
      <summary>Sets the final effect that is to be performed during the drag-and-drop operation.
</summary>
      <param name="e">Contains the drag event data.</param>
      <param name="completedEffects">The desired effects of a drag-and-drop operation.</param>
    </member>
    <member name="M:System.Activities.Design.DragDropHelper.SetSourceContainer(System.Activities.Design.WorkflowViewElement,System.Windows.UIElement)">
      <summary>Sets the source container for the UI element being dragged.</summary>
      <param name="workflowViewElement">The source container.</param>
      <param name="dragSource">The UI element being dragged.</param>
    </member>
    <member name="F:System.Activities.Design.DragDropHelper.SourceContainerFormat">
      <summary>Specifies the format for a source container.</summary>
    </member>
    <member name="F:System.Activities.Design.DragDropHelper.WorkflowItemTypeNameFormat">
      <summary>Specifies the format for the type name of a workflow item.</summary>
    </member>
    <member name="T:System.Activities.Design.EditorOptionsAttribute">
      <summary>Specifies the editor options.</summary>
    </member>
    <member name="M:System.Activities.Design.EditorOptionsAttribute.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.EditorOptionsAttribute" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.EditorOptionsAttribute.GetOptionValue``1(System.Collections.IEnumerable,System.String,``0)">
      <returns>Returns 
<see cref="{0}" />
.</returns>
      <param name="attributes"></param>
      <param name="optionName"></param>
      <param name="defaultValue"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.Activities.Design.EditorOptionsAttribute.Name">
      <summary>Gets or sets the name of the editor options.</summary>
      <returns>The name of the editor options.</returns>
    </member>
    <member name="M:System.Activities.Design.EditorOptionsAttribute.TryGetOptionValue(System.Collections.IEnumerable,System.String,System.Object@)">
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="attributes"></param>
      <param name="optionName"></param>
      <param name="optionValue"></param>
    </member>
    <member name="P:System.Activities.Design.EditorOptionsAttribute.TypeId">
      <summary>Gets the type of the object used to identify the editor options.</summary>
      <returns>The <see cref="T:System.Object" /> for the ID.</returns>
    </member>
    <member name="P:System.Activities.Design.EditorOptionsAttribute.Value">
      <summary>Gets or sets the value of the editor options.</summary>
      <returns>The <see cref="T:System.Object" /> used for the value.</returns>
    </member>
    <member name="T:System.Activities.Design.ErrorItem"></member>
    <member name="M:System.Activities.Design.ErrorItem.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.ErrorItem" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.ErrorItem.Details">
      <returns>Returns 
<see cref="T:System.String" />
.</returns>
    </member>
    <member name="P:System.Activities.Design.ErrorItem.ItemType">
      <returns>Returns 
<see cref="T:System.Type" />
.</returns>
    </member>
    <member name="P:System.Activities.Design.ErrorItem.Message">
      <returns>Returns 
<see cref="T:System.String" />
.</returns>
    </member>
    <member name="T:System.Activities.Design.ErrorReporting">
      <summary>Represents a class that can be used to generate error messages. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Activities.Design.ErrorReporting.ShowErrorMessage(System.String)">
      <summary>Generates the specified error message.</summary>
      <param name="message">The error message to be displayed.</param>
    </member>
    <member name="T:System.Activities.Design.Feature"></member>
    <member name="M:System.Activities.Design.Feature.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.Feature" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.Feature.Initialize(System.Activities.Design.EditingContext,System.Type)">
      <param name="context"></param>
      <param name="modelType"></param>
    </member>
    <member name="T:System.Activities.Design.FeatureAttribute"></member>
    <member name="M:System.Activities.Design.FeatureAttribute.#ctor(System.Type)"></member>
    <member name="P:System.Activities.Design.FeatureAttribute.Type"></member>
    <member name="T:System.Activities.Design.IActivityTemplateFactory">
      <summary>Defines the factory for creating instances of the <see cref="T:System.Activities.Activity" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.IActivityTemplateFactory.Create">
      <summary>Creates an instance of the <see cref="T:System.Activities.Activity" /> class.</summary>
      <returns>Creates an 
<see cref="T:System.Activities.Activity" /> object.</returns>
    </member>
    <member name="T:System.Activities.Design.IActivityToolboxService"></member>
    <member name="M:System.Activities.Design.IActivityToolboxService.AddCategory(System.String)"></member>
    <member name="M:System.Activities.Design.IActivityToolboxService.AddItem(System.String,System.String)"></member>
    <member name="M:System.Activities.Design.IActivityToolboxService.EnumCategories"></member>
    <member name="M:System.Activities.Design.IActivityToolboxService.EnumItems(System.String)"></member>
    <member name="M:System.Activities.Design.IActivityToolboxService.RemoveCategory(System.String)"></member>
    <member name="M:System.Activities.Design.IActivityToolboxService.RemoveItem(System.String,System.String)"></member>
    <member name="T:System.Activities.Design.ICommandService">
      <summary>Represents a command interface that is used for integration of workflow designer actions (for example, context menu), with custom-provided implementations, such as property browser service, debugging service, and so on.</summary>
    </member>
    <member name="M:System.Activities.Design.ICommandService.CanExecuteCommand(System.Int32)">
      <summary>Verifies whether the specified command can be executed.</summary>
      <returns>true if the specified command can be executed; otherwise, false.</returns>
      <param name="commandId">The command identifier to be checked.</param>
      <exception cref="T:System.NotSupportedException">The command is not supported.</exception>
    </member>
    <member name="M:System.Activities.Design.ICommandService.ExecuteCommand(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>Executes the command with the specified command identifier and parameters.</summary>
      <param name="commandId">The command identifier to be checked.</param>
      <param name="parameters">The parameters of the command.</param>
      <exception cref="T:System.NotSupportedException">The command is not supported.</exception>
    </member>
    <member name="M:System.Activities.Design.ICommandService.IsCommandSupported(System.Int32)">
      <summary>Returns a Boolean value that indicates whether the specified command identifier is supported.</summary>
      <returns>true if the specified command ID is supported; otherwise, false.</returns>
      <param name="commandId">The command identifier to be checked.</param>
    </member>
    <member name="T:System.Activities.Design.IIntegratedHelpService"></member>
    <member name="M:System.Activities.Design.IIntegratedHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <param name="name"></param>
      <param name="value"></param>
      <param name="keywordType"></param>
    </member>
    <member name="M:System.Activities.Design.IIntegratedHelpService.RemoveContextAttribute(System.String,System.String)">
      <param name="name"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.Activities.Design.IIntegratedHelpService.ShowHelpFromKeyword(System.String)"></member>
    <member name="M:System.Activities.Design.IIntegratedHelpService.ShowHelpFromUrl(System.String)"></member>
    <member name="T:System.Activities.Design.ISourceContainer">
      <summary>Provides functions to copy, move, delete, and paste objects. </summary>
    </member>
    <member name="M:System.Activities.Design.ISourceContainer.CanPasteItems(System.Collections.Generic.List{System.Object})">
      <summary>Returns a Boolean that indicates whether the specified objects can be pasted. </summary>
      <returns>true if the number of the specified objects is more than 0 and not null; otherwise, false.</returns>
      <param name="itemsToPaste">The item to be pasted.</param>
    </member>
    <member name="P:System.Activities.Design.ISourceContainer.DroppingTypeResolvingOptions"></member>
    <member name="P:System.Activities.Design.ISourceContainer.IsDefaultContainer">
      <summary>Gets a Boolean value that indicates whether this is the default container.</summary>
      <returns>true if this is the default container; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.ISourceContainer.OnItemMoved(System.Activities.Design.Model.ModelItem)">
      <summary>An event that allows you to move the specified <see cref="T: System.Activities.Design.Model.ModelItem" />. </summary>
      <param name="modelItem">The item moved.</param>
    </member>
    <member name="M:System.Activities.Design.ISourceContainer.OnItemsCopied(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>An event that allows you to get the specified  <see cref="T: System.Activities.Design.Model.ModelItem)" /> instances and clones them.</summary>
      <returns>Returns <see cref="T:System.Object" />, which is a clone of <paramref name="itemsToCopy" />.</returns>
      <param name="itemsToCopy">The items cloned.</param>
    </member>
    <member name="M:System.Activities.Design.ISourceContainer.OnItemsCut(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>An event that allows you to clone the specified  <see cref="T: System.Activities.Design.Model.ModelItem" /> instances and deletes them from the current container.</summary>
      <returns>Returns <see cref="T:System.Object" />, which is a clone of <paramref name="itemsToCut" />.</returns>
      <param name="itemsToCut">The items cut.</param>
    </member>
    <member name="M:System.Activities.Design.ISourceContainer.OnItemsDelete(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>An event that allows you to get the specified  <see cref="T: System.Activities.Design.Model.ModelItem" /> instances and removes them.</summary>
      <param name="itemsToDelete">The items deleted.</param>
    </member>
    <member name="M:System.Activities.Design.ISourceContainer.OnItemsPasted(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Windows.Point,System.Activities.Design.WorkflowViewElement)">
      <summary>An event that allows you to paste the specified <see cref="T: System.Activities.Design.Model.ModelItem" /> instances to the specified location.</summary>
      <param name="itemsToPaste">The items   pasted.</param>
      <param name="metadata">Metadata associated with the items   pasted.</param>
      <param name="pastePoint">The location of the paste.</param>
      <param name="pastePointReference">A reference to the paste point.</param>
    </member>
    <member name="T:System.Activities.Design.ISourceContainerEvents">
      <summary>Provides base events for the <see cref="T:System.Activities.Design.ISourceContainer" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.ISourceContainerEvents.ContainerLoaded(System.Activities.Design.ISourceContainer)">
      <summary>Occurs when the specified container is loaded.</summary>
      <param name="container">The container to be loaded.</param>
    </member>
    <member name="M:System.Activities.Design.ISourceContainerEvents.ContainerUnloaded(System.Activities.Design.ISourceContainer)">
      <summary>Occurs when the specified container is unloaded.</summary>
      <param name="container">The container to be unloaded.</param>
    </member>
    <member name="M:System.Activities.Design.ISourceContainerEvents.DefaultContainerLoaded(System.Activities.Design.ISourceContainer)">
      <summary>Occurs when the default container is loaded.</summary>
      <param name="container">The default container to be loaded.</param>
    </member>
    <member name="M:System.Activities.Design.ISourceContainerEvents.DefaultContainerUnloaded(System.Activities.Design.ISourceContainer)">
      <summary>Occurs when the default container is unloaded.</summary>
      <param name="container">The default container to be unloaded.</param>
    </member>
    <member name="T:System.Activities.Design.IWorkflowCommandExtensionCallback">
      <summary>Provides additional functions when a  specified workflow command is loaded. </summary>
    </member>
    <member name="M:System.Activities.Design.IWorkflowCommandExtensionCallback.OnWorkflowCommandLoaded(System.Activities.Design.CommandInfo)">
      <summary>Provides additional functions based on the specified workflow command to be loaded.
</summary>
      <param name="commandInfo">The workflow command to be loaded.
</param>
    </member>
    <member name="T:System.Activities.Design.MutableKeyValuePair`2">
      <summary>Defines a key/value pair that can be modified. 
</summary>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="M:System.Activities.Design.MutableKeyValuePair`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.MutableKeyValuePair`2" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.MutableKeyValuePair`2.#ctor(`0,`1)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.MutableKeyValuePair`2" /> class with the specified key and value.</summary>
      <param name="key">The type of the key. 
</param>
      <param name="value">The type of the value. 

</param>
    </member>
    <member name="P:System.Activities.Design.MutableKeyValuePair`2.Key">
      <summary>Gets or sets the key in the key/value pair.</summary>
    </member>
    <member name="P:System.Activities.Design.MutableKeyValuePair`2.Value">
      <summary>Gets or sets the value in the key/value pair.</summary>
    </member>
    <member name="T:System.Activities.Design.ReadOnlyState">
      <summary>Indicates whether an object is read-only.</summary>
    </member>
    <member name="M:System.Activities.Design.ReadOnlyState.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.ReadOnlyState" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.ReadOnlyState.IsReadOnly">
      <summary>Gets a value that indicates whether the object is read-only.</summary>
      <returns>true if the object is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.ReadOnlyState.ItemType">
      <summary>Gets the type of the current object.</summary>
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.Activities.Design.TypeResolvingOptionsAttribute"></member>
    <member name="M:System.Activities.Design.TypeResolvingOptionsAttribute.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.TypeResolvingOptionsAttribute" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.TypeResolvingOptionsAttribute.#ctor(System.Activities.Design.View.TypeResolvingOptions)">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.TypeResolvingOptionsAttribute" /> class with a specified type resolving attribute.</summary>
      <param name="options"></param>
    </member>
    <member name="P:System.Activities.Design.TypeResolvingOptionsAttribute.TypeResolvingOptions">
      <summary>Gets or sets the options for resolving types.</summary>
      <returns>An instance of 
<see cref="T:System.Activities.Design.View.TypeResolvingOptions" /> specifying the options for resolving types.</returns>
    </member>
    <member name="T:System.Activities.Design.UndoEngine">
      <summary>Provides undo and redo operation implementations for designers.</summary>
    </member>
    <member name="M:System.Activities.Design.UndoEngine.#ctor(System.Activities.Design.EditingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.UndoEngine" /> class.</summary>
      <param name="context">The editing context.</param>
    </member>
    <member name="M:System.Activities.Design.UndoEngine.AddUndoUnit(System.Activities.Design.UndoUnit)">
      <summary>Adds the specified unit to the undo stack.  </summary>
      <param name="unit">The undo unit to add.  </param>
    </member>
    <member name="P:System.Activities.Design.UndoEngine.IsUndoRedoInProgress">
      <summary>Gets a <see cref="T:System.Boolean" /> value indicating whether an undo or redo operation is in process.</summary>
      <returns>true if an undo or redo operation is in process; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.UndoEngine.Redo">
      <summary>Removes the last <see cref="T:System.Activities.Design.UndoUnit" /> instance from the redo stack, and performs a redo operation on the unit. The <see cref="T:System.Activities.Design.UndoUnit" /> instance is then put into the undo stack.</summary>
    </member>
    <member name="M:System.Activities.Design.UndoEngine.Undo">
      <summary>Removes the last <see cref="T:System.Activities.Design.UndoUnit" /> instance from the undo stack, and performs an undo operation on the unit. The <see cref="T:System.Activities.Design.UndoUnit" /> instance is then put into the redo stack.</summary>
    </member>
    <member name="E:System.Activities.Design.UndoEngine.UndoUnitAdded">
      <summary>Occurs when an undo unit is added to the undo stack.</summary>
    </member>
    <member name="E:System.Activities.Design.UndoEngine.UndoUnitDiscarded">
      <summary>Occurs when an undo unit is removed from the undo stack, without first performing an undo operation.
</summary>
    </member>
    <member name="T:System.Activities.Design.UndoUnit">
      <summary>Represents a single unit of undoable work. Such a unit is added to an undo stack, and methods are provided to traverse the stack and perform an undo action on each unit.
</summary>
    </member>
    <member name="M:System.Activities.Design.UndoUnit.#ctor(System.Activities.Design.EditingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.UndoUnit" /> class.</summary>
      <param name="context">The editing context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Design.UndoUnit.ApplyGlobalState">
      <summary>Applies the saved designer as the root designer.</summary>
    </member>
    <member name="P:System.Activities.Design.UndoUnit.Description">
      <summary>Gets or sets the description of this undo unit.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Activities.Design.UndoUnit.Redo"></member>
    <member name="M:System.Activities.Design.UndoUnit.SaveGlobalState">
      <summary>Persists the current root designer.</summary>
    </member>
    <member name="M:System.Activities.Design.UndoUnit.Undo">
      <summary>Undoes the content contained in this undo unit. </summary>
    </member>
    <member name="T:System.Activities.Design.UndoUnitEventArgs">
      <summary>Represents the argument that is passed to the <see cref="E:System.Activities.Design.UndoEngine.UndoUnitAddedevent" /> event.</summary>
    </member>
    <member name="M:System.Activities.Design.UndoUnitEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.UndoUnitEventArgs" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.UndoUnitEventArgs.UndoUnit">
      <summary>Gets or sets the <see cref="T:System.Activities.Design.UndoUnit" /> to be passed to the <see cref="E:System.Activities.Design.UndoEngine.UndoUnitAddedevent" /> event.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.UndoUnit" />.</returns>
    </member>
    <member name="T:System.Activities.Design.UpdatableGenericArgumentsFeature"></member>
    <member name="M:System.Activities.Design.UpdatableGenericArgumentsFeature.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.UpdatableGenericArgumentsFeature" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.UpdatableGenericArgumentsFeature.Initialize(System.Activities.Design.EditingContext,System.Type)">
      <param name="context"></param>
      <param name="modelType"></param>
    </member>
    <member name="T:System.Activities.Design.WindowHelperService">
      <summary>Provides functionalities to register and unregister delegates for event notifications, as well as set ownership for windows.</summary>
    </member>
    <member name="M:System.Activities.Design.WindowHelperService.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WindowHelperService" /> class with the specific handle to a parent window.</summary>
      <param name="hwnd">A handle to a parent window.</param>
    </member>
    <member name="P:System.Activities.Design.WindowHelperService.ParentWindowHwnd">
      <summary>Gets or sets the handle of the parent window.
</summary>
      <returns>Returns 
<see cref="T:System.IntPtr" />
.
</returns>
    </member>
    <member name="M:System.Activities.Design.WindowHelperService.RegisterWindowMessageHandler(System.Activities.Design.WindowMessage)">
      <summary>Registers the specified delegate for event notifications. </summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="callback">The delegate to be registered for event notifications.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="callback" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Design.WindowHelperService.TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)">
      <summary>Assign the window to be the owner of the specified window. </summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="source">The owner of <paramref name="target" />.</param>
      <param name="target">The window that is to be owned by <paramref name="source" />.</param>
    </member>
    <member name="M:System.Activities.Design.WindowHelperService.UnregisterWindowMessageHandler(System.Activities.Design.WindowMessage)">
      <summary>Unregisters the specified delegate for event notifications. </summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="callback">The delegate to be removed from event notifications.</param>
    </member>
    <member name="T:System.Activities.Design.WindowMessage">
      <summary>Represents the method that will handle registering a window message.</summary>
    </member>
    <member name="T:System.Activities.Design.WorkflowCommandExtensionItem">
      <summary>Provides functions to update each workflow's designer command (that is, input gestures collection). You should provide an <see cref="T:System.Activities.Design.IWorkflowCommandExtensionCallback" /> implementation to receive notifications.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowCommandExtensionItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowCommandExtensionItem" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowCommandExtensionItem.#ctor(System.Activities.Design.IWorkflowCommandExtensionCallback)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowCommandExtensionItem" /> class with the specified <see cref="T:System.Activities.Design.IWorkflowCommandExtensionCallback" /> implementation to receive notifications.</summary>
      <param name="callback">An <see cref="T:System.Activities.Design.IWorkflowCommandExtensionCallback" /> implementation to receive notifications.</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowCommandExtensionItem.ItemType">
      <summary>Returns the type of this extension item.</summary>
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.Activities.Design.WorkflowDesigner">
      <summary>Provides a designer canvas which renders the visual representation of a workflow model as it is being designed.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowDesigner" />class.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesigner.Context">
      <summary>Gets or sets an <see cref="T:System.Activities.Design.EditingContext" /> object that is a collection of services shared between all elements contained in the designer and used to interact between the host and the designer. Services are published and requested through the <see cref="T:System.Activities.Design.EditingContext" />. </summary>
      <returns>An <see cref="T:System.Activities.Design.EditingContext" /> object.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesigner.ContextMenu">
      <summary>Gets the context menu for this designer.
</summary>
      <returns>Returns 
<see cref="T:System.Windows.Controls.ContextMenu" />
.
</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesigner.DebugManagerView">
      <summary>Provides a <see cref="T:System.Activities.Design.Debug.DebuggerService" />that is used for runtime debugging. </summary>
      <returns>Returns an object that implements <see cref="T:System.Activities.Design.Debug.IDesignerDebugView" />.</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.DeserializeString(System.String)">
      <summary>Converts a XAML string into a workflow.</summary>
      <returns>Returns a workflow as a <see cref="T:System.Object" />.</returns>
      <param name="text">The XAML string to convert.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.Flush">
      <summary>Saves the current state of the workflow to the <see cref="P:System.WorkflowModel.Design.WorkflowDesigner.Text" />property.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.IsInErrorState">
      <summary>Gets a Boolean value that indicates if the workflow designer is in error state.
</summary>
      <returns>true if the workflow designer is in error state; otherwise, false.
.
</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.Load">
      <summary>Loads a workflow from the XAML contained in the <see cref="P:System.Activities.Design.WorkflowDesigner.Text" />property.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.Load(System.Object)">
      <summary>Loads a workflow.</summary>
      <param name="instance">The root of the workflow to load.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.Load(System.String)">
      <summary>Loads a workflow from the XAML contained in the specified file.
</summary>
      <param name="fileName">The file name of the XAML file.
</param>
    </member>
    <member name="E:System.Activities.Design.WorkflowDesigner.PendingTextChanged"></member>
    <member name="P:System.Activities.Design.WorkflowDesigner.PropertyInspectorFontAndColorData"></member>
    <member name="P:System.Activities.Design.WorkflowDesigner.PropertyInspectorView">
      <summary>Returns a UI element that allows the user to view and edit properties of the workflow.</summary>
      <returns>Returns a <see cref="T:System.Windows.UIElement" /> object.</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowDesigner.Save(System.String)">
      <summary>Saves the workflow to a XAML file.


</summary>
      <param name="fileName">The file name of the XAML file.
</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesigner.Text">
      <summary>Gets or sets the XAML string representation of the workflow.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="E:System.Activities.Design.WorkflowDesigner.TextChanged">
      <summary>Occurs when the <see cref="P:System.Activities.Design.WorkflowDesigner.Text" /> property value changes.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesigner.View">
      <summary>Returns a UI element that allows the user to view and edit the workflow visually.</summary>
      <returns>Returns a <see cref="T:System.Windows.UIElement" /> object.</returns>
    </member>
    <member name="T:System.Activities.Design.WorkflowDesignerColors">
      <summary>An enumeration for colors to be used for the workflow designer user interface</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewBackgroundColor">
      <summary>Gets the color to be used for the designer background.</summary>
      <returns>Returns <see cref="T:System.Windows.Media.Color" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewBackgroundColorKey">
      <summary>Specifies the color key to be used for the designer background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarCaptionActiveColor">
      <returns>Returns 
<see cref="T:System.Windows.Media.Color" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarCaptionActiveColorKey"></member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarCaptionColor">
      <returns>Returns 
<see cref="T:System.Windows.Media.Color" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarCaptionColorKey"></member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarColorGradientBeginColor">
      <returns>Returns 
<see cref="T:System.Windows.Media.Color" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarColorGradientBeginKey"></member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarColorGradientEndColor">
      <returns>Returns 
<see cref="T:System.Windows.Media.Color" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarColorGradientEndKey"></member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarControlBackgroundColor">
      <returns>Returns 
<see cref="T:System.Windows.Media.Color" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarControlBackgroundColorKey"></member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientBeginColor">
      <returns>Returns 
<see cref="T:System.Windows.Media.Color" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientBeginKey"></member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientEndColor">
      <returns>Returns 
<see cref="T:System.Windows.Media.Color" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarHoverColorGradientEndKey"></member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientBeginColor">
      <returns>Returns 
<see cref="T:System.Windows.Media.Color" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientBeginKey"></member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientEndColor">
      <returns>Returns 
<see cref="T:System.Windows.Media.Color" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewShellBarSelectedColorGradientEndKey"></member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.DesignerViewStatusBarBackgroundColor">
      <summary>Retrieves the color to be used for the designer status bar background, using the preset key.</summary>
      <returns>Returns <see cref="T:System.Windows.Media.Color" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.DesignerViewStatusBarBackgroundColorKey">
      <summary>Specifies the color key to be used for the designer status bar background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.FontFamily">
      <summary>Retrieves the font family to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" />, using the preset key.
</summary>
      <returns>Returns 
<see cref="T:System.Windows.Media.FontFamily" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.FontFamilyKey">
      <summary>Specifies the key to be used for the font family. This field is constant.
</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.FontSize">
      <summary>Retrieves the font size to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" />, using the preset key.
</summary>
      <returns>Returns 
<see cref="T:System.Double" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.FontSizeKey">
      <summary>Specifies the key to be used for the font size. This field is constant.
</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.FontWeight">
      <summary>Retrieves the font weight to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" />, using the preset key.
</summary>
      <returns>Returns 
<see cref="T:System.Windows.FontWeight" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.FontWeightKey">
      <summary>Specifies the key to be used for the font weight. This field is constant.
</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementBackgroundColor">
      <summary>Retrieves the color to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> background, using the preset key.</summary>
      <returns>Returns <see cref="T:System.Windows.Media.Color" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementBackgroundColorKey">
      <summary>Specifies the color key to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" />background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementBorderColor">
      <summary>Retrieves the color to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> border, using the preset key.</summary>
      <returns>Returns <see cref="T:System.Windows.Media.Color" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementBorderColorKey">
      <summary>Specifies the color key to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" />border. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementCaptionColor">
      <summary>Retrieves the color to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> caption, using the preset key.</summary>
      <returns>Returns <see cref="T:System.Windows.Media.Color" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementCaptionColorKey">
      <summary>Specifies the color key to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" />caption. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementSelectedBackgroundColor">
      <summary>Retrieves the color to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> selected background, using the preset key.</summary>
      <returns>Returns <see cref="T:System.Windows.Media.Color" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementSelectedBackgroundColorKey">
      <summary>Specifies the color key to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> selected background. This field is constant.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementSelectedBorderColor">
      <summary>Retrieves the color to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> selected border, using the preset key.</summary>
      <returns>Returns <see cref="T:System.Windows.Media.Color" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowDesignerColors.WorkflowViewElementSelectedBorderColorKey">
      <summary>Specifies the color key to be used for the <see cref="T:System.Activities.Design.WorkflowViewElement" /> selected border. This field is constant.</summary>
    </member>
    <member name="T:System.Activities.Design.WorkflowElementDialog">
      <summary>Represents a dialog box for the workflow element.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialog.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowElementDialog" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.Context">
      <summary>Gets or sets the editing context associated with this dialog box.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.EditingContext" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowElementDialog.ContextProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowElementDialog.Context" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.EnableMaximizeButton">
      <summary>Gets or sets a Boolean value that determines whether the maximize button is enabled.
</summary>
      <returns>true if the maximize button is enabled; otherwise, false.
</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.EnableMinimizeButton">
      <summary>Gets or sets a Boolean value that determines whether the minimize button is enabled.
</summary>
      <returns>true if the minimize button is enabled; otherwise, false.
</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialog.EnableOk(System.Boolean)">
      <summary>Enables or disables the OK button of the dialog based on the specified value.
</summary>
      <param name="enabled">The OK button is enabled if this is true; otherwise, it is disabled.
</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.ModelItem">
      <summary>Gets or sets the <see cref="T:System.Activities.Design.Model.ModelItem" /> associated with this dialog box.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.Model.ModelItem" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowElementDialog.ModelItemProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowElementDialog.ModelItem" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialog.OnInitialized(System.EventArgs)">
      <summary>Raises the Initialized event.
</summary>
      <param name="e">Contains event data.
</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialog.OnModelItemChanged(System.Object)">
      <summary>When overridden in a derived class, occurs when the <see cref="T:System.Activities.Design.Model.ModelItem" /> is changed.</summary>
      <param name="newItem">The new <see cref="T:System.Activities.Design.Model.ModelItem" />.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialog.OnWorkflowElementDialogClosed(System.Nullable{System.Boolean})">
      <summary>For derived classes, this method is used for freeing up memory and other clean up operations.
</summary>
      <param name="dialogResult">A Boolean value that specifies whether the dialog box returned a result after closing.
</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.Owner">
      <summary>Gets or sets the owner of this dialog box.</summary>
      <returns>Returns <see cref="T:System.Windows.DependencyObject" />.</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialog.Show">
      <summary>Displays the dialog window.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialog.ShowOkCancel">
      <summary>Gets a value that indicates whether the OK or Cancel button is shown.</summary>
      <returns>true if the OK or Cancel button is shown; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.Title">
      <summary>Gets or sets the title of this dialog box.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowElementDialog.TitleProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowElementDialog.Title" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.WindowResizeMode">
      <summary>Gets or sets the resize mode of the window.
</summary>
      <returns>Returns a 
<see cref="T:System.Windows.ResizeMode" /> value.
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowElementDialog.WindowResizeModeProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowElementDialog.WindowResizeMode" /> dependency property.
</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowElementDialog.WindowSizeToContent">
      <summary>Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.
</summary>
      <returns>Returns a 
<see cref="T:System.Windows.SizeToContent" /> value.
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowElementDialog.WindowSizeToContentProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowElementDialog.WindowSizeToContent" /> dependency property.
</summary>
    </member>
    <member name="T:System.Activities.Design.WorkflowElementDialogWindow">
      <summary>Represents the dialog window of a workflow element.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialogWindow.#ctor(System.Activities.Design.WorkflowElementDialog,System.Boolean,System.Boolean,System.Boolean)"></member>
    <member name="M:System.Activities.Design.WorkflowElementDialogWindow.InitializeComponent">
      <summary>Initializes the dialog window.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowElementDialogWindow.OnInitialized(System.EventArgs)"></member>
    <member name="M:System.Activities.Design.WorkflowElementDialogWindow.OnSourceInitialized(System.EventArgs)"></member>
    <member name="M:System.Activities.Design.WorkflowElementDialogWindow.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>Attaches events and names to compiled content.</summary>
      <param name="connectionId">The connection ID.</param>
      <param name="target">The target.</param>
    </member>
    <member name="T:System.Activities.Design.WorkflowFileItem">
      <summary>Represents a file context item.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowFileItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowFileItem" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowFileItem.ItemType">
      <summary>Returns the item type for this file item.</summary>
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowFileItem.LoadedFile">
      <summary>Returns the name of the file that is being loaded.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Activities.Design.WorkflowItemPresenter">
      <summary>Provides a visual editor to edit ModelItem objects, and provides an area for the user to drag and drop, and otherwise edit composed elements.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowItemPresenter" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemPresenter.AllowedItemType">
      <summary>Gets or sets the AllowedItemType.</summary>
      <returns>A Type that contains the allowed item.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemPresenter.AllowedItemTypeProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemPresenter.AllowedItemType" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemPresenter.DroppingTypeResolvingOptions">
      <summary>Gets and sets the <see cref="T:System.Activities.Design.View.TypeResolvingOptions" /> for the <see cref="T:System.Activities.Design.WorkflowItemPresenter" />.
</summary>
      <returns>Returns a 
<see cref="T:System.Activities.Design.View.TypeResolvingOptions" />.
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemPresenter.DroppingTypeResolvingOptionsProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemPresenter.DroppingTypeResolvingOptions" /> dependency property.
</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemPresenter.HintText">
      <summary>Gets or sets the string that contains the hint text for the <see cref="T:System.Activities.Design.WorkflowItemPresenter" /> control.</summary>
      <returns>The hint text for the <see cref="T:System.Activities.Design.WorkflowItemPresenter" /> control.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemPresenter.HintTextProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemPresenter.HintText" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemPresenter.IsDefaultContainer">
      <summary>Gets or sets a value that indicates whether this is the default container.</summary>
      <returns>true if this is the default container; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemPresenter.IsDefaultContainerProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemPresenter.IsDefaultContainer" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemPresenter.Item">
      <summary>Gets or sets the current item of the <see cref="T:System.Activities.Design.WorkflowItemPresenter" /> control.</summary>
      <returns>The ModelItem associated with the <see cref="T:System.Activities.Design.WorkflowItemPresenter" /> control.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemPresenter.ItemProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemPresenter.Items" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemPresenter.System#Activities#Design#ISourceContainer#CanPasteItems(System.Collections.Generic.List{System.Object})">
      <summary>Returns a Boolean that indicates whether the specified objects can be pasted. 

</summary>
      <returns>true if the number of the specified objects is more than 0 and not null; otherwise, false.</returns>
      <param name="itemsToPaste">Objects to be pasted.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemPresenter.System#Activities#Design#ISourceContainer#OnItemMoved(System.Activities.Design.Model.ModelItem)">
      <summary>Occurs when the specified model item is changed.</summary>
      <param name="modelItem">The model item that is changed.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemPresenter.System#Activities#Design#ISourceContainer#OnItemsCopied(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>Occurs when the specified  <see cref="T:System.Activities.Design.Model.ModelItem" /> instances are cloned.</summary>
      <returns>A clone of <paramref name="itemsToCopy" />.</returns>
      <param name="itemsToCopy">The <see cref="T:System.Activities.Design.Model.ModelItem" /> instances to be copied.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemPresenter.System#Activities#Design#ISourceContainer#OnItemsCut(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>Clones the specified <see cref="T:System.Activities.Design.Model.ModelItem" /> instances and deletes them from the current container. 

</summary>
      <returns>A clone of <paramref name="itemsToCut" />.</returns>
      <param name="itemsToCut">The items to be cut.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemPresenter.System#Activities#Design#ISourceContainer#OnItemsDelete(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>Gets the specified <see cref="T:System.Activities.Design.Model.ModelItem" /> instances and removes them.</summary>
      <param name="itemsToDelete">The items to be deleted.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemPresenter.System#Activities#Design#ISourceContainer#OnItemsPasted(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Windows.Point,System.Activities.Design.WorkflowViewElement)">
      <summary>Occurs when the specified ModelItem instance is pasted to the specified location.</summary>
      <param name="itemsToPaste">The item to be pasted.
</param>
      <param name="metaData">Metadata associated with the item to be pasted.
</param>
      <param name="pastePoint">The location of the paste.</param>
      <param name="pastePointReference">A reference to the paste point.</param>
    </member>
    <member name="T:System.Activities.Design.WorkflowItemsPresenter">
      <summary>Represents a control that can be used to present a collection of objects on a design surface.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.AllowedItemType">
      <summary>Gets and sets the AllowedItemType.</summary>
      <returns>A Type that contains the allowed item.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.AllowedItemTypeProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemsPresenter.AllowedItemType" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.CanPasteItems(System.Collections.Generic.List{System.Object})">
      <summary>Returns a Boolean that indicates whether the specified objects can be pasted. 

</summary>
      <returns>true if the number of the specified objects is more than 0 and not null; otherwise, false.
</returns>
      <param name="itemsToPaste">Objects to be pasted.
</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.DroppingTypeResolvingOptions"></member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.DroppingTypeResolvingOptionsProperty"></member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.FooterTemplate">
      <summary>Gets or sets the DataTemplate that defines how the footer section of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control is displayed.</summary>
      <returns>A DataTemplate that defines how the footer section of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control is displayed.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.FooterTemplateProperty">
      <summary>Identifies the <see cref="P:System.WorkflowModel.Design.WorkflowItemsPresenter.FooterTemplate" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.HeaderTemplate">
      <summary>Gets or sets the DataTemplate that defines how the header section of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control is displayed.</summary>
      <returns>A DataTemplate that defines how the header section of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control is displayed.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.HeaderTemplateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemsPresenter.HeaderTemplate" /> dependency property.
</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.HintText">
      <summary>Gets or sets the string that contains the hint text for the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control.</summary>
      <returns>The hint text for the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.HintTextProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemsPresenter.HintText" /> dependency property.</summary>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.IndexProperty">
      <summary>Identifies the <see cref="F:System.Activities.Design.WorkflowItemsPresenter.IndexProperty" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.IsDefaultContainer">
      <summary>Returns a Boolean value that indicates if this is the default container.
</summary>
      <returns>true if this is if this is the default container; otherwise, false.
.
</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.IsDefaultContainerProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemsPresenter.IsDefaultContainer" />
dependency property.

</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.Items">
      <summary>Gets or sets the collection used to generate the content of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" />.</summary>
      <returns>A ModelItemCollection used to generate the content of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" />.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.ItemsPanel">
      <summary>Gets or sets the template that defines the panel that controls the layout of items.</summary>
      <returns>An ItemsPanelTemplate that defines the panel to use for the layout of the items.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.ItemsPanelProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemsPresenter.ItemsPanel" /> dependency property.</summary>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.ItemsProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemsPresenter.Items" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Activities.Design.WorkflowItemsPresenter" />-specific AutomationPeer implementation for the  infrastructure. Implement this method in your derived class to add class handling for this event.</summary>
      <returns>The type-specific AutomationPeer implementation.</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnDragEnter(System.Windows.DragEventArgs)">
      <summary>Occurs when an object is dragged into the control's bounds.
</summary>
      <param name="e">Contains event data.
</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnDragOver(System.Windows.DragEventArgs)">
      <summary>Occurs when an object is dragged over the control's bounds.
</summary>
      <param name="e">Contains event data.
</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnDrop(System.Windows.DragEventArgs)">
      <summary>Invoked when an object is dragged into the bounds of a <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control. Implement this method in your derived class to add class handling for this event.</summary>
      <param name="e">The DragEventArgs instance that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnInitialized(System.EventArgs)">
      <summary>Invoked when a <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> object is initialized. Implement this method in your derived class to add class handling for this event.</summary>
      <param name="e">The EventArgs instance that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnItemMoved(System.Activities.Design.Model.ModelItem)">
      <summary>Informs the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> that a <see cref="T:System.Activities.Design.Model.ModelItem" /> was moved.
</summary>
      <param name="modelItem">The <see cref="T:System.Activities.Design.Model.ModelItem" /> that was moved.
</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnItemsCopied(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>Occurs when the specified  <see cref="T:System.Activities.Design.Model.ModelItem" /> instances are cloned.
</summary>
      <returns>Returns <see cref="T:System.Object" />.
</returns>
      <param name="itemsToCopy">The <see cref="T:System.Activities.Design.Model.ModelItem" /> instances to be copied.
</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnItemsCut(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>Occurs when the specified  <see cref="T:System.Activities.Design.Model.ModelItem" /> instances are cut.
</summary>
      <returns>A clone of <paramref name="itemsToCut" />.
</returns>
      <param name="itemsToCut">The <see cref="T:System.Activities.Design.Model.ModelItem" /> instances to be cut.
</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnItemsDelete(System.Collections.Generic.List{System.Activities.Design.Model.ModelItem})">
      <summary>Occurs when the specified  <see cref="T:System.Activities.Design.Model.ModelItem" /> instances are deleted.
</summary>
      <param name="itemsToDelete">The <see cref="T:System.Activities.Design.Model.ModelItem" /> instances to be deleted.
</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowItemsPresenter.OnItemsPasted(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Windows.Point,System.Activities.Design.WorkflowViewElement)">
      <summary>Pastes the specified <see cref="T:System.Activities.Design.Model.ModelItem" /> instances to the specified location. 
</summary>
      <param name="itemsToPaste">The items to be pasted.
</param>
      <param name="metaData">Metadata associated with the items to be pasted.


</param>
      <param name="pastePoint">The location of the paste.


</param>
      <param name="pastePointReference">A reference to the paste point.

</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowItemsPresenter.SpacerTemplate">
      <summary>Gets or sets the DataTemplate that defines how the spacer of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control is displayed.</summary>
      <returns>A DataTemplate that defines how the spacer of the <see cref="T:System.Activities.Design.WorkflowItemsPresenter" /> control is displayed.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowItemsPresenter.SpacerTemplateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowItemsPresenter.SpacerTemplate" /> dependency property.</summary>
    </member>
    <member name="T:System.Activities.Design.WorkflowViewElement">
      <summary>Base class for any workflow UI element.</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.WorkflowViewElement" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.ActiveSourceContainer">
      <summary>Gets the active source container.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.ISourceContainer" />.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.Collapsible"></member>
    <member name="M:System.Activities.Design.WorkflowViewElement.ContainerLoaded(System.Activities.Design.ISourceContainer)">
      <summary>Occurs when the container is loaded.

</summary>
      <param name="container">The container to be loaded.
</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.ContainerUnloaded(System.Activities.Design.ISourceContainer)">
      <summary>Occurs when the container is unloaded.

</summary>
      <param name="container">The container to be unloaded.
</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.Context">
      <summary>Gets or sets an <see cref="T:System.Activities.Design.EditingContext" /> object that is a collection of services shared between all elements contained in the designer and used to interact between the host and the designer. Services are published and requested through the <see cref="T:System.Activities.Design.EditingContext" />. </summary>
      <returns>An <see cref="T:System.Activities.Design.EditingContext" /> object.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowViewElement.ContextProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowViewElement.Context" /> dependency property. This field is read-only.
</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.DefaultContainerLoaded(System.Activities.Design.ISourceContainer)">
      <summary>Occurs when the default container is loaded.

</summary>
      <param name="container">The default container to be loaded.
</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.DefaultContainerUnloaded(System.Activities.Design.ISourceContainer)">
      <summary>Occurs when the default container is unloaded.

</summary>
      <param name="container">The default container to be unloaded.
</param>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.DefaultSourceContainer">
      <summary>Gets the default source container.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.ISourceContainer" />.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.Designer">
      <summary>Gets the designer.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.DesignerView" />.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.ExpandState"></member>
    <member name="F:System.Activities.Design.WorkflowViewElement.ExpandStateProperty"></member>
    <member name="M:System.Activities.Design.WorkflowViewElement.GetAutomationHelpText">
      <summary>Retrieves the automation help text. Implement this method in your derived class to add your own handling.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.GetAutomationIdMemberName">
      <summary>Returns the name of the property of the attached model item that is used as an automation ID. Implement this method in your derived class to add your own handling.</summary>
      <returns>A <see cref="T:System.String" /> value. The base class always returns null.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.IsReadOnly"></member>
    <member name="P:System.Activities.Design.WorkflowViewElement.IsRootDesigner">
      <summary>Gets or sets a Boolean value that indicates whether this is the root designer.</summary>
      <returns>true if this is the root designer; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.ModelItem">
      <summary>Gets or sets the underlying <see cref="T:System.Activities.Design.Model.ModelItem" /> object for the <see cref="T:System.Activities.Design.WorkflowViewElement" />.</summary>
      <returns>A <see cref="T:System.Activities.Design.Model.ModelItem" /> object that is a wrapper around a model instance or in-memory representation of the underlying workflow and provides change notification even if the model instance does not provide change notification.</returns>
    </member>
    <member name="F:System.Activities.Design.WorkflowViewElement.ModelItemProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.WorkflowViewElement.ModelItem" /> dependency property. This field is read-only.
</summary>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnContextMenuLoaded(System.Windows.Controls.ContextMenu)">
      <summary>The framework calls this method when the context menu is loaded. Implement this method in your derived class to add class handling for this event. </summary>
      <param name="menu">The context menu that is loaded.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnCreateAutomationPeer">
      <summary>Returns a <see cref="T:System.Activities.Design.WorkflowViewElement" />-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation for the  infrastructure.</summary>
      <returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</returns>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnDragEnter(System.Windows.DragEventArgs)"></member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnDragOver(System.Windows.DragEventArgs)"></member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <summary>Invoked when an element receives keyboard focus. Implement this method in your derived class to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnInitialized(System.EventArgs)"></member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnModelItemChanged(System.Object)">
      <summary>The framework calls this method when the underlying model item is changed. Implement this method in your derived class to add class handling for this event.</summary>
      <param name="newItem">An <see cref="T:System.Object" /> that represents the new state of the model item.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when any mouse button is pressed. Implement this method in your derived class to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Invoked when the mouse pointer moves. Implement this method in your derived class to add class handling for this event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Invoked when any mouse button is released. Implement this method in your derived class to add class handling for this event.</summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
    </member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnPreviewDragEnter(System.Windows.DragEventArgs)"></member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnPreviewDragLeave(System.Windows.DragEventArgs)"></member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)"></member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnReadOnlyChanged(System.Boolean)"></member>
    <member name="M:System.Activities.Design.WorkflowViewElement.OnShowExpandedChanged(System.Boolean)"></member>
    <member name="P:System.Activities.Design.WorkflowViewElement.PinState"></member>
    <member name="F:System.Activities.Design.WorkflowViewElement.PinStateProperty"></member>
    <member name="P:System.Activities.Design.WorkflowViewElement.ShowExpanded"></member>
    <member name="F:System.Activities.Design.WorkflowViewElement.ShowExpandedProperty"></member>
    <member name="P:System.Activities.Design.WorkflowViewElement.SourceContainers">
      <summary>Gets the source containers.</summary>
      <returns>Returns <see cref="T:System.Collections.Generic.IList`1" />.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.ViewService">
      <summary>Gets the <see cref="T:System.Activities.Design.Services.ViewService" /> associated with a <see cref="T:System.Activities.Design.Model.ModelItem" />. A shortcut to this property is by accessing <see cref="P:System.Activities.Design.EditingContext.Services" />.</summary>
      <returns>A <see cref="T:System.Activities.Design.Services.ViewService" /> object.</returns>
    </member>
    <member name="P:System.Activities.Design.WorkflowViewElement.ViewStateService">
      <summary>Gets the <see cref="T:System.Activities.Design.View.ViewStateService" /> defined in the <see cref="T:System.Activities.Design.EditingContext" />. A shortcut to this property is by accessing <see cref="P:System.Activities.Design.EditingContext.Services" />.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.ViewStateService" />.</returns>
    </member>
    <member name="T:System.Activities.Design.Debug.BreakpointInfo">
      <summary>Handles breakpoint location and type information that is used in conjunction with the debugging of an activity.</summary>
    </member>
    <member name="M:System.Activities.Design.Debug.BreakpointInfo.#ctor(System.Activities.Debugger.SourceLocation,System.Activities.Design.BreakpointTypes)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.Debug.BreakpointInfo" /> class that handles a breakpoint and <see cref="P:System.Activities.Design.Debug.BreakpointInfo.BreakpointType" /> objects, in conjunction with debugging an activity.</summary>
      <param name="sourceLocation">The location in the source code where a breakpoint is set.</param>
      <param name="breakpointType">The breakpoint type setting.</param>
    </member>
    <member name="P:System.Activities.Design.Debug.BreakpointInfo.BreakpointType">
      <summary>Gets or sets the enumerated list of breakpoint types.</summary>
      <returns>An enumeration of breakpoint types.</returns>
    </member>
    <member name="P:System.Activities.Design.Debug.BreakpointInfo.SourceLocation">
      <summary>Gets or sets the location of a breakpoint in the XAML form for the activity object instance.</summary>
      <returns>A row and column location in a XAML file.</returns>
    </member>
    <member name="T:System.Activities.Design.Debug.DebuggerService">
      <summary>Manages the placement of breakpoints for a debugging process.</summary>
    </member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.#ctor(System.Activities.Design.EditingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.Debug.DebuggerService" /> class with the specified editing context.</summary>
      <param name="context">The activity designer contextual state.</param>
    </member>
    <member name="P:System.Activities.Design.Debug.DebuggerService.CurrentContext">
      <summary>Sets the current scope of execution in the source file.</summary>
      <returns>A position in the source file that marks the start of execution.</returns>
    </member>
    <member name="P:System.Activities.Design.Debug.DebuggerService.CurrentLocation">
      <summary>Sets the current location of execution.</summary>
      <returns>A location in the source file.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.DeleteBreakpoint(System.Activities.Debugger.SourceLocation)">
      <summary>Deletes a breakpoint from its location in the source file.</summary>
      <param name="sourceLocation">A location in the source file.</param>
    </member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.GetBreakpointLocations">
      <summary>Returns a list of the latest breakpoint locations.</summary>
      <returns>A list of breakpoints of type <see cref="P:System.Activities.Design.Debug.BreakpointInfo.SourceLocation" /> culled from the source file.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.GetExactLocation(System.Activities.Debugger.SourceLocation)">
      <summary>Returns an exact source file location based on the start and end line numbers of the activity in its serialized Xaml form.</summary>
      <returns>An exact location in the source file.</returns>
      <param name="approximateLocation">A source file location known to be inexact.</param>
    </member>
    <member name="P:System.Activities.Design.Debug.DebuggerService.HideSourceFileName"></member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.InsertBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Design.BreakpointTypes)">
      <summary>Inserts a new breakpoint of the specified type at the specified location.</summary>
      <param name="sourceLocation">The location in the source file that receives the new breakpoint.</param>
      <param name="breakpointType">The type of the breakpoint; for example, None, Enabled, Bounded, or Conditional.</param>
    </member>
    <member name="P:System.Activities.Design.Debug.DebuggerService.IsDebugging">
      <summary>Sets an indicator that signals that debugging is active.</summary>
      <returns>true while debugging is active; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.ResetBreakpoints">
      <summary>Resets breakpoints and prepares for breakpoint refresh.</summary>
    </member>
    <member name="P:System.Activities.Design.Debug.DebuggerService.SelectedLocation">
      <summary>Gets the currently selected location from the designer.</summary>
      <returns>The position in the source file that is currently selected.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.UpdateBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Design.BreakpointTypes)">
      <summary>Updates the appearance of a specified breakpoint to show the specified type.</summary>
      <param name="sourceLocation">The location of the breakpoint to update.</param>
      <param name="newBreakpointType">A new breakpoint type from the <see cref="T:System.Activities.Design.BreakpointTypes" /> enumeration.</param>
    </member>
    <member name="M:System.Activities.Design.Debug.DebuggerService.UpdateSourceLocations(System.Collections.Generic.Dictionary{System.Object,System.Activities.Debugger.SourceLocation})">
      <summary>Collects the new mapping of model item and breakpoints from SourceLocationMapping.</summary>
      <param name="newSourceLocationMapping">A list of model item and breakpoint pairs.</param>
    </member>
    <member name="T:System.Activities.Design.Debug.IDesignerDebugView">
      <summary>When implemented in a derived class, provides functionality for an activity designer debugger view.</summary>
    </member>
    <member name="P:System.Activities.Design.Debug.IDesignerDebugView.CurrentContext">
      <summary>When implemented in a derived class, sets the scope of execution within the source file.</summary>
      <returns>The starting point location for execution within the source file.</returns>
    </member>
    <member name="P:System.Activities.Design.Debug.IDesignerDebugView.CurrentLocation">
      <summary>When implemented in a derived class, sets the current location of execution in a file being processed by the debugger.</summary>
      <returns>
        <see cref="T:System.Activities.Debugger.SourceLocation" />.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.IDesignerDebugView.DeleteBreakpoint(System.Activities.Debugger.SourceLocation)">
      <summary>When implemented in a derived class, removes a breakpoint at the specified location in the source file.</summary>
      <param name="sourceLocation">A point within a source file, defined by an intersection of row and column positions in the file contents.</param>
    </member>
    <member name="M:System.Activities.Design.Debug.IDesignerDebugView.GetBreakpointLocations">
      <summary>When implemented in a derived class, returns a list of currently set  breakpoint location-and-type pairs.</summary>
      <returns>A list of location-and-type pairs.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.IDesignerDebugView.GetExactLocation(System.Activities.Debugger.SourceLocation)">
      <summary>When implemented in a derived class, returns an exact location in a source file based upon an approximate location.</summary>
      <returns>An exact location within the source file.</returns>
      <param name="approximateLocation">A position within a source file that is known to be inexact.</param>
    </member>
    <member name="P:System.Activities.Design.Debug.IDesignerDebugView.HideSourceFileName"></member>
    <member name="M:System.Activities.Design.Debug.IDesignerDebugView.InsertBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Design.BreakpointTypes)">
      <summary>When implemented in a derived class, places a breakpoint at the specified location in a file.</summary>
      <param name="sourceLocation">A point within a source file, defined by an intersection of row and column positions in the file contents.</param>
      <param name="breakpointType">Member of an enumeration of breakpoint types which may include Bounded, Conditional, Enabled, and None.</param>
    </member>
    <member name="P:System.Activities.Design.Debug.IDesignerDebugView.IsDebugging">
      <summary>When implemented in a derived class, sets an indicator that signals whether debugging is enabled.</summary>
      <returns>true if debugging is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.IDesignerDebugView.ResetBreakpoints">
      <summary>When implemented in a derived class, resets the position of the breakpoint in a file.</summary>
    </member>
    <member name="P:System.Activities.Design.Debug.IDesignerDebugView.SelectedLocation">
      <summary>When implemented in a derived class, gets the selected <see cref="P:System.Activities.Design.Debug.BreakpointInfo.SourceLocation" />.</summary>
      <returns>A point within a source file, defined by an intersection of row and column positions in the file contents.</returns>
    </member>
    <member name="M:System.Activities.Design.Debug.IDesignerDebugView.UpdateBreakpoint(System.Activities.Debugger.SourceLocation,System.Activities.Design.BreakpointTypes)">
      <summary>When implemented in a derived class, updates the type of the breakpoint at a specified location in a file.</summary>
      <param name="sourceLocation">A point within a source file, defined by an intersection of row and column positions in the file contents.</param>
      <param name="breakpointType">A specified type of breakpoint; for example, line, method, or exception breakpoints.</param>
    </member>
    <member name="T:System.Activities.Design.Hosting.IMultiTargetingSupportService"></member>
    <member name="M:System.Activities.Design.Hosting.IMultiTargetingSupportService.GetReflectionAssembly(System.Reflection.AssemblyName)"></member>
    <member name="M:System.Activities.Design.Hosting.IMultiTargetingSupportService.GetRuntimeType(System.Type)"></member>
    <member name="M:System.Activities.Design.Hosting.IMultiTargetingSupportService.IsSupportedType(System.Type)"></member>
    <member name="T:System.Activities.Design.ModelTree.AttachedPropertiesService">
      <summary>Attaches properties to the current instance.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedPropertiesService.#ctor"></member>
    <member name="M:System.Activities.Design.ModelTree.AttachedPropertiesService.AddProperty(System.Activities.Design.ModelTree.AttachedProperty)">
      <summary>Adds the specified property to the properties of the current instance.</summary>
      <param name="property">The property to add. </param>
    </member>
    <member name="T:System.Activities.Design.ModelTree.AttachedProperty">
      <summary>Describes an attached property.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.ModelTree.AttachedProperty" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty.GetValue(System.Activities.Design.Model.ModelItem)">
      <summary>Retrieves the value of the specified model item.</summary>
      <returns>Returns a 
<see cref="T:System.Object" /> that contains the value of the model item.
.</returns>
      <param name="modelItem">The model item.</param>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty.IsBrowsable"></member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty.IsReadOnly">
      <summary>Gets a value that determines whether the attached property is read-only.</summary>
      <returns>true if the property is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty.Name">
      <summary>Gets or sets the name of the property.</summary>
      <returns>Returns a 
<see cref="T:System.String" /> that contains the name of the property.
.</returns>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty.NotifyPropertyChanged(System.Activities.Design.Model.ModelItem)">
      <summary>Creates a notification that indicates that the specified model item has changed. </summary>
      <param name="modelItem">The item that has changed.</param>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty.OwnerType">
      <summary>Gets or sets the owner type.</summary>
      <returns>Returns a 
<see cref="T:System.Type" /> that contains the owner type.
.</returns>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty.ResetValue(System.Activities.Design.Model.ModelItem)">
      <summary>Resets the specified model item to the default value.</summary>
      <param name="modelItem">The model item to reset.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty.SetValue(System.Activities.Design.Model.ModelItem,System.Object)">
      <summary>Sets the specified model item to the specified value.</summary>
      <param name="modelItem">The model item to set.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty.Type">
      <summary>Gets the type. </summary>
      <returns>Returns a 
<see cref="T:System.Type" /> that contains the type.
.</returns>
    </member>
    <member name="T:System.Activities.Design.ModelTree.AttachedProperty`1">
      <summary>Contains a collection of attached properties. </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.ModelTree.AttachedProperty`1" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty`1.Getter">
      <summary>Gets or sets the getter.</summary>
      <returns>Returns a 
<see cref="T:System.Func`2" /> that contains the getter.
.</returns>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty`1.GetValue(System.Activities.Design.Model.ModelItem)">
      <summary>Retrieves the value of the specified model item.</summary>
      <returns>Returns a 
<see cref="T:System.Object" /> that contains the value.
.</returns>
      <param name="modelItem">The model item.</param>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty`1.IsReadOnly">
      <summary>Gets a value that determines if the collection is read-only.</summary>
      <returns>Returns true if the collection is read-only; otherwise, false.
</returns>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty`1.ResetValue(System.Activities.Design.Model.ModelItem)">
      <summary>Resets the specified model item to the default value.</summary>
      <param name="modelItem">The model item to reset.</param>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty`1.Setter">
      <summary>Gets or sets the setter.</summary>
      <returns>Returns a 
<see cref="T:System.Action`2" /> that contains the setter.
.</returns>
    </member>
    <member name="M:System.Activities.Design.ModelTree.AttachedProperty`1.SetValue(System.Activities.Design.Model.ModelItem,System.Object)">
      <summary>Sets the specified model item to the specified value.</summary>
      <param name="modelItem">The model item to set.</param>
      <param name="Value">The value to set.</param>
    </member>
    <member name="P:System.Activities.Design.ModelTree.AttachedProperty`1.Type">
      <summary>Gets the type of the collection.</summary>
      <returns>Returns a 
<see cref="T:System.Type" /> that contains the type of the collection.
.</returns>
    </member>
    <member name="T:System.Activities.Design.ModelTree.Change">
      <summary>Abstract class that, when implemented, describes a change to the model tree. </summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.Change.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.ModelTree.Change" /> class. </summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.Change.Apply">
      <summary>When implemented in a derived class, applies the change to the current instance.</summary>
    </member>
    <member name="P:System.Activities.Design.ModelTree.Change.Description">
      <summary>When implemented in a derived class, gets a description of the change.</summary>
      <returns>Returns a 
<see cref="T:System.String" /> that contains a description of the change. 
.</returns>
    </member>
    <member name="M:System.Activities.Design.ModelTree.Change.GetInverse">
      <summary>When implemented in a derived class, retrieves the inverse of the change. </summary>
      <returns>Returns a 
<see cref="T:System.Activities.Design.ModelTree.Change" /> that contains the inverse of the current instance. 
.</returns>
    </member>
    <member name="T:System.Activities.Design.ModelTree.EditingScope">
      <summary>Describes the editing scope.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.EditingScope.CanComplete">
      <summary>Determines whether the current editing scope instance can complete.</summary>
      <returns>true if the editing scope can complete; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.ModelTree.EditingScope.Changes">
      <summary>Gets a list of changes.</summary>
      <returns>Returns a 
<see cref="T:System.Collections.Generic.List`1" /> that contains the changes.
</returns>
    </member>
    <member name="P:System.Activities.Design.ModelTree.EditingScope.HasEffectiveChanges">
      <summary>Gets  a Boolean that specifies whether changes have been applied to the editing scope. 
</summary>
      <returns>true if changes have been applied to the editing scope; otherwise, false.
.
</returns>
    </member>
    <member name="M:System.Activities.Design.ModelTree.EditingScope.OnComplete">
      <summary>Raises the Complete event.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.EditingScope.OnRevert(System.Boolean)">
      <summary>Raises the Revert event.</summary>
      <param name="finalizing">Not used in this implementation.</param>
    </member>
    <member name="T:System.Activities.Design.ModelTree.EditingScopeEventArgs">
      <summary>Provides data for the <see cref="E:System.Activities.Design.ModelTree.ModelTreeManager.EditingScopeCompleted" /> event.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.EditingScopeEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.ModelTree.EditingScopeEventArgs" /> class. </summary>
    </member>
    <member name="P:System.Activities.Design.ModelTree.EditingScopeEventArgs.EditingScope">
      <summary>Gets or sets the associated <see cref="T:System.Activities.Design.ModelTree.EditingScope" />.</summary>
      <returns>Returns an 
<see cref="T:System.Activities.Design.ModelTree.EditingScope" />.
</returns>
    </member>
    <member name="T:System.Activities.Design.ModelTree.ModelItemExtensions">
      <summary>Implements extensions to the base model item.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.FindParentModelItem(System.Activities.Design.Model.ModelItem,System.Type)">
      <summary>Determines the parent model item, based on the specified item and parent type.</summary>
      <returns>Returns a 
<see cref="T:System.Activities.Design.Model.ModelItem" /> that contains the parent type.</returns>
      <param name="item">The model item.</param>
      <param name="parentType">The parent type. This parameter cannot be null.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.GetEditingContext(System.Activities.Design.Model.ModelItem)">
      <summary>Retrieves the editing context of the specified model item.</summary>
      <returns>Returns a 
<see cref="T:System.Activities.Design.EditingContext" /> that contains the editing context.</returns>
      <param name="modelItem">The model item.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.GetModelItemFromPath(System.String,System.Activities.Design.Model.ModelItem)">
      <summary>Retrieves a model item from the specified path and root.</summary>
      <returns>Returns a 
<see cref="T:System.Activities.Design.Model.ModelItem" /> that contains the model item.
.</returns>
      <param name="path">The path.</param>
      <param name="root">The root.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.GetModelPath(System.Activities.Design.Model.ModelItem)">
      <summary>Retrieves the path of the specified model item.</summary>
      <returns>Returns a 
<see cref="T:System.String" /> that contains the path.
</returns>
      <param name="modelItem">The model item.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.GetParentEnumerator(System.Activities.Design.Model.ModelItem)">
      <summary>Retrieves an enumerator that contains the parents of the specified model item.</summary>
      <returns>Returns an 
<see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the parent items.</returns>
      <param name="item">The item.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.GetParentEnumerator(System.Activities.Design.Model.ModelItem,System.Func{System.Activities.Design.Model.ModelItem,System.Boolean})">
      <summary>Retrieves an enumerator that contains the parents of the specified model item.</summary>
      <returns>Returns an 
<see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the parents.
.</returns>
      <param name="item">The item.</param>
      <param name="continueEnumerationPredicate">Content to be provided.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.GetUniqueName(System.Activities.Design.Model.ModelItemCollection,System.String,System.Func{System.Activities.Design.Model.ModelItem,System.String})">
      <summary>Retrieves the unique name of the item, using the specified collection, default prefix, and name getter.</summary>
      <returns>Returns a 
<see cref="T:System.String" /> containing the unique name.
.</returns>
      <param name="collection">The collection containing the item. 
</param>
      <param name="nameDefaultPrefix">The default name prefix of the item.
</param>
      <param name="nameGetter">The name getter.
</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.GetUniqueName(System.Activities.Design.Model.ModelItemDictionary,System.String,System.Func{System.Activities.Design.Model.ModelItem,System.String})">
      <summary>Gets the unique name of an item based on the specified dictionary, default prefix, and name getter.</summary>
      <returns>Returns a 
<see cref="T:System.String" /> containing the unique name of the item.
.</returns>
      <param name="collection">The collection containing the item.
</param>
      <param name="nameDefaultPrefix">The default prefix.
</param>
      <param name="nameGetter">The name getter.
</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.IsAssignableFrom``1(System.Activities.Design.Model.ModelItem)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.SwitchKeys(System.Activities.Design.Model.ModelItemDictionary,System.Activities.Design.Model.ModelItem,System.Activities.Design.Model.ModelItem)">
      <summary>Replaces the specified old key with the specified new key in the specified dictionary.</summary>
      <returns>true if the attempt was successful; otherwise, false.</returns>
      <param name="dictionary">The dictionary. This parameter cannot be null.</param>
      <param name="oldKey">The key to replace. This parameter cannot be null.</param>
      <param name="newKey">The new key. This parameter cannot be null.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.SwitchKeys(System.Activities.Design.Model.ModelItemDictionary,System.Object,System.Object,System.Activities.Design.Model.ModelItem@)">
      <summary>Replaces the specified old key with the specified new key in the specified dictionary, and if applicable returns the item of the new key.</summary>
      <returns>true if the attempt was successful; otherwise, false.</returns>
      <param name="dictionary">The dictionary. This parameter cannot be null.</param>
      <param name="oldKey">The key to replace. This parameter cannot be null.</param>
      <param name="newKey">The new key. This parameter cannot be null.</param>
      <param name="newKeyItem">When this method returns, contains the new key item.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.TryGetPropertyValue(System.Activities.Design.Model.ModelItem,System.Activities.Design.Model.ModelItem@,System.String[])">
      <summary>Attempts to retrieve the value of the specified item at the specified path.</summary>
      <returns>true if the attempt was successful; otherwise, false.</returns>
      <param name="item">The item.</param>
      <param name="value">When this method returns, contains the value in a model item.</param>
      <param name="path">The path to the item.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.TryGetPropertyValue(System.Activities.Design.Model.ModelItem,System.Activities.Design.Model.ModelItemCollection@,System.String[])">
      <summary>Attempts to retrieve the value of the specified item at the specified path.</summary>
      <returns>true if the attempt was successful; otherwise, false.</returns>
      <param name="item">The item.</param>
      <param name="value">When this method returns, contains the value in a collection.</param>
      <param name="path">The path to the item.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.TryGetPropertyValue(System.Activities.Design.Model.ModelItem,System.Activities.Design.Model.ModelItemDictionary@,System.String[])">
      <summary>Attempts to retrieve the value of the specified item at the specified path.</summary>
      <returns>true if the attempt was successful; otherwise, false.</returns>
      <param name="item">The item.</param>
      <param name="value">When this method returns, contains the value in a dictionary.</param>
      <param name="path">The path to the item.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelItemExtensions.TrySetPropertyValue(System.Activities.Design.Model.ModelItem,System.Object,System.Activities.Design.Model.ModelItem@,System.String[])">
      <summary>Attempts to set the specified property value using the specified item, wrapped value, and path.</summary>
      <returns>true if the attempt to set the specified property value was successful; otherwise, false.
</returns>
      <param name="item">The item.</param>
      <param name="value">The value.</param>
      <param name="wrappedValue">The wrapped value.</param>
      <param name="path">The path.</param>
    </member>
    <member name="T:System.Activities.Design.ModelTree.ModelToObjectValueConverter">
      <summary>Converts a ModelItem to the value of the inner object. 
</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelToObjectValueConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.ModelTree.ModelToObjectValueConverter" /> class. </summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelToObjectValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified object to its inner value.</summary>
      <returns>Returns a 
<see cref="T:System.Object" /> that contains the inner value.</returns>
      <param name="value">The ModelItem to convert.</param>
      <param name="targetType">Not used in this implementation.</param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelToObjectValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Returns the specified value, unmodified.</summary>
      <returns>Returns a 
<see cref="T:System.Object" /> that contains the unmodified value.</returns>
      <param name="value">The object to do nothing to.</param>
      <param name="targetType">Not used in this implementation.</param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="T:System.Activities.Design.ModelTree.ModelTreeManager">
      <summary>Manages the model tree.</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelTreeManager.#ctor(System.Activities.Design.EditingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.ModelTree.ModelTreeManager" /> class, using the specified context. </summary>
      <param name="context">The context. </param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelTreeManager.CreateModelItem(System.Activities.Design.Model.ModelItem,System.Object)">
      <summary>Creates a model item based on the specified parent and instance. </summary>
      <returns>Returns a 
<see cref="T:System.Activities.Design.Model.ModelItem" /> that contains the new model item.</returns>
      <param name="parent">The parent item. </param>
      <param name="instance">The instance.</param>
    </member>
    <member name="E:System.Activities.Design.ModelTree.ModelTreeManager.EditingScopeCompleted">
      <summary>Occurs when the editing scope is completed. </summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ModelTreeManager.Load(System.Object)">
      <summary>Loads the specified root instance.</summary>
      <param name="rootInstance">The root instance to load.</param>
    </member>
    <member name="P:System.Activities.Design.ModelTree.ModelTreeManager.Root">
      <summary>Gets the root.</summary>
      <returns>Returns a 
<see cref="T:System.Activities.Design.Model.ModelItem" /> that contains the root.
</returns>
    </member>
    <member name="T:System.Activities.Design.ModelTree.ObjectToModelValueConverter">
      <summary>Converts objects to model values.
</summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ObjectToModelValueConverter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.ModelTree.ObjectToModelValueConverter" /> class. </summary>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ObjectToModelValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified ModelPropertyEntry to a ModelItem that contains the original entry.</summary>
      <returns>Returns 
<see cref="T:System.Object" />.</returns>
      <param name="values">The ModelPropertyEntry to convert.</param>
      <param name="targetType">Not used in this implementation.</param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="M:System.Activities.Design.ModelTree.ObjectToModelValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified ModelItem to a ModelPropertyEntry. </summary>
      <returns>Returns a 
<see cref="T:System.Object" /> that contains the converted ModelPropertyEntry.
.</returns>
      <param name="value">The ModelItem to convert.</param>
      <param name="targetTypes">Not used in this implementation.</param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="T:System.Activities.Design.Toolbox.ToolboxCategory">
      <summary>A collection of toolbox items that have been categorized.</summary>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.#ctor(System.String)">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> class with a specified name.</summary>
      <param name="name">The name of the toolbox category collection.</param>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.Add(System.Activities.Design.Toolbox.ToolboxItemWrapper)">
      <summary>Adds a specified tool to the end of the toolbox category collection.</summary>
      <param name="tool">The <see cref="T:System.Activities.Design.Toolbox.ToolboxItemWrapper" /> item to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tool" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.CategoryName">
      <summary>Gets or sets the name of the toolbox category.</summary>
      <returns>The name of the toolbox category.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.Item(System.Int32)">
      <summary>Gets or sets the tool at the specified index.</summary>
      <returns>The 
<see cref="T:System.Activities.Design.Toolbox.ToolboxItemWrapper" /> object at the specified <paramref name="index" />.
.</returns>
      <param name="index">The zero-based index of the tool to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> collection.</exception>
    </member>
    <member name="E:System.Activities.Design.Toolbox.ToolboxCategory.PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.Remove(System.Activities.Design.Toolbox.ToolboxItemWrapper)">
      <summary>Removes the first occurrence of a specified tool from the toolbox category collection.</summary>
      <returns>true if tool is successfully removed; otherwise, false. This method also returns false if the tool was not found in the collection.</returns>
      <param name="tool">The <see cref="T:System.Activities.Design.Toolbox.ToolboxItemWrapper" /> item to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="tool" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> collection to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The index of the array at which the copying begins.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#ICollection#Count">
      <summary>Gets the number of tools contained in the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />.</returns>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator`1" /> for the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />.</returns>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#Add(System.Object)">
      <summary>Adds a tool to the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />.</summary>
      <returns>The zero-based index of the tool added to the collection.</returns>
      <param name="value">The position into which the new element is inserted.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" /> implemented by the collection.</exception>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#Clear">
      <summary>Removes all the tools from the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />.</summary>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> contains a specific tool.</summary>
      <returns>true if the <paramref name="value" /> is found in the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />; otherwise, false.</returns>
      <param name="value">The tool <see cref="T:System.Object" /> to locate in the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific tool in the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />.</summary>
      <returns>The zero-based index of <paramref name="value" /> if found in the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />; otherwise, -1.</returns>
      <param name="value"></param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts a tool into the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />  at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value"></param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> collection.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />  is read-only.</summary>
      <returns>true if the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the tool at the specified index.</summary>
      <returns>The tool
<see cref="T:System.Object" /> at the specified index.</returns>
      <param name="index">The zero-based index of the tool item to get or set.</param>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific tool from the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />.</summary>
      <param name="value">The tool <see cref="T:System.Object" /> to remove from the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />.</param>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategory.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the tool at the specified index of the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> collection.</summary>
      <param name="index">The zero-based index of the tool item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> collection.</exception>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategory.Tools">
      <summary>Gets the tools in the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />.</summary>
      <returns>An
<see cref="T:System.Collections.Generic.ICollection`1" /> that contains the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" />.</returns>
    </member>
    <member name="T:System.Activities.Design.Toolbox.ToolboxCategoryItems">
      <summary>A collection of <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> objects. This class is sealed and so cannot be inherited.
This class provides support for the categorization of toolbox items when re-hosting the  Designer outside of Visual Studio 2010.</summary>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.Add(System.Activities.Design.Toolbox.ToolboxCategory)">
      <summary>Adds a specified toolbox category to the end of the toolbox category items collection.</summary>
      <param name="item">The <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.Clear">
      <summary>Removes all the items from the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> collection.</summary>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.Contains(System.Activities.Design.Toolbox.ToolboxCategory)">
      <summary>Determines whether the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> collection contains a specific toolbox category item.</summary>
      <returns>true if the <paramref name="item" /> is found in the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />; otherwise, false.</returns>
      <param name="item"></param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.CopyTo(System.Activities.Design.Toolbox.ToolboxCategory[],System.Int32)">
      <summary>Copies the entire <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> collection to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index of the target array.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.Count">
      <summary>Gets the number of tools contained in the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />.</returns>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItem" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator`1" /> for the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />  is read-only.</summary>
      <returns>true if the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.Item(System.Int32)">
      <summary>Gets the toolbox category at the specified index.</summary>
      <returns>The toolbox category 
<see cref="T:System.Object" /> at the specified index.</returns>
      <param name="index">The zero-based index of the toolbox category item to get.</param>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.Remove(System.Activities.Design.Toolbox.ToolboxCategory)">
      <summary>Removes the first occurrence of a specific toolbox category from the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />.</summary>
      <returns>true if the item is found and removed from the collection; otherwise, false. This method returns false if the <paramref name="item" /> specified is not found.</returns>
      <param name="item">The <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> to remove.</param>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the entire <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> collection to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target <see cref="T:System.Array" />.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> collection. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index of the target array.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="array" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#Count">
      <summary>Gets the number of toolbox categories contained in the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> collection.</summary>
      <returns>The number of items contained in the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> collection.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />.</returns>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItem" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator`1" /> for the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />.</returns>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#Add(System.Object)">
      <summary>Adds a tool to the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />.</summary>
      <returns>The zero-based index of the tool added to the collection.</returns>
      <param name="value">The position into which the new element is inserted.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" /> implemented by the collection.</exception>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#Clear">
      <summary>Removes all the tools from the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />.</summary>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> contains a specific tool.</summary>
      <returns>true if the <paramref name="value" /> is found in the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />; otherwise, false.</returns>
      <param name="value">The tool <see cref="T:System.Object" /> to locate in the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific tool in the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />.</summary>
      <returns>The zero-based index of <paramref name="value" /> if found in the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />; otherwise, -1.</returns>
      <param name="value"></param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts a toolbox category into the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">The <see cref="T:System.Object" /> inserted into the collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> collection.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the toolbox category at a specified index of the collection.</summary>
      <returns>The toolbox category
<see cref="T:System.Object" /> at the specified index.</returns>
      <param name="index">The zero-based index of the toolbox category item to get or set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> set is null.</exception>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific toolbox category from the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" />.</summary>
      <param name="value">The tool <see cref="T:System.Object" /> to remove from the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> collection.</param>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxCategoryItems.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes a toolbox category at the specified index of the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> collection.</summary>
      <param name="index">The zero-based index of the toolbox category item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> collection.</exception>
    </member>
    <member name="T:System.Activities.Design.Toolbox.ToolboxControl">
      <summary>Provides functions to render a collection of categorized tools, as well as notify users about tool selection and creation events. This class is sealed and so cannot be inherited.</summary>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.Toolbox.ToolboxControl" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.AssociatedDesigner">
      <summary>Gets or sets the workflow designer with which this toolbox control is associated.</summary>
      <returns>The <see cref="T:System.Activities.Design.Toolbox.WorkflowDesigner" /> instance with which this toolbox control is associated.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.Categories">
      <summary>Gets or sets the collection of toolbox categories associated with this control.</summary>
      <returns>The <see cref="T:System.Activities.Design.Toolbox.ToolboxCategoryItems" /> containing the collection of <see cref="T:System.Activities.Design.Toolbox.ToolboxCategory" /> objects associated with this <see cref="T:System.Activities.Design.Toolbox.ToolboxControl" />.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.CategoryItemStyle">
      <summary>Gets or sets the style used for each category item.</summary>
      <returns>The <see cref="T:System.Windows.Style" /> object that contains the style applied to each of the categories.</returns>
    </member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.CategoryItemStyleProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.Toolbox.ToolboxControl.CategoryItemStyle" /> dependency property. This field is read-only.</summary>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.CategoryTemplate">
      <summary>Gets or sets the data template used for the category.</summary>
      <returns>The <see cref="T:System.Windows.DataTemplate" /> for the category.</returns>
    </member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.CategoryTemplateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.Toolbox.ToolboxControl.CategoryTemplate" /> dependency property. This field is read-only.</summary>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxControl.OnApplyTemplate">
      <summary>Builds the visual tree for this toolbox control.</summary>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.SelectedTool">
      <summary>Gets or sets the tool being selected in the toolbox.</summary>
      <returns>The <see cref="T:System.Drawing.Design.ToolboxItem" /> object selected.</returns>
    </member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.SelectedToolProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.Toolbox.ToolboxControl.SelectedTool" /> dependency property. This field is read-only.</summary>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.ToolboxFile">
      <summary>Gets or sets the name of toolbox file.</summary>
      <returns>The name of the toolbox file.</returns>
    </member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.ToolboxFileProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.Toolbox.ToolboxControl.ToolboxFile" /> dependency property. This field is read-only.</summary>
    </member>
    <member name="E:System.Activities.Design.Toolbox.ToolboxControl.ToolCreated">
      <summary>Occurs when a tool is created in the toolbox control.</summary>
    </member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.ToolCreatedEvent">
      <summary>Identifies the <see cref="E:System.Activities.Design.Toolbox.ToolboxControl.ToolCreated" /> event. This field is read-only.</summary>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.ToolItemStyle">
      <summary>Gets or sets the style used for the tool items.</summary>
      <returns>The <see cref="T:System.Windows.Style" /> for the tool items.</returns>
    </member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.ToolItemStyleProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.Toolbox.ToolboxControl.ToolItemStyle" /> dependency property. This field is read-only.</summary>
    </member>
    <member name="E:System.Activities.Design.Toolbox.ToolboxControl.ToolSelected">
      <summary>Occurs when a tool is selected in the toolbox control.</summary>
    </member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.ToolSelectedEvent">
      <summary>Identifies the <see cref="E:System.Activities.Design.Toolbox.ToolboxControl.ToolSelected" /> event. This field is read-only.</summary>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxControl.ToolTemplate">
      <summary>Gets or sets the data template used for the tools.</summary>
      <returns>The <see cref="T:System.Windows.DataTemplate" /> used for the tools.</returns>
    </member>
    <member name="F:System.Activities.Design.Toolbox.ToolboxControl.ToolTemplateProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.Toolbox.ToolboxControl.ToolTemplate" /> dependency property. This field is read-only.</summary>
    </member>
    <member name="T:System.Activities.Design.Toolbox.ToolboxItemWrapper">
      <summary>Represents a wrapper used to categorize <see cref="T:System.Drawing.Design.ToolboxItem" /> instances. This class is sealed, so it cannot be inherited.</summary>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxItemWrapper.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.Toolbox.ToolboxItemWrapper" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxItemWrapper.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.Toolbox.ToolboxItemWrapper" /> class with specified names for the tool, assembly, bitmap, and display.</summary>
      <param name="toolName">The name of the tool.</param>
      <param name="assemblyName">The name of the assembly.</param>
      <param name="bitmapName">The name of the bitmap.</param>
      <param name="displayName">The name of the display.</param>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxItemWrapper.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.Toolbox.ToolboxItemWrapper" /> class with the type of the tool.</summary>
      <param name="toolType">The type of the tool.</param>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxItemWrapper.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.Toolbox.ToolboxItemWrapper" /> class with the type of the tool and a specified display name.</summary>
      <param name="toolType">The type of the tool.</param>
      <param name="displayName">The name of the display.</param>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxItemWrapper.#ctor(System.Type,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.Toolbox.ToolboxItemWrapper" /> class with the type of the tool and specified names for the bitmap and display.</summary>
      <param name="toolType">The type of the tool.</param>
      <param name="bitmapName">A string that contains the name of the bitmap.</param>
      <param name="displayName">A string that contains the name of the display.</param>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.AssemblyName">
      <summary>Gets or sets the assembly name for the toolbox item.</summary>
      <returns>The assembly name.</returns>
      <exception cref="T:System.OperationException">The assembly name has already been specified and cannot be changed after it has been set to a value that is not null.</exception>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.Bitmap">
      <summary>Gets the bitmap associated with the <see cref="T:System.Drawing.Design.ToolboxItem" /> wrapped by the current object.</summary>
      <returns>Returns a 
<see cref="T:System.Drawing.Bitmap" /> that is associated with the <see cref="T:System.Drawing.Design.ToolboxItem" />.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.BitmapName">
      <summary>Gets or sets the bitmap name.</summary>
      <returns>The bitmap name.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.DisplayName">
      <summary>Gets or sets the display name.</summary>
      <returns>The display name.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.IsValid">
      <summary>Gets a value that indicates whether this <see cref="T:System.Drawing.Design.ToolboxItem" /> is valid.</summary>
      <returns>true if the <see cref="T:System.Drawing.Design.ToolboxItem" /> is valid; otherwise, false. </returns>
    </member>
    <member name="E:System.Activities.Design.Toolbox.ToolboxItemWrapper.PropertyChanged">
      <summary>An event that occurs when a property is changed.</summary>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.ToolName">
      <summary>Gets or sets the name of the tool.</summary>
      <returns>The tool name.</returns>
      <exception cref="T:System.OperationException">The name of the tool cannot be changed.</exception>
    </member>
    <member name="M:System.Activities.Design.Toolbox.ToolboxItemWrapper.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>Returns the value of the <see cref="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.ToolName" /> for the current <see cref="T:System.Activities.Design.Toolbox.ToolboxItemWrapper" /> object.</returns>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolboxItemWrapper.Type">
      <summary>Gets the type of the <see cref="T:System.Drawing.Design.ToolboxItem" />.</summary>
      <returns>Returns <see cref="T:System.Type" />.</returns>
    </member>
    <member name="T:System.Activities.Design.Toolbox.ToolCreatedEventArgs">
      <summary>Represents event arguments for the tool created event.</summary>
    </member>
    <member name="P:System.Activities.Design.Toolbox.ToolCreatedEventArgs.Components">
      <summary>Returns the components to be included in the tool creation event.</summary>
      <returns>The <see cref="T:System.Aray" /> of type <see cref="T:System.ComponentModel.IComponent" /> that contains the data passed to the <see cref="T:System.Activities.Design.Toolbox.ToolCreatedEventHandler" />.</returns>
    </member>
    <member name="T:System.Activities.Design.Toolbox.ToolCreatedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Activities.Design.Toolbox.ToolboxControl.ToolCreated" /> event.</summary>
      <param name="sender">The source of the tool created event.</param>
      <param name="e">The <see cref="T:System.Activities.Design.Toolbox.ToolCreatedEventArgs" /> that contains data for the tool created event.</param>
    </member>
    <member name="T:System.Activities.Design.Validation.IValidationErrorService">
      <summary>Provides accessibility to a specified list of activity validation errors.</summary>
    </member>
    <member name="M:System.Activities.Design.Validation.IValidationErrorService.ShowValidationErrors(System.Collections.Generic.IList{System.Activities.Design.Validation.ValidationErrorInfo})">
      <summary>Makes the indicated list of activity validation errors accessible through a specific implementation.</summary>
      <param name="errors">A specified type of list that contains activity validation errors.</param>
    </member>
    <member name="T:System.Activities.Design.Validation.ValidationErrorInfo">
      <summary>Provides a container for all the properties attached to an instance of a validation error that occurred during the design time or run time of a workflow activity.</summary>
    </member>
    <member name="M:System.Activities.Design.Validation.ValidationErrorInfo.#ctor(System.Activities.Validation.ValidationError)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.Validation.ValidationErrorInfo" /> class with the specified validation error.
</summary>
      <param name="validationError">An exception that occurs during the validation of a workflow activity.
</param>
    </member>
    <member name="M:System.Activities.Design.Validation.ValidationErrorInfo.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.Validation.ValidationErrorInfo" /> class that contains information about a specific error.</summary>
      <param name="message">An alphanumeric message that provides additional information about the error.</param>
    </member>
    <member name="P:System.Activities.Design.Validation.ValidationErrorInfo.FileName">
      <summary>Gets the alphanumeric name of the file that generated the error.</summary>
      <returns>A text string name of a file.</returns>
    </member>
    <member name="P:System.Activities.Design.Validation.ValidationErrorInfo.Id">
      <summary>Gets a unique <see cref="T:System.String" /> identifier for this error.</summary>
      <returns>A text string that identifies the error.</returns>
    </member>
    <member name="P:System.Activities.Design.Validation.ValidationErrorInfo.IsWarning">
      <summary>Gets a boolean that determines whether the constraint violation is a warning.</summary>
      <returns>true if the constraint violation is a warning; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.Validation.ValidationErrorInfo.Message">
      <summary>Gets an alphanumeric message that provides additional information about the error.</summary>
      <returns>A text string comment that provides extra information.</returns>
    </member>
    <member name="P:System.Activities.Design.Validation.ValidationErrorInfo.PropertyName">
      <summary>Gets the alphanumeric name of the property that generated the error.</summary>
      <returns>A text string name of a property.</returns>
    </member>
    <member name="T:System.Activities.Design.Validation.ValidationService">
      <summary>Provides the functionality required to validate a workflow activity designer while it is being compiled or run and to provide the results of the validation process.</summary>
    </member>
    <member name="M:System.Activities.Design.Validation.ValidationService.#ctor(System.Activities.Design.EditingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.Validation.ValidationService" /> that uses permanent and transient state context information about an activity designer.</summary>
      <param name="context">An object that contains permanent and transient state context information about a designer instance. </param>
    </member>
    <member name="M:System.Activities.Design.Validation.ValidationService.NavigateToError(System.Activities.Design.Model.ModelItem)">
      <summary>Moves the keyboard focus to the work surface location of an error in an activity.</summary>
      <param name="modelItem">The name of the item that has generated an error.</param>
    </member>
    <member name="M:System.Activities.Design.Validation.ValidationService.NavigateToError(System.String)">
      <summary>Moves the keyboard focus to the work surface location of an error in an activity.</summary>
      <param name="id">An error identification number.</param>
    </member>
    <member name="M:System.Activities.Design.Validation.ValidationService.OnValidationCompleted">
      <summary>Triggers a new validation completed event.</summary>
    </member>
    <member name="P:System.Activities.Design.Validation.ValidationService.Settings">
      <summary>Gets the settings for the validation of the current workflow element tree, </summary>
      <returns>An object that contains the validation settings.
.</returns>
    </member>
    <member name="M:System.Activities.Design.Validation.ValidationService.ValidateWorkflow">
      <summary>Invokes validation of a workflow element tree.</summary>
    </member>
    <member name="T:System.Activities.Design.Validation.ValidationState">
      <summary>An enumeration of values that represent states of workflow element validation.</summary>
    </member>
    <member name="F:System.Activities.Design.Validation.ValidationState.Error">
      <summary>A value that indicates that an error occurred during the validation of a workflow element.</summary>
    </member>
    <member name="F:System.Activities.Design.Validation.ValidationState.Warning">
      <summary>A value that indicates that a warning occurred during the validation of a workflow element.</summary>
    </member>
    <member name="F:System.Activities.Design.Validation.ValidationState.ChildInvalid">
      <summary>A value that represents that validation found a child element to be invalid.</summary>
    </member>
    <member name="F:System.Activities.Design.Validation.ValidationState.Valid">
      <summary>A value that indicates that a workflow element is valid.</summary>
    </member>
    <member name="T:System.Activities.Design.View.ArgumentToExpressionConverter">
      <summary>Converts from arguments to Argument.Expression. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ArgumentToExpressionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.ArgumentToExpressionConverter" /> class. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ArgumentToExpressionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified argument into an Argument.Expression.</summary>
      <returns>Returns <see cref="T:System.Object" />.Contains the converted Argument.Expression.</returns>
      <param name="value">Not the value to convert.</param>
      <param name="targetType">Not implemented.</param>
      <param name="parameter">Not implemented.</param>
      <param name="culture">Not implemented.</param>
    </member>
    <member name="M:System.Activities.Design.View.ArgumentToExpressionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified Argument.Expression into an argument. </summary>
      <returns>Returns <see cref="T:System.Object" />.Contains the converted argument.</returns>
      <param name="value">The Argument.Expression to convert. </param>
      <param name="targetType">Not implemented. </param>
      <param name="parameter">Not implemented. </param>
      <param name="culture">Not implemented. </param>
    </member>
    <member name="T:System.Activities.Design.View.ArgumentToExpressionModelItemConverter">
      <summary>Converts an argument to an expression model. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ArgumentToExpressionModelItemConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.ArgumentToExpressionModelItemConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ArgumentToExpressionModelItemConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts the specified argument to an expression model item.</summary>
      <returns>Returns a <see cref="T:System.Object" /> that contains the expression model item.</returns>
      <param name="values">The argument to convert.</param>
      <param name="targetType">Not used in this implementation.</param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation.</param>
    </member>
    <member name="M:System.Activities.Design.View.ArgumentToExpressionModelItemConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <returns>Returns a <see cref="T:System.Object" /> that contains the argument.</returns>
      <param name="value">The model item to convert. </param>
      <param name="targetTypes">Not used in this implementation. </param>
      <param name="parameter">Not used in this implementation.</param>
      <param name="culture">Not used in this implementation. </param>
    </member>
    <member name="T:System.Activities.Design.View.AssemblyContextControlItem">
      <summary>Exposes a control item for an assembly context.</summary>
    </member>
    <member name="M:System.Activities.Design.View.AssemblyContextControlItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.AssemblyContextControlItem" /> class. </summary>
    </member>
    <member name="P:System.Activities.Design.View.AssemblyContextControlItem.ItemType">
      <summary>Gets an item type.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the item type.</returns>
    </member>
    <member name="P:System.Activities.Design.View.AssemblyContextControlItem.LocalAssemblyName">
      <summary>Gets or sets the local assembly name. </summary>
      <returns>Returns a <see cref="T:System.Reflection.AssemblyName" /> that contains the local assembly name.</returns>
    </member>
    <member name="P:System.Activities.Design.View.AssemblyContextControlItem.ReferencedAssemblies"></member>
    <member name="P:System.Activities.Design.View.AssemblyContextControlItem.ReferencedAssemblyNames">
      <summary>Gets or sets the referenced assembly names. </summary>
      <returns>Returns a <see cref="T:System.Collections.Generic.IList`1" /> that contains the referenced assembly names.</returns>
    </member>
    <member name="T:System.Activities.Design.View.CommandMenuMode">
      <summary>Describes the command menu mode. </summary>
    </member>
    <member name="F:System.Activities.Design.View.CommandMenuMode.FullCommandMenu">
      <summary>Full command menu.</summary>
    </member>
    <member name="F:System.Activities.Design.View.CommandMenuMode.NoCommandMenu">
      <summary>No command menu.</summary>
    </member>
    <member name="T:System.Activities.Design.View.DesignerView">
      <summary>The designer view. </summary>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.ActivitySchema">
      <summary>Gets the activity schema.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.Model.ModelItem" />.Contains the activity schema.</returns>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ActivitySchemaProperty">
      <summary>The DependencyProperty that represents the <see cref="P:System.Activities.Design.View.DesignerView.ActivitySchema" /> property. </summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CollapseCommand">
      <summary>The RoutedCommand used to collapse the user interface for the current element.
</summary>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.CommandMenuMode">
      <summary>Contains the command menu mode. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.CommandMenuMode" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CommandMenuModeProperty">
      <summary>The DependencyProperty that represents the <see cref="T:System.Activities.Design.View.CommandMenuMode" /> property. </summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CommitCommand">
      <summary>A RoutedCommand used to update the source value in a <see cref="T:System.Windows.Data.BindingExpression" />.</summary>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.Context">
      <summary>Gets or sets a collection of services shared between all elements contained in the designer. </summary>
      <returns>Returns an <see cref="T:System.Activities.Design.EditingContext" /> object.Contains the context.</returns>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CopyAsImageCommand">
      <summary>The RoutedCommand used to copy the current workflow design surface as a screenshot and place it in the Clipboard. </summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CreateArgumentCommand">
      <summary>The RoutedCommand used to create a new argument.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CreateVariableCommand">
      <summary>The RoutedCommand used to create a new variable for the currently selected activity.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CreateWorkflowElementCommand">
      <summary>The RoutedCommand used to create a new <see cref="T:System.Activities.Design.WorkflowViewElement" /> on the current workflow designer surface when dragging a workflow item from the Toolbox onto the designer surface.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CustomMenuItemsSeparatorCommand">
      <summary>A string constant that contains the Guid for the custom menu items separator.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.CycleThroughDesignerCommand">
      <summary>The RoutedCommand used to cycle the various UI elements of the current workflow designer surface.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.DeleteBreakpointCommand">
      <summary>The RoutedCommand used to delete the breakpoint set on the current activity.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.DisableBreakpointCommand">
      <summary>The RoutedCommand used to disable the breakpoint set on the current activity.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.EnableBreakpointCommand">
      <summary>The RoutedCommand used to enable the breakpoint on the current activity.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ExpandAllCommand">
      <summary>The RoutedCommand used to expand the list 
</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ExpandCommand">
      <summary>The RoutedCommand used to navigate to the selected child of a composite activity and expand it to fill the full screen of the workflow designer surface. The View full screen context menu command will initiate this action.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ExpandInPlaceCommand">
      <summary>The RoutedCommand used to
</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.FitToScreenCommand">
      <summary>The RoutedCommand used to
</summary>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.FocusedViewElement">
      <returns>Returns 
<see cref="T:System.Activities.Design.WorkflowViewElement" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.FocusedViewElementProperty"></member>
    <member name="M:System.Activities.Design.View.DesignerView.GetCommandMenuMode(System.Windows.DependencyObject)">
      <summary>Retrieves the command menu mode of the specified object. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.CommandMenuMode" />.Contains the command menu mode.</returns>
      <param name="obj">The object. </param>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.GoToParentCommand">
      <summary>The RoutedCommand used to navigate to the parent activity of the selected child activity and expand it to fill the full screen of the workflow designer surface. The View parent context menu command will initiate this action.</summary>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.InitializeComponent">
      <summary>Initializes this form.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.InsertBreakpointCommand">
      <summary>The RoutedCommand used to set a breakpoint on the current activity.</summary>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.IsMultipleSelectionMode">
      <returns>Returns 
<see cref="T:System.Boolean" />
.
</returns>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.IsReadOnly">
      <summary>Determines whether the <see cref="T:System.Activities.Design.View.DesignerView" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Activities.Design.View.DesignerView" /> is read-only; false otherwise.
.</returns>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.IsReadOnlyProperty">
      <summary>Represents the DependencyProperty for the <see cref="P:System.Activities.Design.View.DesignerView.IsReadOnly" /> property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.MakeRootDesigner(System.Activities.Design.Model.ModelItem)">
      <summary>Makes the <see cref="T:System.Activities.Design.WorkflowViewElement" /> associated with the root <see cref="T:System.Activities.Design.Model.ModelItem" /> the <see cref="P:System.Activities.Design.View.DesignerView.RootDesigner" />.</summary>
      <param name="modelItem">The <see cref="T:System.Activities.Design.Model.ModelItem" />.</param>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.MoveFocusCommand">
      <summary>The RoutedCommand used to
</summary>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
      <summary>Raises the ContextMenuOpening event. </summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.OnInitialized(System.EventArgs)">
      <summary>Handles the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event by calling the <see cref="T:System.Windows.Controls.UserControl" /> base class implementation, adding an event handler for the <see cref="E:System.Windows.UIElement.GotKeyboardFocus" /> routed event, and setting the foreground color for the designer view.</summary>
      <param name="e"></param>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Raises the KeyDown event.</summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
      <summary>Raises the PreviewMouseWheel event. </summary>
      <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.OnReferenceUpdated(System.Reflection.AssemblyName,System.Boolean)">
      <param name="updatedReference"></param>
      <param name="isAdded"></param>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ResetZoomCommand">
      <summary>The RoutedCommand used to
</summary>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.RootDesigner">
      <summary>Gets or sets a <see cref="T:System.Windows.UIElement" /> that is the UI representation of the root of the current model tree.</summary>
      <returns>Returns a <see cref="T:System.Windows.UIElement" /> object.</returns>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.RootDesignerProperty">
      <summary>Represents the DependencyProperty for the <see cref="P:System.Activities.Design.View.DesignerView.RootDesigner" /> property. </summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.SaveAsImageCommand">
      <summary>The RoutedCommand used to save the current workflow design surface as an image.</summary>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.SetCommandMenuMode(System.Windows.DependencyObject,System.Activities.Design.View.CommandMenuMode)">
      <summary>Sets the command menu mode on the specified object. </summary>
      <param name="obj">The object. </param>
      <param name="value">The value to set. </param>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.ShouldExpandAll">
      <returns>Returns 
<see cref="T:System.Boolean" />
.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>Attaches events and names to compiled content.</summary>
      <param name="connectionId">The connection ID. </param>
      <param name="target">The target.</param>
    </member>
    <member name="M:System.Activities.Design.View.DesignerView.System#Windows#Markup#IStyleConnector#Connect(System.Int32,System.Object)">
      <summary>Calls the StyleBamlReader to attach events on EventSetters and Templates in compiled content.</summary>
      <param name="connectionId">The connection ID.</param>
      <param name="target">The target.</param>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ToggleArgumentDesignerCommand">
      <summary>The RoutedCommand used to show or hide the argument designer. Clicking on the Arguments button on the workflow designer surface will initiate this action. </summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ToggleImportsDesignerCommand">
      <summary>The RoutedCommand used to
</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ToggleMiniMapCommand">
      <summary>The RoutedCommand used to show or hide the MiniMap control on the workflow designer surface.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ToggleSelectionCommand">
      <summary>The RoutedCommand used to
</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ToggleVariableDesignerCommand">
      <summary>The RoutedCommand used to show or hide the variable designer. Clicking on the Variables button on the workflow designer surface will initiate this action.</summary>
    </member>
    <member name="P:System.Activities.Design.View.DesignerView.WorkflowShellBarItemVisibility">
      <returns>Returns 
<see cref="T:System.Activities.Design.View.ShellBarItemVisibility" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ZoomInCommand">
      <summary>The RoutedCommand used to zoom in on the current workflow designer surface.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DesignerView.ZoomOutCommand">
      <summary>The RoutedCommand used to zoom out of the current workflow designer surface.</summary>
    </member>
    <member name="T:System.Activities.Design.View.DynamicArgumentDesigner">
      <summary>Describes the dynamic argument control.</summary>
    </member>
    <member name="M:System.Activities.Design.View.DynamicArgumentDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.DynamicArgumentDesigner" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.ArgumentPrefix">
      <returns>Returns 
<see cref="T:System.String" />
.</returns>
    </member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.Context">
      <summary>Gets or sets the context. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.EditingContext" />.Contains the context. </returns>
    </member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.ContextProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.DynamicArgumentDesigner.Context" /> dependency property.</summary>
    </member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.CreateDynamicArgumentCommand"></member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.DefaultArgumentPrefix"></member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.DynamicArguments">
      <summary>Gets or sets the dynamic arguments. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.Model.ModelItem" />.Contains the dynamic arguments. </returns>
    </member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.DynamicArgumentsProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.DynamicArgumentDesigner.DynamicArguments" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.HideDirection">
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
    </member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.HintText">
      <returns>Returns 
<see cref="T:System.String" />
.</returns>
    </member>
    <member name="M:System.Activities.Design.View.DynamicArgumentDesigner.InitializeComponent">
      <summary>Initializes this form.</summary>
    </member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.IsDirectionReadOnly">
      <summary>Gets or sets a value that determines if the direction is read-only. </summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the direction is read-only; otherwise, false. </returns>
    </member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.IsDirectionReadOnlyProperty">
      <summary>Specifies the <see cref="P:System.Activities.Design.View.DynamicArgumentDesigner.IsDirectionReadOnly" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.IsReadOnly"></member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.IsReadOnlyProperty"></member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.MoveDownArgumentCommand"></member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.MoveUpArgumentCommand"></member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.OwnerActivity">
      <summary>Gets or sets the owner activity. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.Model.ModelItem" />.Contains the owner activity. </returns>
    </member>
    <member name="F:System.Activities.Design.View.DynamicArgumentDesigner.OwnerActivityProperty">
      <summary>Specifies the <see cref="P:System.Activities.Design.View.DynamicArgumentDesigner.OwnerActivity" /> property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesigner.ParentDialog"></member>
    <member name="M:System.Activities.Design.View.DynamicArgumentDesigner.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <param name="connectionId">The connection ID.</param>
      <param name="target">The form. </param>
    </member>
    <member name="M:System.Activities.Design.View.DynamicArgumentDesigner.System#Windows#Markup#IStyleConnector#Connect(System.Int32,System.Object)">
      <param name="connectionId">The connection ID. </param>
      <param name="target">The target. </param>
    </member>
    <member name="T:System.Activities.Design.View.DynamicArgumentDesignerOptions"></member>
    <member name="M:System.Activities.Design.View.DynamicArgumentDesignerOptions.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.View.DynamicArgumentDesignerOptions" />
 class.</summary>
    </member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesignerOptions.ArgumentPrefix">
      <returns>Returns 
<see cref="T:System.String" />
.</returns>
    </member>
    <member name="P:System.Activities.Design.View.DynamicArgumentDesignerOptions.Title">
      <returns>Returns 
<see cref="T:System.String" />
.</returns>
    </member>
    <member name="T:System.Activities.Design.View.DynamicArgumentDialog"></member>
    <member name="M:System.Activities.Design.View.DynamicArgumentDialog.ShowDialog(System.Activities.Design.Model.ModelItem,System.Activities.Design.Model.ModelItem,System.Activities.Design.EditingContext,System.Windows.DependencyObject,System.Activities.Design.View.DynamicArgumentDesignerOptions)"></member>
    <member name="T:System.Activities.Design.View.EditingState"></member>
    <member name="F:System.Activities.Design.View.EditingState.Editing">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.EditingState.Validating">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.EditingState.Idle">
      <summary />
    </member>
    <member name="T:System.Activities.Design.View.ErrorView">
      <summary>Contains the error view presented when there are exceptions or errors in the designer view, or when the designer is unable to load. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ErrorView.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.View.ErrorView" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ErrorView.Details">
      <summary>Gets or sets the error details.</summary>
      <returns>Returns <see cref="T:System.String" />.Contains the error details. </returns>
    </member>
    <member name="F:System.Activities.Design.View.ErrorView.DetailsProperty">
      <summary>Initializes the <see cref="P:System.Activities.Design.View.ErrorView.Details" /> dependency property. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ErrorView.InitializeComponent">
      <summary>Initializes this form. </summary>
    </member>
    <member name="P:System.Activities.Design.View.ErrorView.Message">
      <summary>Gets or sets the error message. </summary>
      <returns>Returns <see cref="T:System.String" />.Contains the error message.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ErrorView.MessageProperty">
      <summary>Initializes the <see cref="P:System.Activities.Design.View.ErrorView.Message" /> dependency property. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ErrorView.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>Attaches events and names to compiled content.</summary>
      <param name="connectionId">The connection ID.</param>
      <param name="target">The target.</param>
    </member>
    <member name="T:System.Activities.Design.View.ExpressionTextBox">
      <summary>Describes a control that enables the user to edit an expression in an activity designer.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExpressionTextBox.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.View.ExpressionTextBox" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExpressionTextBox.BeginEdit">
      <summary>Begins an edit.
</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.CompleteWordCommand"></member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.DefaultValue"></member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.DefaultValueProperty"></member>
    <member name="E:System.Activities.Design.View.ExpressionTextBox.EditorLostLogicalFocus">
      <summary>Occurs when the expression editor loses logical focus.
</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.EditorLostLogicalFocusEvent">
      <summary>Identifies the <see cref="E:System.Activities.Design.View.ExpressionTextBox.EditorLostLogicalFocus" /> routed event.
</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.ExplicitCommit">
      <summary>Gets or sets a value that determines if a commit is explicit.
</summary>
      <returns>Returns true if the commit is explicit; otherwise, false.


</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.ExplicitCommitProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.ExplicitCommit" /> dependency property. 
</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.Expression">
      <summary>Gets or sets the expression. </summary>
      <returns>Returns a <see cref="T:System.Activities.Design.Model.ModelItem" /> that contains the expression.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.ExpressionEditorService">
      <summary>Gets the expression editor service.
</summary>
      <returns>Returns a <see cref="T:System.Activities.Design.View.IExpressionEditorService" /> containing the expression editor service.
</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.ExpressionProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.Expression" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.ExpressionType">
      <summary>Gets or sets the expression type. </summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the expression type.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.ExpressionTypeProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.ExpressionType" /> dependency property.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.GlobalIntellisenseCommand"></member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.HintText">
      <summary>Gets or sets the hint text. </summary>
      <returns>Returns a <see cref="T:System.String" /> that contains the hint text.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.HintTextProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.HintText" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.HorizontalScrollBarVisibility">
      <summary>Gets or sets the horizontal scroll bar visibility. </summary>
      <returns>Returns a <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> that contains the horizontal scroll bar visibility.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.HorizontalScrollBarVisibilityProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.HorizontalScrollBarVisibility" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExpressionTextBox.InitializeComponent">
      <summary>Initializes this form.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.IsSupportedExpression">
      <summary>Gets or sets a value that determines if the expression is supported.
</summary>
      <returns>Returns true if the expression is supported; otherwise, false.
</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.IsSupportedExpressionProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.IsSupportedExpression" /> dependency property. 
</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.MaxLines">
      <summary>Gets or sets the maximum number of lines</summary>
      <returns>Returns <see cref="T:System.Int32" /> that contains the maximum number of lines.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.MaxLinesProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.MaxLines" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.MinLines">
      <summary>Gets or sets the nimimum number of lines. </summary>
      <returns>Returns a <see cref="T:System.Int32" /> that contains the minimum number of lines.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.MinLinesProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.MinLines" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.OwnerActivity">
      <summary>Gets or sets the owner activity. </summary>
      <returns>Returns a <see cref="T:System.Activities.Design.Model.ModelItem" /> that contains the owner activity.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.OwnerActivityProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.OwnerActivity" /> dependency property.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.ParameterInfoCommand"></member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.PathToArgument">
      <summary>Gets or sets the path to the argument. </summary>
      <returns>Returns a <see cref="T:System.String" /> that contains the path to the argument.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.PathToArgumentProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.PathToArgument" /> dependency property. </summary>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.QuickInfoCommand"></member>
    <member name="M:System.Activities.Design.View.ExpressionTextBox.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>Attaches events and names to compiled content. </summary>
      <param name="connectionId">The connection ID. </param>
      <param name="target">The target.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExpressionTextBox.System#Windows#Markup#IStyleConnector#Connect(System.Int32,System.Object)">
      <summary>Calls the StyleBamlReader to attach events on EventSetters and Templates in compiled content.</summary>
      <param name="connectionId">The connection ID.</param>
      <param name="target">The target.</param>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.UseLocationExpression">
      <summary>Gets or sets a value that determines whether this instance uses the location expression. </summary>
      <returns>true if this instance uses the location expression; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.UseLocationExpressionProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox.UseLocationExpression" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExpressionTextBox.VerticalScrollBarVisibility">
      <summary>Gets or sets the vertical scrollbar visibility. </summary>
      <returns>Returns a <see cref="T:System.Windows.Controls.ScrollBarVisibility" /> that contains the scrollbar visibility.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExpressionTextBox.VerticalScrollBarVisibilityProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExpressionTextBox. VerticalScrollBarVisibility" /> dependency property.</summary>
    </member>
    <member name="T:System.Activities.Design.View.ExtensionSurface">
      <summary>Describes the extension surface. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.ExtensionSurface" />
class.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.AddExtensionElement(System.Activities.Design.View.ExtensionWindow)">
      <summary>Adds the specified window to the collection. </summary>
      <param name="window">The window to add. </param>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionSurface.Alignment">
      <summary>Specifies the alignment. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.ExtensionSurface.PositionAlignment" />. Contains the alignment. </returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.AlignmentProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExtensionSurface.Alignment" /> property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionSurface.AutoExpandCanvas">
      <summary>Gets or sets a value that determines whether the canvas auto-expands. </summary>
      <returns>true if the canvas auto-expands; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.AutoExpandCanvasProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExtensionSurface.AutoExpandCanvas" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionSurface.Designer">
      <summary>Gets or sets the surface view designer. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.DesignerView" />.Contains the surface view designer.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.DesignerProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExtensionSurface.Designer" /> property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.GetAlignment(System.Windows.DependencyObject)">
      <summary>Retrieves the alignment of the specified container. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.ExtensionSurface.PositionAlignment" />.Contains the alignment</returns>
      <param name="container">The container to get the alignment of. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.GetMode(System.Windows.DependencyObject)">
      <summary>Gets the mode of the specified container. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.ExtensionSurface.PlacementMode" />.Contains the mode.</returns>
      <param name="container">The container to get the mode of.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.GetPlacementTarget(System.Windows.DependencyObject)">
      <summary>Retrieves the placement target of the specified container. </summary>
      <returns>Returns <see cref="T:System.Windows.FrameworkElement" />.Contains the placement target. </returns>
      <param name="container">The container to get the placement target of. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.GetPosition(System.Windows.DependencyObject)">
      <summary>Retrieves the position of the specified object. </summary>
      <returns>Returns <see cref="T:System.Windows.Point" />.Contains the position.</returns>
      <param name="container">The container to retrieve the position of. </param>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionSurface.Mode">
      <summary>Describes the mode. </summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.ExtensionSurface.PlacementMode" />.Contains the mode. </returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.ModeProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExtensionSurface.Mode" /> property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionSurface.PlacementTarget">
      <summary>Gets or sets the placement target. </summary>
      <returns>Returns <see cref="T:System.Windows.FrameworkElement" />.Contains the placement target. </returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PlacementTargetProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExtensionSurface.PlacementTarget" /> dependency property. </summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionSurface.Position">
      <summary>Gets or sets the position. </summary>
      <returns>Returns <see cref="T:System.Windows.Point" />.Contains the position. </returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionProperty">
      <summary>Registers the <see cref="P:System.Activities.Design.View.ExtensionSurface.Position" /> property. </summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.RemoveExtensionElement(System.Activities.Design.View.ExtensionWindow)">
      <summary>Removes the specified extension element. </summary>
      <param name="window">The extension element to remove. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.SelectWindow(System.Activities.Design.View.ExtensionWindow)">
      <summary>Selects the specified window. </summary>
      <param name="window">The window to select. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.SetAlignment(System.Windows.DependencyObject,System.Activities.Design.View.ExtensionSurface.PositionAlignment)">
      <summary>Set the alignment on the specified container. </summary>
      <param name="container">The container. </param>
      <param name="value">The alignment value to set on the container. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.SetMode(System.Windows.DependencyObject,System.Activities.Design.View.ExtensionSurface.PlacementMode)">
      <summary>Sets the mode on the specified container. </summary>
      <param name="container">The container. </param>
      <param name="value">The mode value to set on the container. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.SetPlacementTarget(System.Windows.DependencyObject,System.Windows.FrameworkElement)">
      <summary>Sets the placement target on the specified container. </summary>
      <param name="container">The container. </param>
      <param name="value">The placement target to set on the container. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionSurface.SetPosition(System.Windows.DependencyObject,System.Windows.Point)">
      <summary>Sets the position on the specified container. </summary>
      <param name="container">The container. </param>
      <param name="value">The position value to set. </param>
    </member>
    <member name="T:System.Activities.Design.View.ExtensionSurface.PlacementMode">
      <summary>Describes the placement mode for the extension surface.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PlacementMode.Relative">
      <summary>Relative mode.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PlacementMode.Absolute">
      <summary>Absolute mode.</summary>
    </member>
    <member name="T:System.Activities.Design.View.ExtensionSurface.PositionAlignment">
      <summary>Describes the position alignment for the extension surface. </summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionAlignment.LeftTop">
      <summary>Left top. </summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionAlignment.LeftBottom">
      <summary>Left bottom. </summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionAlignment.RightTop">
      <summary>Right top. </summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionAlignment.RightBottom">
      <summary>Right bottom.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionAlignment.Center">
      <summary>Center. </summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionAlignment.CenterHorizontal">
      <summary>Center horizontal.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionSurface.PositionAlignment.CenterVertical">
      <summary>Center vertical. </summary>
    </member>
    <member name="T:System.Activities.Design.View.ExtensionWindow">
      <summary>This class provides an experience similar to PopupWindow, while editing data on designer surface. Its behavior is similar to an ordinary popup, with additional functionalities that allow resizing, moving, and easier styling.
</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.ExtensionWindow" /> class.</summary>
    </member>
    <member name="E:System.Activities.Design.View.ExtensionWindow.Close">
      <summary>Occurs when the window is closed.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.CloseEvent">
      <summary>Identifies with the <see cref="E:System.Activities.Design.View.ExtensionWindow.Close" /> routed event.</summary>
    </member>
    <member name="E:System.Activities.Design.View.ExtensionWindow.Closing">
      <summary>Occurs when the window is closing.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.ClosingEvent">
      <summary>Identifies with the <see cref="E:System.Activities.Design.View.ExtensionWindow.Closing" /> routed event.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.ContentPresenter">
      <summary>Gets the content presenter for this extension window.</summary>
      <returns>Returns <see cref="T:System.Windows.Controls.ContentPresenter" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.Data">
      <summary>Gets or sets the data associated with this extension window. </summary>
      <returns>Returns <see cref="T:System.Object" />, which is data associated with this extension window.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.DataProperty">
      <summary>Identifies with the <see cref="P:System.Activities.Design.View.ExtensionWindow.Data" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.GetPlacementTargetOffset">
      <summary> Gets the placement target offset. 
</summary>
      <returns>Returns 
<see cref="T:System.Windows.Point" />
.
</returns>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.Icon">
      <summary>Gets or sets the icon associated with this extension window. </summary>
      <returns>A <see cref="T:System.Windows.Media.DrawingBrush" /> instance that represents the icon associated with this extension window.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.IconProperty">
      <summary>Identifies with the <see cref="P:System.Activities.Design.View.ExtensionWindow.Icon" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.IsResizable">
      <summary>Gets or sets a Boolean value that specifies whether the window is resizable.</summary>
      <returns>true if the window is resizable; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.IsResizableProperty">
      <summary>Identifies with the <see cref="P:System.Activities.Design.View.ExtensionWindow.IsResizable" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.MenuItems">
      <summary>Gets or sets a collection of menu items associated with this extension window.</summary>
      <returns>Returns <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />, which is a collection of menu items associated with this extension window.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.MenuItemsProperty">
      <summary>Identifies with the <see cref="P:System.Activities.Design.View.ExtensionWindow.MenuItems" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnApplyTemplate">
      <summary>Called when the template’s tree is generated.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnDataChanged(System.Object,System.Object)">
      <summary>Called when data has changed.</summary>
      <param name="oldData">The old data.</param>
      <param name="newData">The new data.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnInitialized(System.EventArgs)">
      <summary>Raises the Initialized event.
</summary>
      <param name="e">Contains event data.
</param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>Called when the mouse pointer is over the window and a mouse button is pressed.</summary>
      <param name="e">Contains event data.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called when a key is pressed while the window has focus.</summary>
      <param name="e">Contains event data.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnPositionChanged(System.Windows.Point)">
      <summary>Called when the value of the specified position has changed.</summary>
      <param name="position">The position that has changed.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnVisibilityChanged(System.Windows.Visibility,System.Windows.Visibility)">
      <summary>Raise the <see cref="E:System.Activities.Design.View.ExtensionWindow.VisibilityChanged" /> event.</summary>
      <param name="oldValue">The old value.</param>
      <param name="newValue">The new value.</param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.OnVisualParentChanged(System.Windows.DependencyObject)">
      <summary>Invoked when the parent of this extension window in the visual tree is changed.</summary>
      <param name="oldParent">The previous parent.</param>
      <exception cref="T:System.NotSupportedException">ExtensionWindow is used outside ExtensionSurface.</exception>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.SelectWindow">
      <summary>Selects this extension window in the extension surface.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.ShowResizeGrip">
      <summary>Gets or sets a Boolean value that specifies whether the resize grip is shown.</summary>
      <returns>true if the resize grip is shown; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.ShowResizeGripProperty">
      <summary>Identifies with the <see cref="P:System.Activities.Design.View.ExtensionWindow.ShowResizeGrip" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.ShowWindowHeader">
      <summary>Gets or sets a Boolean value that specifies whether the window header is shown.</summary>
      <returns>true if the window header is shown; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.ShowWindowHeaderProperty">
      <summary>Identifies with the <see cref="P:System.Activities.Design.View.ExtensionWindow.ShowWindowHeader" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.Surface">
      <summary>Gets the extension surface for this extension window.</summary>
      <returns>Returns <see cref="T:System.Activities.Design.View.ExtensionSurface" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindow.Title">
      <summary>Gets or sets the title of this extension window. </summary>
      <returns>A  <see cref="T:System.String" /> that contains the title of this extension window.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.TitleProperty">
      <summary>Identifies with the <see cref="P:System.Activities.Design.View.ExtensionWindow.Title" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindow.TryFindElement(System.String,System.Object@)">
      <summary>Finds the element associated with the specified name defined within this template.</summary>
      <returns>true if the search is successful; otherwise, false.</returns>
      <param name="elementName">The string name.</param>
      <param name="element">The element where this template is applied.</param>
    </member>
    <member name="E:System.Activities.Design.View.ExtensionWindow.VisibilityChanged">
      <summary>Occurs when the window’s visibility is changed.</summary>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindow.VisibilityChangedEvent">
      <summary>Identifies with the <see cref="E:System.Activities.Design.View.ExtensionWindow.VisibilityChanged" /> routed event.</summary>
    </member>
    <member name="T:System.Activities.Design.View.ExtensionWindowCloseEventHandler"></member>
    <member name="T:System.Activities.Design.View.ExtensionWindowClosingEventHandler"></member>
    <member name="T:System.Activities.Design.View.ExtensionWindowClosingRoutedEventArgs">
      <summary>Contains the arguments for the ExtensionWindowClosingRoutedEvent.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindowClosingRoutedEventArgs.Cancel">
      <summary>Gets or sets a value that determines whether the extension window closing has been cancelled.</summary>
      <returns>true if the event has been cancelled; otherwise, false.


.</returns>
    </member>
    <member name="T:System.Activities.Design.View.ExtensionWindowHeader">
      <summary>Represents the visual representation of a window header, which is used with <see cref="T:System.Activities.Design.View.ExtensionWindow" /> to enable 
moving and closing. The actual moving logic is handled by the <see cref="T:System.Activities.Design.View.ExtensionSurface" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindowHeader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.ExtensionWindowHeader" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindowHeader.ButtonCloseIcon">
      <summary>Gets or sets the icon that represents the close button.</summary>
      <returns>Returns <see cref="T:System.Windows.Media.DrawingBrush" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindowHeader.ButtonCloseIconProperty">
      <summary>Gets the icon for the close button.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindowHeader.DropDownMenuIcon">
      <summary>Gets or sets the icon that represents the drop-down menu.</summary>
      <returns>Returns <see cref="T:System.Windows.Media.DrawingBrush" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindowHeader.DropDownMenuIconProperty">
      <summary>Gets the icon for the drop-down menu.</summary>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindowHeader.Icon">
      <summary>Gets or sets the icon for this header. </summary>
      <returns>Returns <see cref="T:System.Windows.Media.DrawingBrush" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindowHeader.IconProperty">
      <summary>Gets the icon of this window header.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindowHeader.OnApplyTemplate">
      <summary>Invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate" />.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindowHeader.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called before the <see cref="M:System.Windows.Controls.Control.MouseLeftButtonDown" /> event occurs.</summary>
      <param name="args">The data for the event. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindowHeader.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>Called before the <see cref="M:System.Windows.Controls.Control.MouseLeftButtonUp" /> event occurs.</summary>
      <param name="args">The data for the event. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindowHeader.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>Called before the <see cref="M:System.Windows.Controls.Control.MouseMove" /> event occurs.</summary>
      <param name="args">The data for the event. </param>
    </member>
    <member name="M:System.Activities.Design.View.ExtensionWindowHeader.OnVisualParentChanged(System.Windows.DependencyObject)">
      <summary>Invoked when the parent element of this <see cref="T:System.Activities.Design.View.ExtensionWindowHeader" /> reports a change to its underlying visual parent.</summary>
      <param name="oldParent">The previous parent. </param>
      <exception cref="T:System.NotSupportedException">ExtensionWindowHeader cannot be used outside <see cref="T:System.Activities.Design.View.ExtensionWindow" />.</exception>
    </member>
    <member name="P:System.Activities.Design.View.ExtensionWindowHeader.Title">
      <summary>Gets or sets the title for this window header.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.ExtensionWindowHeader.TitleProperty">
      <summary>Gets the title of this window header.</summary>
    </member>
    <member name="T:System.Activities.Design.View.FilterableData">
      <summary>Represents a piece of data that can be filtered on visibility. </summary>
    </member>
    <member name="M:System.Activities.Design.View.FilterableData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.FilterableData" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.View.FilterableData.Data">
      <summary>Gets or sets the actual data encapsulated by this class.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.FilterableData.DataProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.View.FilterableData.Data" /> dependency property.</summary>
    </member>
    <member name="P:System.Activities.Design.View.FilterableData.IsSelected">
      <summary>Gets or sets a value that indicates whether the data is selected.</summary>
      <returns>true if the data is selected; otherwise, false.</returns>
    </member>
    <member name="F:System.Activities.Design.View.FilterableData.IsSelectedProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.View.FilterableData.IsSelected" /> dependency property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.FilterableData.ToString">
      <summary>Converts this piece of data into a string.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.FilterableData.Visibility">
      <summary>Gets or sets a value that indicates whether the data is visible.</summary>
      <returns>Returns <see cref="T:System.Windows.Visibility" />.</returns>
    </member>
    <member name="F:System.Activities.Design.View.FilterableData.VisibilityProperty">
      <summary>Identifies the <see cref="P:System.Activities.Design.View.FilterableData.Visibility" /> dependency property.</summary>
    </member>
    <member name="T:System.Activities.Design.View.FilterableData`1">
      <summary>Represents a piece of data that can be filtered on visibility. </summary>
      <typeparam name="TData"></typeparam>
    </member>
    <member name="M:System.Activities.Design.View.FilterableData`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.FilterableData`1" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.View.FilterableData`1.ToString">
      <summary>Converts this piece of data into a string.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.FilterableData`1.TypedData">
      <summary>Gets or sets the actual data encapsulated by this class.</summary>
    </member>
    <member name="T:System.Activities.Design.View.FlagEditor"></member>
    <member name="M:System.Activities.Design.View.FlagEditor.#ctor">
      <summary>Creates an instance of the <see cref="T:System.Activities.Design.View.FlagEditor" /> class.</summary>
    </member>
    <member name="P:System.Activities.Design.View.FlagEditor.FlagType">
      <returns>Returns 
<see cref="T:System.Type" />
.</returns>
    </member>
    <member name="F:System.Activities.Design.View.FlagEditor.FlagTypeProperty"></member>
    <member name="M:System.Activities.Design.View.FlagEditor.InitializeComponent"></member>
    <member name="M:System.Activities.Design.View.FlagEditor.OnDropDownClosed(System.EventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:System.Activities.Design.View.FlagEditor.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:System.Activities.Design.View.FlagEditor.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <param name="e"></param>
    </member>
    <member name="M:System.Activities.Design.View.FlagEditor.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <param name="connectionId"></param>
      <param name="target"></param>
    </member>
    <member name="T:System.Activities.Design.View.IExpressionEditorInstance">
      <summary>Represents an expression editor.</summary>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanCompleteWord">
      <returns>Returns 
<see cref="T:System.Boolean" />
.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanCopy">
      <summary>Gets a Boolean value that indicates if the Expression Editor can be closed.
</summary>
      <returns>true if the the Expression Editor can be closed; otherwise, false.
.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanCut">
      <summary>Gets a Boolean value that indicates if the expression can be cut.
</summary>
      <returns>true if the the expression can be cut; otherwise, false.
.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanGlobalIntellisense">
      <returns>Returns 
<see cref="T:System.Boolean" />
.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanParameterInfo">
      <returns>Returns 
<see cref="T:System.Boolean" />
.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanPaste">
      <summary>Gets a Boolean value that indicates if the expression can be pasted.
</summary>
      <returns>true if the the expression can be pasted; otherwise, false.

</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanQuickInfo">
      <returns>Returns 
<see cref="T:System.Boolean" />
.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanRedo">
      <summary>Gets a Boolean value that indicates if the system can redo the operation.
</summary>
      <returns>true if the system can redo the operation; otherwise, false.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CanUndo">
      <summary>Gets a Boolean value that indicates if the system can undo the operation.
</summary>
      <returns>true if the system can undo the operation; otherwise, false.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.ClearSelection">
      <summary>Clears the selection in the editor.</summary>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.Close">
      <summary>Closes and purges the editor items. This will close the specific expression editor.</summary>
    </member>
    <member name="E:System.Activities.Design.View.IExpressionEditorInstance.Closing">
      <summary>Occurs when the Expression Editor is closing.
</summary>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.CompleteWord">
      <returns>Returns 
<see cref="T:System.Boolean" />
.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.Copy">
      <summary>Copies the active expression.
</summary>
      <returns>true if the copy is successful; otherwise, false.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.Cut">
      <summary>Cuts the active expression.
</summary>
      <returns>true if the cut is successful; otherwise, false.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.Focus">
      <summary>Sets focus on the editor.</summary>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.GetCommittedText">
      <returns>Returns 
<see cref="T:System.String" />
.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.GlobalIntellisense">
      <returns>Returns 
<see cref="T:System.Boolean" />
.
</returns>
    </member>
    <member name="E:System.Activities.Design.View.IExpressionEditorInstance.GotAggregateFocus"></member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.HasAggregateFocus">
      <summary>Gets a value that indicates whether the editor has aggregate focus.</summary>
      <returns>true if the editor has aggregate focus; otherwise, false.</returns>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.HorizontalScrollBarVisibility">
      <summary>Gets or sets a value that indicates whether the horizontal scrollbar is visible.</summary>
      <returns>Returns <see cref="T:System.Windows.Controls.ScrollBarVisibility" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.HostControl">
      <summary>Gets a <see cref="T:System.Windows.Controls.Control" /> instance that can be used to display in the ExpressionTextBox.</summary>
      <returns>Returns <see cref="T:System.Windows.Controls.Control" />.</returns>
    </member>
    <member name="E:System.Activities.Design.View.IExpressionEditorInstance.LostAggregateFocus">
      <summary>Represents an event that is raised when the expression editor loses aggregate focus.</summary>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.MaxHeight"></member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.MaxLines">
      <returns>Returns 
<see cref="T:System.Int32" />
.
</returns>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.MinHeight"></member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.MinLines">
      <returns>Returns 
<see cref="T:System.Int32" />
.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.ParameterInfo">
      <returns>Returns 
<see cref="T:System.Boolean" />
.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.Paste">
      <summary>Pastes the active expression.
</summary>
      <returns>true if the paste is successful; otherwise, false.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.QuickInfo">
      <returns>Returns 
<see cref="T:System.Boolean" />
.
</returns>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.Redo">
      <summary>Reapplies the last operation that was undone in the editor, i.e., reverse the effects of the undo operation. 
</summary>
      <returns>true if the redo is successful; otherwise, false.
</returns>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.Text">
      <summary>Gets or sets the value of the text.</summary>
      <returns>Returns <see cref="T:System.String" />.</returns>
    </member>
    <member name="E:System.Activities.Design.View.IExpressionEditorInstance.TextChanged">
      <summary>Represents an event that is raised when the text in an expression editor is changed.</summary>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorInstance.Undo">
      <summary>Undoes the last operation in the editor.
</summary>
      <returns>true if the undo is successful; otherwise, false.
</returns>
    </member>
    <member name="P:System.Activities.Design.View.IExpressionEditorInstance.VerticalScrollBarVisibility">
      <summary>Gets or sets a value that indicates whether the vertical scrollbar is visible.</summary>
      <returns>Returns <see cref="T:System.Windows.Controls.ScrollBarVisibility" />.</returns>
    </member>
    <member name="T:System.Activities.Design.View.IExpressionEditorService">
      <summary>Creates or closes expression editors. </summary>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorService.CloseExpressionEditors">
      <summary>Closes all the active expression editors.</summary>
    </member>
    <member name="M:System.Activities.Design.View.IExpressionEditorService.CreateExpressionEditor(System.Activities.Design.View.AssemblyContextControlItem,System.Activities.Design.View.ImportedNamespaceContextItem,System.Collections.Generic.List{System.Activities.Design.Model.ModelItem},System.String)"></member>
    <member name="M:System.Activities.Design.View.IExpressionEditorService.UpdateContext(System.Activities.Design.View.AssemblyContextControlItem,System.Activities.Design.View.ImportedNamespaceContextItem)"></member>
    <member name="T:System.Activities.Design.View.ImportedNamespaceContextItem"></member>
    <member name="M:System.Activities.Design.View.ImportedNamespaceContextItem.#ctor"></member>
    <member name="M:System.Activities.Design.View.ImportedNamespaceContextItem.EnsureInitialized(System.Activities.Design.EditingContext)"></member>
    <member name="P:System.Activities.Design.View.ImportedNamespaceContextItem.ImportedNamespaces">
      <returns>Returns 
<see cref="T:System.Collections.ObjectModel.Collection`1" />
.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ImportedNamespaceContextItem.ItemType">
      <returns>Returns 
<see cref="T:System.Type" />
.</returns>
    </member>
    <member name="T:System.Activities.Design.View.ModelPropertyEntryToModelItemConverter">
      <summary>Used to convert UI property data into <see cref="T:System.Activities.Design.Model.ModelItem" /> and <see cref="T:System.Activities.Design.EditingContext" /> objects that describe the UI property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToModelItemConverter.#ctor">
      <summary>Creates a new <see cref="T:System.Activities.Design.View.ModelPropertyEntryToModelItemConverter" />.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToModelItemConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a <see cref="T:System.Web.UI.PropertyEntry" /> derived object to a <see cref="T:System.Activities.Design.Model.ModelItem" /></summary>
      <returns>Returns an 
<see cref="T:System.Object" /> that contains the <see cref="T:System.Activities.Design.Model.ModelItem" />, <see cref="T:System.Activities.Design.EditingContext" />, and value of the UI property.</returns>
      <param name="value">The <see cref="T:System.Web.UI.PropertyEntry" /> derived object to convert.</param>
      <param name="targetType">Not used.</param>
      <param name="parameter">Not used.</param>
      <param name="culture">Not used.</param>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToModelItemConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a <see cref="T:System.Web.UI.PropertyEntry" /> derived object to a <see cref="T:System.Activities.Design.Model.ModelItem" /></summary>
      <returns>Returns an 
<see cref="T:System.Object" /> that contains the <see cref="T:System.Activities.Design.Model.ModelItem" />, <see cref="T:System.Activities.Design.EditingContext" />, and value of the UI property.</returns>
      <param name="values">An array of <see cref="T:System.Web.UI.PropertyEntry" /> derived objects to convert.</param>
      <param name="targetType">Not used.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">Not used.</param>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToModelItemConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Not supported in this release.</summary>
      <returns>Returns an 
<see cref="T:System.Object" />.</returns>
      <param name="value">Not used.</param>
      <param name="targetType">Not used.</param>
      <param name="parameter">Not used.</param>
      <param name="culture">Not used.</param>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToModelItemConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>Not supported in this release.</summary>
      <returns>Returns an 
<see cref="T:System.Object" />.</returns>
      <param name="value">Not used.</param>
      <param name="targetTypes">Not used.</param>
      <param name="parameter">Not used.</param>
      <param name="culture">Not used.</param>
    </member>
    <member name="T:System.Activities.Design.View.ModelPropertyEntryToOwnerActivityConverter">
      <summary>Converts a ModelPropertyEntry to a ModelItem that owns the property.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToOwnerActivityConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.ModelPropertyEntryToOwnerActivityConverter" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToOwnerActivityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Converts a ModelPropertyEntry to a ModelItem that owns the property.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use. You can pass a Boolean value in. By default, this converter will always return the parent model item that is of type WorkflowElement.  If false is passed to this method, the converter will simply return the first parent model item, which may not be a model item that points to a WorkflowElement.
</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="M:System.Activities.Design.View.ModelPropertyEntryToOwnerActivityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>Calling this method is not supported.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
    </member>
    <member name="T:System.Activities.Design.View.PrimarySelectionAdorner">
      <summary>Represents the primary adorner that decorates a UI element.</summary>
    </member>
    <member name="M:System.Activities.Design.View.PrimarySelectionAdorner.#ctor(System.Windows.UIElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Activities.Design.View.PrimarySelectionAdorner" /> class, which is always rendered on top of the specified adorned element.</summary>
      <param name="adornedElement">The element being adorned by the newly constructed <see cref="T:System.Activities.Design.View.PrimarySelectionAdorner" /> instance.</param>
    </member>
    <member name="T:System.Activities.Design.View.PropertyKind">
      <summary>An enumeration that describes the type of argument being passed.</summary>
    </member>
    <member name="F:System.Activities.Design.View.PropertyKind.InArgument">
      <summary>The argument is an input-only parameter, meaning that it can only be used to pass a value to a method.
.</summary>
    </member>
    <member name="F:System.Activities.Design.View.PropertyKind.InOutArgument">
      <summary>The argument is an input/output parameter, meaning that it can be used for passing a value to a method, and get back a value from a method.</summary>
    </member>
    <member name="F:System.Activities.Design.View.PropertyKind.OutArgument">
      <summary>The argument is an output-only parameter, meaning that it can only be used to pass a value back from a method.</summary>
    </member>
    <member name="F:System.Activities.Design.View.PropertyKind.Property">
      <summary>The argument is a property.</summary>
    </member>
    <member name="T:System.Activities.Design.View.ShellBarItemVisibility"></member>
    <member name="F:System.Activities.Design.View.ShellBarItemVisibility.None">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.ShellBarItemVisibility.Variables">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.ShellBarItemVisibility.Arguments">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.ShellBarItemVisibility.Imports">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.ShellBarItemVisibility.Zoom">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.ShellBarItemVisibility.MiniMap">
      <summary />
    </member>
    <member name="F:System.Activities.Design.View.ShellBarItemVisibility.All">
      <summary />
    </member>
    <member name="T:System.Activities.Design.View.TypePresenter">
      <summary>Handles the display of a collection of types in a component that is part of a user interface.</summary>
    </member>
    <member name="M:System.Activities.Design.View.TypePresenter.#ctor">
      <summary>Creates a new instance of a <see cref="T:System.Activities.Design.View.TypePresenter" /> that initializes a collection of wrapper objects that each represent a primitive type.</summary>
    </member>
    <member name="P:System.Activities.Design.View.TypePresenter.AllowNull">
      <summary>Gets or sets a value that indicates whether or not a property can be null.</summary>
      <returns>true if the property can be null; otherwise, false.
</returns>
    </member>
    <member name="F:System.Activities.Design.View.TypePresenter.AllowNullProperty">
      <summary>Dependency property identifier field that indicates whether properties associated with this type presenter can be null.</summary>
    </member>
    <member name="P:System.Activities.Design.View.TypePresenter.BrowseTypeDirectly">
      <returns>Returns 
<see cref="T:System.Boolean" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.View.TypePresenter.BrowseTypeDirectlyProperty"></member>
    <member name="P:System.Activities.Design.View.TypePresenter.CenterActivityTypeResolverDialog"></member>
    <member name="F:System.Activities.Design.View.TypePresenter.CenterActivityTypeResolverDialogProperty"></member>
    <member name="P:System.Activities.Design.View.TypePresenter.Context">
      <summary>Gets or sets the value of an editing context property.</summary>
      <returns>An editing context item.</returns>
    </member>
    <member name="F:System.Activities.Design.View.TypePresenter.ContextProperty">
      <summary>Dependency property identifier field that contains a property of the editing context, for instance a list of currently selected objects or a list of services running in the designer.</summary>
    </member>
    <member name="P:System.Activities.Design.View.TypePresenter.Filter">
      <returns>Returns 
<see cref="T:System.Func`2" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.View.TypePresenter.FilterProperty"></member>
    <member name="M:System.Activities.Design.View.TypePresenter.InitializeComponent">
      <summary>Initializes a combo box. The contents of this method are generated by the designer.</summary>
    </member>
    <member name="P:System.Activities.Design.View.TypePresenter.Items">
      <summary>Gets an enumeration of wrapper types that are in the current type presenter.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="P:System.Activities.Design.View.TypePresenter.Label">
      <returns>Returns 
<see cref="T:System.String" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.View.TypePresenter.LabelProperty"></member>
    <member name="P:System.Activities.Design.View.TypePresenter.MostRecentlyUsedTypes"></member>
    <member name="F:System.Activities.Design.View.TypePresenter.MostRecentlyUsedTypesProperty"></member>
    <member name="P:System.Activities.Design.View.TypePresenter.NullTypeWrapper">
      <returns>Returns 
<see cref="T:System.Activities.Design.View.TypeWrapper" />
.
</returns>
    </member>
    <member name="E:System.Activities.Design.View.TypePresenter.PropertyChanged">
      <summary>Declaration of the event that gets raised when a property on the specified user interface control has been changed.</summary>
    </member>
    <member name="M:System.Activities.Design.View.TypePresenter.System#Windows#Markup#IComponentConnector#Connect(System.Int32,System.Object)">
      <summary>Obsolete. Not implemented.</summary>
      <param name="connectionId"></param>
      <param name="target"></param>
    </member>
    <member name="P:System.Activities.Design.View.TypePresenter.Text">
      <returns>Returns 
<see cref="T:System.String" />
.
</returns>
    </member>
    <member name="F:System.Activities.Design.View.TypePresenter.TextProperty"></member>
    <member name="P:System.Activities.Design.View.TypePresenter.Type">
      <summary>Gets or sets the type of the current <see cref="T:System.Activities.Design.View.TypePresenter" />.</summary>
      <returns>A type object.</returns>
    </member>
    <member name="E:System.Activities.Design.View.TypePresenter.TypeBrowserClosed"></member>
    <member name="F:System.Activities.Design.View.TypePresenter.TypeBrowserClosedEvent"></member>
    <member name="E:System.Activities.Design.View.TypePresenter.TypeBrowserOpened"></member>
    <member name="F:System.Activities.Design.View.TypePresenter.TypeBrowserOpenedEvent"></member>
    <member name="E:System.Activities.Design.View.TypePresenter.TypeChanged"></member>
    <member name="F:System.Activities.Design.View.TypePresenter.TypeChangedEvent"></member>
    <member name="P:System.Activities.Design.View.TypePresenter.TypeName">
      <summary>Gets the name for a type displayed in a component.</summary>
      <returns>A string that represents the display name of a type.</returns>
    </member>
    <member name="F:System.Activities.Design.View.TypePresenter.TypeProperty">
      <summary>Dependency property identifier field that indicates the current type represented by the <see cref="T:System.Activities.Design.View.TypePresenter" />.</summary>
    </member>
    <member name="T:System.Activities.Design.View.TypeResolvingOptions"></member>
    <member name="M:System.Activities.Design.View.TypeResolvingOptions.#ctor"></member>
    <member name="P:System.Activities.Design.View.TypeResolvingOptions.BrowseTypeDirectly">
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
    </member>
    <member name="P:System.Activities.Design.View.TypeResolvingOptions.Filter">
      <returns>Returns 
<see cref="T:System.Func`2" />
.</returns>
    </member>
    <member name="T:System.Activities.Design.View.TypeWrapper">
      <summary>Provides the functionality to wrap a specified object to make it function as an object of a different type. This is a sealed class.</summary>
    </member>
    <member name="P:System.Activities.Design.View.TypeWrapper.DisplayName">
      <summary>Gets the display name for the current wrapper type.</summary>
      <returns>A string that contains the display name.</returns>
    </member>
    <member name="M:System.Activities.Design.View.TypeWrapper.Equals(System.Object)">
      <summary>Determines whether a typewrapper of the specified type is equal to the type of the current typewrapper.</summary>
      <returns>true if a typewrapper of the specified type is equal to the type of the current typewrapper; otherwise, false.
</returns>
      <param name="obj">An object representing a typewrapper.</param>
    </member>
    <member name="M:System.Activities.Design.View.TypeWrapper.GetHashCode">
      <summary>Returns a hash code for the current type.</summary>
      <returns>An integer representing a hash code.</returns>
    </member>
    <member name="P:System.Activities.Design.View.TypeWrapper.IsTypeDefinition">
      <summary>Gets an indication whether the display name defines a type.</summary>
      <returns>true if the display name defines a type; otherwise, false. 
</returns>
    </member>
    <member name="P:System.Activities.Design.View.TypeWrapper.Tag">
      <summary>Gets data about the wrapper type.</summary>
      <returns>An object that contains data about the control.</returns>
    </member>
    <member name="M:System.Activities.Design.View.TypeWrapper.ToString">
      <summary>Returns the contents of a tag that contains a label for the current wrapper type.</summary>
      <returns>A string version of the tag value.</returns>
    </member>
    <member name="P:System.Activities.Design.View.TypeWrapper.Type">
      <summary>Gets the type of the current wrapper.</summary>
      <returns>An object that represents the type of the current wrapper.
</returns>
    </member>
    <member name="T:System.Activities.Design.View.ViewStateChangedEventArgs">
      <summary>Provides an object formatted to serve as an event argument containing the information about the changed view state.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ViewStateChangedEventArgs.#ctor(System.Activities.Design.Model.ModelItem,System.String,System.Object,System.Object)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.View.ViewStateChangedEventArgs" /> class with a specified parent model item and its key/value pair with the old and the new values.</summary>
      <param name="modelItem">An item in the activity designer model that serves as a parent element in the XML view of the model.</param>
      <param name="key">The name of an attribute in the specified parent element. </param>
      <param name="newValue">The new value for the specified attribute key.</param>
      <param name="oldValue">The old value of the specified attribute key. </param>
    </member>
    <member name="P:System.Activities.Design.View.ViewStateChangedEventArgs.Key">
      <summary>Gets an attribute key name in a specified view element.</summary>
      <returns>A string that represents the name of a key in a view element.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ViewStateChangedEventArgs.NewValue">
      <summary>Gets the new value for the key in the current attribute key/value pair.</summary>
      <returns>An object that contains a key value.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ViewStateChangedEventArgs.OldValue">
      <summary>Gets the old value of the key in the current attribute key/value pair.</summary>
      <returns>An object that contains a key value.</returns>
    </member>
    <member name="P:System.Activities.Design.View.ViewStateChangedEventArgs.ParentModelItem">
      <summary>Gets an item in the activity designer model that serves as a parent item in the XAML view of the model.</summary>
      <returns>A parent element in an activity designer model.</returns>
    </member>
    <member name="T:System.Activities.Design.View.ViewStateChangedEventHandler">
      <summary>Declares a delegate type that handles changes to the view state.</summary>
    </member>
    <member name="T:System.Activities.Design.View.ViewStateService">
      <summary>When implemented in a derived class, generates a text property that stores and retrieves its value from an associated control’s view state.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ViewStateService.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.View.ViewStateService" /> class.</summary>
    </member>
    <member name="M:System.Activities.Design.View.ViewStateService.RemoveViewState(System.Activities.Design.Model.ModelItem,System.String)">
      <summary>When implemented in a derived class, removes the view state represented by the specified key and associated with the specified model item.</summary>
      <returns>true if the view state was removed; otherwise, false.</returns>
      <param name="modelItem">The workflow activity <see cref="T:System.Activities.Design.Model.ModelItem" /> associated with the current view state.</param>
      <param name="key">The <see cref="T:System.String" /> that identifies the view state item that is stored.</param>
    </member>
    <member name="M:System.Activities.Design.View.ViewStateService.RetrieveAllViewState(System.Activities.Design.Model.ModelItem)">
      <summary>When implemented in a derived class, returns the complete view state of the control associated with the specified model item.</summary>
      <returns>A key/value pair list of view state items.</returns>
      <param name="modelItem">A workflow activity model item.
</param>
    </member>
    <member name="M:System.Activities.Design.View.ViewStateService.RetrieveViewState(System.Activities.Design.Model.ModelItem,System.String)">
      <summary>When implemented in a derived class, returns the item that matches the specified key in the view state associated with the specified model item.</summary>
      <returns>An object version of the view state item to be retrieved; otherwise, null.</returns>
      <param name="modelItem">The workflow activity whose specified view state item is being retrieved.</param>
      <param name="key">The <see cref="T:System.String" /> that identifies the view state item that is retrieved.</param>
    </member>
    <member name="M:System.Activities.Design.View.ViewStateService.StoreViewState(System.Activities.Design.Model.ModelItem,System.String,System.Object)">
      <summary>When implemented in a derived class, stores the item represented by the specified key in the view state associated with the specified model item.</summary>
      <param name="modelItem">The workflow activity <see cref="T:System.Activities.Design.Model.ModelItem" /> associated with the current view state.</param>
      <param name="key">The <see cref="T:System.String" /> that identifies the view state item that is stored.</param>
      <param name="value">An <see cref="T:System.Object" /> to be stored.</param>
    </member>
    <member name="M:System.Activities.Design.View.ViewStateService.StoreViewStateWithUndo(System.Activities.Design.Model.ModelItem,System.String,System.Object)">
      <summary>When implemented in a derived class, records the current setting of the item represented by the specified key so that it is available for an undo operation. Then the item represented by the specified key is stored in the view state of the specified model item.</summary>
      <param name="modelItem">The workflow activity <see cref="T:System.Activities.Design.Model.ModelItem" /> associated with the current view state.</param>
      <param name="key">The <see cref="T:System.String" /> that identifies the view state item that is stored.</param>
      <param name="value">An <see cref="T:System.Object" /> to be stored.</param>
    </member>
    <member name="E:System.Activities.Design.View.ViewStateService.UndoableViewStateChanged">
      <summary>When implemented in a derived class, declares an event that signals that a change has been made to the control’s undoable view state.</summary>
    </member>
    <member name="E:System.Activities.Design.View.ViewStateService.ViewStateChanged">
      <summary>When implemented in a derived class, declares an event that signals that a change has been made to the control’s view state.</summary>
    </member>
    <member name="T:System.Activities.Design.View.VirtualizedContainerService"></member>
    <member name="M:System.Activities.Design.View.VirtualizedContainerService.#ctor(System.Activities.Design.EditingContext)">
      <param name="context"></param>
    </member>
    <member name="M:System.Activities.Design.View.VirtualizedContainerService.GetContainer(System.Activities.Design.Model.ModelItem,System.Activities.Design.ISourceContainer)">
      <returns>Returns 
<see cref="T:System.Windows.UIElement" />
.</returns>
      <param name="modelItem"></param>
      <param name="sourceContainer"></param>
    </member>
    <member name="M:System.Activities.Design.View.VirtualizedContainerService.GetHintSize(System.Object)">
      <returns>Returns 
<see cref="T:System.Object" />
.</returns>
      <param name="instance"></param>
    </member>
    <member name="F:System.Activities.Design.View.VirtualizedContainerService.HintSizeName"></member>
    <member name="M:System.Activities.Design.View.VirtualizedContainerService.SetHintSize(System.Object,System.Object)">
      <param name="instance"></param>
      <param name="value"></param>
    </member>
    <member name="T:System.Activities.Design.View.WorkflowViewService">
      <summary>Handles the mapping of activity designer visual elements and their underlying model items.</summary>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewService.#ctor(System.Activities.Design.EditingContext)">
      <summary>Creates a new instance of the <see cref="T:System.Activities.Design.View.WorkflowViewService" /> class that uses the specified <see cref="T:System.Activities.Design.EditingContext" />.</summary>
      <param name="context">The editing tool that is used to manipulate objects on the design surface.</param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewService.CreateViewElement(System.Activities.Design.Model.ModelItem)">
      <summary>Creates a new <see cref="T:System.Activities.Design.WorkflowViewElement" /> that supports the type of the specified <see cref="T:System.Activities.Design.Model.ModelItem" />.</summary>
      <returns>A workflow view element that supports the same type as the model item argument.</returns>
      <param name="modelItem">One entity in the editing model of an activity designer.</param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewService.GetModel(System.Windows.DependencyObject)">
      <summary>Returns a <see cref="T:System.Activities.Design.Model.ModelItem" /> that maps to the specified <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>A model item that maps to a dependency object.</returns>
      <param name="view">A workflow view element that contains the model item.</param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewService.GetView(System.Activities.Design.Model.ModelItem)">
      <summary>Creates a new <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> that maps to the specified <see cref="T:System.Activities.Design.Model.ModelItem" />.</summary>
      <returns>A dependency object that maps to a model item.</returns>
      <param name="model">One entity in the editing model of an activity designer.</param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewService.GetViewElement(System.Activities.Design.Model.ModelItem)">
      <summary>Creates a new <see cref="T:System.Activities.Design.WorkflowViewElement" /> that maps to the specified <see cref="T:System.Activities.Design.Model.ModelItem" />.</summary>
      <returns>A new view element that maps to a specified model item.</returns>
      <param name="modelItem">One entity in the editing model of an activity designer.</param>
    </member>
    <member name="T:System.Activities.Design.View.WorkflowViewStateService"></member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.#ctor(System.Activities.Design.EditingContext)">
      <param name="context"></param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.GetViewState(System.Object)">
      <returns>Returns 
<see cref="T:System.Collections.Generic.Dictionary`2" />
.</returns>
      <param name="instance"></param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.RemoveViewState(System.Activities.Design.Model.ModelItem,System.String)">
      <returns>Returns 
<see cref="T:System.Boolean" />
.</returns>
      <param name="modelItem"></param>
      <param name="key"></param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.RetrieveAllViewState(System.Activities.Design.Model.ModelItem)">
      <returns>Returns 
<see cref="T:System.Collections.Generic.Dictionary`2" />
.</returns>
      <param name="modelItem"></param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.RetrieveViewState(System.Activities.Design.Model.ModelItem,System.String)">
      <returns>Returns 
<see cref="T:System.Object" />
.</returns>
      <param name="modelItem"></param>
      <param name="key"></param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.SetViewState(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <param name="instance"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.StoreViewState(System.Activities.Design.Model.ModelItem,System.String,System.Object)">
      <param name="modelItem"></param>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="M:System.Activities.Design.View.WorkflowViewStateService.StoreViewStateWithUndo(System.Activities.Design.Model.ModelItem,System.String,System.Object)">
      <param name="modelItem"></param>
      <param name="key"></param>
      <param name="value"></param>
    </member>
    <member name="E:System.Activities.Design.View.WorkflowViewStateService.UndoableViewStateChanged"></member>
    <member name="E:System.Activities.Design.View.WorkflowViewStateService.ViewStateChanged"></member>
    <member name="F:System.Activities.Design.View.WorkflowViewStateService.ViewStateName"></member>
    <member name="T:System.WorkflowModel.Design.ModelTree.MorphHelper"></member>
    <member name="M:System.WorkflowModel.Design.ModelTree.MorphHelper.AddPropertyValueMorphHelper(System.Type,System.WorkflowModel.Design.ModelTree.PropertyValueMorphHelper)"></member>
    <member name="M:System.WorkflowModel.Design.ModelTree.MorphHelper.GetPropertyValueMorphHelper(System.Type)"></member>
    <member name="M:System.WorkflowModel.Design.ModelTree.MorphHelper.MorphObject(System.Activities.Design.Model.ModelItem,System.Activities.Design.Model.ModelItem)"></member>
    <member name="M:System.WorkflowModel.Design.ModelTree.MorphHelper.MorphProperties(System.Activities.Design.Model.ModelItem,System.Activities.Design.Model.ModelItem)"></member>
    <member name="T:System.WorkflowModel.Design.ModelTree.PropertyValueMorphHelper"></member>
    <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
      <summary>A class generated by the workflow designer used to generate CLR types for XAML documents.</summary>
    </member>
    <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.#ctor">
      <summary>Creates a new instance of the <see cref="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper" /> class.</summary>
    </member>
  </members>
</doc>