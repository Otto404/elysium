<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Linq</name>
  </assembly>
  <members>
    <member name="T:System.Data.Linq.Binary">
      <summary>Представляет неизменяемый блок двоичных данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Binary.#ctor(System.Byte[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Binary" />.</summary>
      <param name="value">Байт, представляющий двоичные данные.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)">
      <summary>Определяет, равны ли два двоичных объекта.</summary>
      <returns>true if the two binary objects are equal; otherwise, false.</returns>
      <param name="other">Объект <see cref="T:System.Object" />, с которым сравнивается текущий объект.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <returns>true if the two binary objects are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.GetHashCode">
      <summary>Играет роль хэш-функции для определенного типа.</summary>
      <returns>Хэш-код для текущего двоичного объекта.</returns>
    </member>
    <member name="P:System.Data.Linq.Binary.Length">
      <summary>Возвращает длину двоичного объекта.</summary>
      <returns>Целое число, представляющее длину.</returns>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
      <summary>Описывает равенство между двумя двоичными объектами.</summary>
      <returns>true, если двоичные объекты равны; в противном случае - false.</returns>
      <param name="binary1">Первый двоичный объект.</param>
      <param name="binary2">Второй двоичный объект.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Implicit(System.Byte[])~System.Data.Linq.Binary">
      <summary>Дает возможность явно привести массивы байтов к типу <see cref="T:System.Data.Linq.Binary" /> в языке программирования.</summary>
      <returns>Класс <see cref="T:System.Data.Linq.Binary" />, содержащий приведенное значение.</returns>
      <param name="value">Массив байтов для преобразования в экземпляр типа <see cref="T:System.Data.Linq.Binary" />.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
      <summary>Описывает неравенство между двумя двоичными объектами.</summary>
      <returns>true, если двоичные объекты не равны; в противном случае — false.</returns>
      <param name="binary1">Первый двоичный объект.</param>
      <param name="binary2">Второй двоичный объект.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.ToArray">
      <summary>Возвращает массив байтов, который представляет текущий двоичный объект.</summary>
      <returns>Массив байтов, содержащий значения текущего двоичного объекта.</returns>
    </member>
    <member name="M:System.Data.Linq.Binary.ToString">
      <summary>Возвращает строку <see cref="T:System.String" />, представляющую текущий двоичный объект.</summary>
      <returns>Строка <see cref="T:System.String" />, представляющая текущий двоичный объект.</returns>
    </member>
    <member name="T:System.Data.Linq.ChangeAction">
      <summary>Описывает тип изменения, которому подвергнется объект, когда изменения будут отправлены в базу данных.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.None">
      <summary>Сущность не будет отправлена.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Delete">
      <summary>Сущность будет удалена.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Insert">
      <summary>Сущность будет вставлена.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Update">
      <summary>Сущность будет обновлена.</summary>
    </member>
    <member name="T:System.Data.Linq.ChangeConflictCollection">
      <summary>Возвращает коллекцию объектов, участвующих в конфликтах параллелизма.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Clear">
      <summary>Удаляет из коллекции все конфликты.</summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Contains(System.Data.Linq.ObjectChangeConflict)">
      <summary>Указывает, является ли указанный конфликт элементом коллекции.</summary>
      <returns>Возвращает значение TRUE, если указанный конфликт является элементом коллекции.</returns>
      <param name="item">Указанный конфликт.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">Массив, в который выполняется копирование.</param>
      <param name="arrayIndex">Индекс массива, где должно начаться копирование.</param>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.Count">
      <summary>Возвращает число конфликтов в коллекции</summary>
      <returns>integer</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.GetEnumerator">
      <summary>Возвращает перечислитель коллекции.</summary>
      <returns>Перечислитель коллекции.</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.Item(System.Int32)">
      <summary>Возвращает элемент в конфликте.</summary>
      <returns>Значение с типом <see cref="T:System.Data.Linq.ObjectChangeConflict" />, представляющее элемент в конфликте.</returns>
      <param name="index">Индекс в коллекции элемента в конфликте.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Remove(System.Data.Linq.ObjectChangeConflict)">
      <summary>Указывает, удален ли указанный конфликт из коллекции.</summary>
      <returns>Возвращает значение TRUE, если объект <see cref="T:System.Data.Linq.ObjectChangeConflict" /> удален из коллекции.</returns>
      <param name="item">Конфликт для удаления.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode)">
      <summary>Разрешает все конфликты в коллекции, используя указанную стратегию.</summary>
      <param name="mode">Один из параметров, доступных в <see cref="T:System.Data.Linq.RefreshMode" />.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)">
      <summary>Разрешает все конфликты в коллекции, используя указанную стратегию.</summary>
      <param name="mode">Стратегия, используемая для разрешения конфликта.</param>
      <param name="autoResolveDeletes">Если значение равно TRUE, автоматически разрешает конфликты, которые являются результатом измененного объекта, который больше не находится в базе данных.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{T}#Add(System.Data.Linq.ObjectChangeConflict)">
      <summary>Описание этого члена см. в описании метода <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />.</summary>
      <param name="item">Добавляемый элемент.</param>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Описание этого члена см. в описании <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>Возвращает значение true, если коллекция доступна только для чтения.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует коллекцию в массив.</summary>
      <param name="array">Имя массива.</param>
      <param name="index">Индекс массива.</param>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Описание этого члена см. в описании <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Возвращает значение true, если доступ к коллекции синхронизирован (потокобезопасный доступ).</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot">
      <summary>Описание этого члена см. в описании <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Возвращает объект, который можно использовать для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Описание этого члена см. в описании <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>Перечислитель, который осуществляет перебор элементов коллекции.</returns>
    </member>
    <member name="T:System.Data.Linq.ChangeConflictException">
      <summary>Создается при сбое обновления, так как значения базы данных были обновлены с момента, когда клиент считывал их в последний раз.</summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ChangeConflictException" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor(System.String)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Data.Linq.ChangeConflictException" /> и указывает сообщение для объяснения исключения.</summary>
      <param name="message">Сообщение, отображаемое при возникновении исключения.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.ChangeConflictException" />, указывает сообщения для объяснения исключения и указывает исключение, послужившее причиной этого исключения.</summary>
      <param name="message">Сообщение, отображаемое при возникновении исключения.</param>
      <param name="innerException">Указывает исключение, результатом которого является <see cref="T:System.Data.Linq.ChangeConflictException" />.</param>
    </member>
    <member name="T:System.Data.Linq.ChangeSet">
      <summary>Предоставляет контейнер для изменений.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Deletes">
      <summary>Возвращает список сущностей, которые были удалены из <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>Список <see cref="T:System.Collections.IList" /> удаленных сущностей.</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Inserts">
      <summary>Возвращает список сущностей, которые были вставлены в <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>Список <see cref="T:System.Collections.IList" /> вставленных сущностей.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeSet.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>A string that represents the current <see cref="T:System.Data.Linq.ChangeSet" />.</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Updates">
      <summary>Возвращает список сущностей, которые были обновлены в <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>Список <see cref="T:System.Collections.IList" /> обновленных сущностей.</returns>
    </member>
    <member name="T:System.Data.Linq.CompiledQuery">
      <summary>Обеспечивает компиляцию и кэширование запросов для повторного использования.</summary>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg14">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос. </returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg14">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg15">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>Компилирует запрос.</summary>
      <returns>Универсальный делегат, представляющий скомпилированный запрос.</returns>
      <param name="query">Выражение запроса для компиляции.</param>
      <typeparam name="TArg0">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который должен быть передан делегату, возвращенному методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
      <typeparam name="TResult">Тип T в <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемом при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="P:System.Data.Linq.CompiledQuery.Expression">
      <summary>Возвращает запрос как лямбда-выражение.</summary>
      <returns>Лямбда-выражение, которое предоставляет запрос.</returns>
    </member>
    <member name="T:System.Data.Linq.ConflictMode">
      <summary>Указывает, когда должны создаваться отчеты о конфликтах параллелизма.</summary>
    </member>
    <member name="F:System.Data.Linq.ConflictMode.FailOnFirstConflict">
      <summary>Указывает, что попытки обновления базы данных должны быть немедленно прекращены, когда будет выявлена первая ошибка конфликта параллелизма.</summary>
    </member>
    <member name="F:System.Data.Linq.ConflictMode.ContinueOnConflict">
      <summary>Указывает, что следует испытать все обновления базы данных и что конфликты параллелизма должны быть собраны и возвращены в конце процесса.</summary>
    </member>
    <member name="T:System.Data.Linq.DataContext">
      <summary>Представляет главную пиксель входа для структуры LINQ to SQL. </summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DataContext" />, ссылаясь на подключение, используемое .NET Framework.</summary>
      <param name="connection">Подключение, используемое .NET Framework.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DataContext" />, ссылаясь на подключение и источник сопоставления.</summary>
      <param name="connection">Подключение, используемое платформой .NET Framework.</param>
      <param name="mapping">Словарь <see cref="T:System.Data.Linq.Mapping.MappingSource" />.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DataContext" />, ссылаясь на источник файла.</summary>
      <param name="fileOrServerOrConnection">Этот аргумент может принимать любое из следующих значений:Имя файла, где находится база данных SQL Server Express.Имя сервера, где находится база данных.В этом случае поставщик использует для пользователя базу данных по умолчанию.Полная строка подключения.LINQ to SQL просто передает строку поставщику без изменений.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DataContext" />, ссылаясь на источник файлов и источник сопоставления.</summary>
      <param name="fileOrServerOrConnection">Этот аргумент может принимать любое из следующих значений:Имя файла, где находится база данных SQL Server Express.Имя сервера, где находится база данных.В этом случае поставщик использует для пользователя базу данных по умолчанию.Полная строка подключения.LINQ to SQL просто передает строку поставщику без изменений.</param>
      <param name="mapping">Словарь <see cref="T:System.Data.Linq.Mapping.MappingSource" />.</param>
    </member>
    <member name="P:System.Data.Linq.DataContext.ChangeConflicts">
      <summary>Возвращает коллекцию объектов, ставшую причиной конфликта параллелизма, когда был вызван <see cref="M:System.Data.Linq.DataContext.SubmitChanges" />.</summary>
      <returns>Коллекция объектов.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.DataContext.CommandTimeout">
      <summary>Увеличивает время ожидания для запросов, для которых в противном случае истекло время ожидание в течение времени ожидания по умолчанию.</summary>
      <returns>Значение целого числа в секундах.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Connection">
      <summary>Возвращает подключение, используемое структурой. </summary>
      <returns>Подключение.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.CreateDatabase">
      <summary>Создает базу данных для сервера.</summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
      <summary>Выполняет табличную функцию базы данных, связанную с указанным методом CLR. </summary>
      <returns>Коллекция результирующих значений, возвращаемых запросом базы данных.</returns>
      <param name="instance"> Экземпляр вызова метода (текущий объект).</param>
      <param name="methodInfo">Определяет метод CLR, соответствующий методу базы данных.</param>
      <param name="parameters">Массив параметров для передачи команде.</param>
      <typeparam name="TResult">Тип элементов в возвращаемой коллекции.</typeparam>
    </member>
    <member name="M:System.Data.Linq.DataContext.DatabaseExists">
      <summary>Определяет, может ли быть открыта связанная база данных. </summary>
      <returns>true, если заданная база данных может быть открыта; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
      <summary>Указывает, следует ли загрузить с задержкой связи "один ко многим" или "один к одному". </summary>
      <returns>true, если отложенная загрузка разрешена; в противном случае — false. </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.DeleteDatabase">
      <summary>Удаляет связанную базу данных. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Dispose">
      <summary>Освобождает все ресурсы, используемые объектом <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Dispose(System.Boolean)">
      <summary>Освобождает ресурсы, используемые объектом <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые); значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
      <summary>Выполняет команды SQL напрямую для базы данных.</summary>
      <returns>int, представляющее количество строк, измененных выполненной командой.</returns>
      <param name="command">Команда SQL для выполнения.</param>
      <param name="parameters">Массив параметров для передачи команде.Следует отметить следующее поведение:Если количество объектов в массиве меньше, чем наибольшее число команд, определенных в командной строке, создается исключение.Если массив содержит объекты, на которые нет ссылок в командной строке, исключение не создается.Если значение одного из параметров равно NULL, оно преобразовывается в значение DBNull.Value.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)">
      <summary>Вызванные внутренние переопределенные методы удаления для повторного делегирования в LINQ to SQL задачи создания и выполнения динамического SQL для операций удаления.</summary>
      <param name="entity">Сущность, которая будет удалена.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
      <summary>Вызванные внутренние переопределенные методы вставки для повторного делегирования в LINQ to SQL задачи создания и выполнения динамического SQL для операций вставки.</summary>
      <param name="entity">Сущность, которая будет вставлена.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)">
      <summary>Вызванные внутренние переопределенные методы обновления для повторного делегирования в LINQ to SQL задачи создания и выполнения динамического SQL для операций обновления.</summary>
      <param name="entity">Сущность, которая будет обновлена.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])">
      <summary>Выполняет хранимую процедуру базы данных или скалярную функцию, связанную с указанным методом CLR.</summary>
      <returns>Результат (возвращаемое значение и выходные параметры) выполнения указанного метода.</returns>
      <param name="instance"> Экземпляр вызова метода (текущий объект).</param>
      <param name="methodInfo">Определяет метод CLR, соответствующий методу базы данных. </param>
      <param name="parameters">Массив параметров для передачи команде.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
      <summary>Выполняет запросы SQL для базы данных и возвращает объекты. </summary>
      <returns>Коллекция объектов, возвращаемых запросом.</returns>
      <param name="query">Запрос SQL для выполнения.</param>
      <param name="parameters">Массив параметров для передачи команде.Следует отметить следующее поведение:Если количество объектов в массиве меньше, чем наибольшее число команд, определенных в командной строке, создается исключение.Если массив содержит объекты, на которые нет ссылок в командной строке, исключение не создается.Если значение параметра равно NULL, оно преобразовывается в DBNull.Value.</param>
      <typeparam name="TResult">Тип элементов в возвращаемой коллекции.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
      <summary>Выполняет запросы SQL напрямую для базы данных.</summary>
      <returns>Коллекция объектов <see cref="T:System.Collections.Generic.IEnumerable`1" />, возвращаемых запросом.</returns>
      <param name="elementType">Тип <see cref="T:System.Collections.Generic.IEnumerable`1" />, который должен быть возвращен.Алгоритм сопоставления столбцов в результате запроса с полями или свойствами в объекте работает таким образом:Если поле или свойство сопоставляется с определенным именем столбца, это имя столбца ожидается в наборе результатов.Если поле или свойство не сопоставляется, столбец с тем же именем, что и поле или свойство, ожидается в наборе результатов.Сравнение выполняется первым пользователем, ищущим совпадение с учетом регистра.Если это совпадение не найдено, следующий поиск выполняется для совпадений без учета регистра.Запрос должен возвращать все отслеженные поля и свойства объекта (кроме тех, загрузка которых отложена), если выполняются все следующие условия:<paramref name="T" /> является сущностью, явно отслеживаемой <see cref="T:System.Data.Linq.DataContext" />.Параметр <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> имеет значение true.Сущность содержит первичный ключ.В противном случае возникает исключение.</param>
      <param name="query">Запрос SQL для выполнения.</param>
      <param name="parameters">Массив параметров для передачи команде.Следует отметить следующее поведение:Если количество объектов в массиве меньше, чем наибольшее число команд, определенных в командной строке, создается исключение.Если массив содержит объекты, на которые нет ссылок в командной строке, исключение не создается.Если значение параметра равно null, оно преобразовывается в DBNull.Value.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetChangeSet">
      <summary>Обеспечивает доступ к измененным объектам, отслеживаемым <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <returns>Набор объектов возвращается как три коллекции, для которых существует только возможность чтения.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
      <summary>Предоставляет сведения о командах SQL, созданных LINQ to SQL.</summary>
      <returns>Запрошенный объект данных команды.</returns>
      <param name="query">Запрос, сведения команды SQL которого должны быть извлечены.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetTable``1">
      <summary>Возвращает коллекцию объектов определенного типа, где тип определяется параметром <paramref name="TEntity" />.</summary>
      <returns>Коллекция объектов.</returns>
      <typeparam name="TEntity">Тип возвращаемых объектов.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetTable(System.Type)">
      <summary>Возвращает коллекцию объектов определенного типа, где тип определяется параметром <paramref name="type" />.</summary>
      <returns>Коллекция объектов.</returns>
      <param name="type">Тип возвращаемых объектов.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.DataContext.LoadOptions">
      <summary>Получает или задает объект <see cref="T:System.Data.Linq.DataLoadOptions" />, связанный с объектом <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <returns>Предварительно выбранные параметры загрузки для реляционных данных. </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Log">
      <summary>Указывает назначение для записи команды или запроса SQL. </summary>
      <returns>Объект <see cref="T:System.IO.TextReader" /> для записи команды.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Mapping">
      <summary>Возвращает <see cref="T:System.Data.Linq.Mapping.MetaModel" />, на котором основано сопоставление.</summary>
      <returns>Словарь <see cref="T:System.Data.Linq.Mapping.MetaModel" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
      <summary>Инструктирует структуру для отслеживания исходного значения и идентификации объекта для этого объекта <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <returns>Значение true — включение отслеживания объектов; в противном случае — false.По умолчанию установлено значение true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)">
      <summary>Обновляет коллекцию объектов сущности согласно указанному режиму.</summary>
      <param name="mode">Значение, указывающее, как обрабатываются конфликты оптимистичного параллелизма. </param>
      <param name="entities">Коллекция сущностей, которые должны быть обновлены.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)">
      <summary>Обновляет объект сущности согласно указанному режиму.</summary>
      <param name="mode">Значение, указывающее, как обрабатываются конфликты оптимистичного параллелизма. </param>
      <param name="entity">Обновляемый объект.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])">
      <summary>Обновляет массив объектов сущности согласно указанному режиму.</summary>
      <param name="mode">Значение, указывающее, как обрабатываются конфликты оптимистичного параллелизма. </param>
      <param name="entities">Обновляемый массив объектов сущности.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.SubmitChanges">
      <summary>Вычисляет набор измененных объектов, которые следует вставить, обновить или удалить, и выполняет соответствующие команды для внесения изменений базы данных.</summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)">
      <summary>Отправляет изменения, которые были выполнены по отношению к извлеченным объектам для основной базы данных, и указывает действие, которое следует выполнить, если не удастся осуществить передачу.</summary>
      <param name="failureMode">Действие, которое следует выполнить, если не удастся осуществить передачу.Допустимы следующие аргументы:<see cref="F:System.Data.Linq.ConflictMode.FailOnFirstConflict" /><see cref="F:System.Data.Linq.ConflictMode.ContinueOnConflict" /></param>
    </member>
    <member name="P:System.Data.Linq.DataContext.Transaction">
      <summary>Задает локальную транзакцию для использования .NET Framework для доступа к базе данных.</summary>
      <returns>Объект транзакции, который используется объектом <see cref="T:System.Data.Linq.DataContext" /> при выполнении запросов и команд.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>Преобразовывает существующий <see cref="T:System.Data.Common.DbDataReader" /> в объекты.</summary>
      <returns>Коллекция объектов, возвращаемых преобразованием.</returns>
      <param name="reader">Преобразуемый параметр <see cref="T:System.Data.IDataReader" />.</param>
      <typeparam name="TResult">Тип <see cref="T:System.Collections.Generic.IEnumerable`1" />, который должен быть возвращен. </typeparam>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)">
      <summary>Преобразовывает существующий <see cref="T:System.Data.Common.DbDataReader" /> в объекты.</summary>
      <returns>Список объектов, возвращаемых преобразованием.</returns>
      <param name="reader">Преобразуемый параметр <see cref="T:System.Data.IDataReader" />.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
      <summary>Преобразовывает существующий <see cref="T:System.Data.Common.DbDataReader" /> в объекты.</summary>
      <returns>Список объектов, возвращаемых преобразованием.</returns>
      <param name="elementType">Тип <see cref="T:System.Collections.Generic.IEnumerable`1" />, который должен быть возвращен.Алгоритм сопоставления столбцов в результате с полями и свойствами в объекте работает таким образом:Если поле или свойство сопоставляется с определенным именем столбца, это имя столбца ожидается в наборе результатов.Если поле или свойство не сопоставляется, столбец с тем же именем, что и поле или свойство, ожидается в наборе результатов.Сравнение выполняется первым пользователем, ищущим совпадение с учетом регистра.Если это совпадение не найдено, следующий поиск выполняется для совпадений без учета регистра.Запрос должен возвращать все отслеженные поля и свойства объекта (кроме тех, загрузка которых отложена), если выполняются все следующие условия:<paramref name="T" /> является сущностью, явно отслеживаемой <see cref="T:System.Data.Linq.DataContext" />.Параметр <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> имеет значение true.Сущность содержит первичный ключ.В противном случае возникает исключение.</param>
      <param name="reader">Преобразуемый параметр <see cref="T:System.Data.IDataReader" />.</param>
    </member>
    <member name="T:System.Data.Linq.DataLoadOptions">
      <summary>Предоставляет немедленную загрузку и фильтрацию связанных данных.</summary>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DataLoadOptions" />.</summary>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Фильтрует объекты, извлеченные для определенной связи.</summary>
      <param name="expression">Определяет запрос, который следует использовать для свойства или поля связи "один ко многим".Следует отметить следующее.Если выражение не запускается с помощью поля или свойства, представляющих связь "один ко многим", создается исключение.Если в выражении отображается оператор, отличный от допустимого оператора, создается исключение.Допустимы следующие операторы:WhereOrderByThenByOrderByDescendingThenByDescendingTake</param>
      <typeparam name="T">Запрашиваемый тип.Если тип не сопоставляется, создается исключение.</typeparam>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
      <summary>Фильтрует объекты, извлеченные для определенной связи.</summary>
      <param name="expression">Определяет запрос, который следует использовать для свойства или поля связи "один ко многим".Следует отметить следующее.Если выражение не запускается с помощью поля или свойства, представляющих связь "один ко многим", создается исключение.Если в выражении отображается оператор, отличный от допустимого оператора, создается исключение.Допустимы следующие операторы:WhereOrderByThenByOrderByDescendingThenByDescendingTake</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Указывает, какие вложенные объекты следует извлечь, когда запрос отправляется для объекта типа Т.</summary>
      <param name="expression">Определяет поле или свойство для извлечения.Если выражение не определяет поле или свойство, представляющие связь "один к одному" или "один ко многим", создается исключение.</param>
      <typeparam name="T">Запрашиваемый тип.Если этот тип не сопоставляется, создается исключение.</typeparam>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)">
      <summary>Извлекаются указанные данные, связанные с основным целевым объектом с помощью лямбда-выражения.</summary>
      <param name="expression">Лямбда-выражение, определяющее связанный материал.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Linq.DBConvert">
      <summary>Использовано изнутри для преобразования одного типа данных в другой.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DBConvert.ChangeType``1(System.Object)">
      <summary>Изменяет указанное значение на текущий тип.</summary>
      <returns>Объект указанного типа, содержащий преобразованное значение.</returns>
      <param name="value">Преобразуемый объект.</param>
      <typeparam name="T">Тип для осуществления изменения.</typeparam>
    </member>
    <member name="M:System.Data.Linq.DBConvert.ChangeType(System.Object,System.Type)">
      <summary>Изменяет указанное значение на указанный тип.</summary>
      <returns>Объект, содержащий преобразованное значение указанного типа.</returns>
      <param name="value">Преобразуемый объект.</param>
      <param name="type">Тип, в который требуется преобразовать объект.</param>
    </member>
    <member name="T:System.Data.Linq.DuplicateKeyException">
      <summary>Создается, когда выполняется попытка добавить объект в кэш идентификации с помощью ключа, который уже используется.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DuplicateKeyException" /> class.</summary>
      <param name="duplicate">Дубликат ключа, который вызвал создание исключения.</param>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DuplicateKeyException" />, ссылаясь на дубликат ключа и создавая сообщение об ошибке.</summary>
      <param name="duplicate">Дубликат ключа, который вызвал создание исключения.</param>
      <param name="message">Сообщение, отображаемое при возникновении исключения.</param>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object,System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DuplicateKeyException" />, ссылаясь на дубликат ключа, создавая сообщение об ошибке и указывая исключение, которое стало причиной создания исключения.</summary>
      <param name="duplicate">Дубликат ключа, который вызвал создание исключения.</param>
      <param name="message">Сообщение, отображаемое при возникновении исключения.</param>
      <param name="innerException">Предыдущее исключение, которое вызвало данное исключение <see cref="T:System.Data.Linq.DuplicateKeyException" />.</param>
    </member>
    <member name="P:System.Data.Linq.DuplicateKeyException.Object">
      <summary>Возвращает объект, ставший причиной возникновения исключения.</summary>
      <returns>Объект, ставший причиной исключения.</returns>
    </member>
    <member name="T:System.Data.Linq.EntityRef`1">
      <summary>Обеспечивает отложенную загрузку и связь для одной стороны связи "один ко многим" в приложении LINQ to SQL. </summary>
      <typeparam name="TEntity">Тип конечной сущности.</typeparam>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.EntityRef`1" /> указывая источник.</summary>
      <param name="source">Указанный источник.</param>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(System.Data.Linq.EntityRef{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.EntityRef`1" />, ссылаясь на целевую сущность.</summary>
      <param name="entityRef">Целевая сущность</param>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(`0)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.EntityRef`1" />, указывая целевую сущность.</summary>
      <param name="entity">Целевая сущность</param>
    </member>
    <member name="P:System.Data.Linq.EntityRef`1.Entity">
      <summary>Получает или задает целевую сущность.</summary>
      <returns>Целевая сущность</returns>
    </member>
    <member name="P:System.Data.Linq.EntityRef`1.HasLoadedOrAssignedValue">
      <summary>Возвращает значение, указывающее, был ли целевой объект загружен или назначен.</summary>
      <returns>True, если целевой объект был загружен или назначен.</returns>
    </member>
    <member name="T:System.Data.Linq.EntitySet`1">
      <summary>Обеспечивает отложенную загрузку и связь для стороны коллекции связей "один ко многим" и "один к одному" в приложениях LINQ to SQL. </summary>
      <typeparam name="TEntity">Тип данных конечной сущности.</typeparam>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.EntitySet`1" />.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.#ctor(System.Action{`0},System.Action{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.EntitySet`1" /> при поставке обработчиков для операций добавления и удаления.</summary>
      <param name="onAdd">Делегат для <see cref="M:System.Data.Linq.EntitySet`1.Add(`0)" />.</param>
      <param name="onRemove">Делегат для <see cref="M:System.Data.Linq.EntitySet`1.Remove(`0)" />.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Add(`0)">
      <summary>Добавление сущности.</summary>
      <param name="entity">Добавляемая сущность.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Добавляет коллекцию сущностей.</summary>
      <param name="collection">Добавляемая коллекция.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Assign(System.Collections.Generic.IEnumerable{`0})">
      <summary>Назначает коллекцию <see cref="T:System.Data.Linq.EntitySet`1" /> в другую коллекцию <see cref="T:System.Data.Linq.EntitySet`1" />.</summary>
      <param name="entitySource">Коллекция для назначения.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Clear">
      <summary>Удаляет все элементы.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Contains(`0)">
      <summary>Указывает, содержит ли интерфейс <see cref="T:System.Data.Linq.EntitySet`1" /> указанную сущность.</summary>
      <returns>Значение true, если класс <see cref="T:System.Data.Linq.EntitySet`1" /> содержит сущность, в противном случае — false.</returns>
      <param name="entity">Сущность.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует коллекцию <see cref="T:System.Data.Linq.EntitySet`1" /> в массив.</summary>
      <param name="array">Массив, в который выполняется копирование.</param>
      <param name="arrayIndex">Начальный индекс в массиве.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.Count">
      <summary>Возвращает количество сущностей в коллекции <see cref="T:System.Data.Linq.EntitySet`1" />.</summary>
      <returns>Представляет число сущностей.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.GetNewBindingList">
      <summary>Создает новый список для связывания с источником данных.</summary>
      <returns>Новый список <see cref="T:System.ComponentModel.IBindingList" /> для связывания с источником данных.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.HasLoadedOrAssignedValues">
      <summary>Указывает, содержит ли <see cref="T:System.Data.Linq.EntitySet`1" /> загруженное или присвоенное значение.</summary>
      <returns>Возвращает значение TRUE, если <see cref="T:System.Data.Linq.EntitySet`1" /> содержит загруженное или присвоенное значение.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.IndexOf(`0)">
      <summary>Возвращает индекс сущности.</summary>
      <returns>Целое число, представляющее индекс.</returns>
      <param name="entity">Сущность, индекс которой возвращается.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Insert(System.Int32,`0)">
      <summary>Вставляет объект в позицию индекса.</summary>
      <param name="index">Индекс, представляющий позицию, в которую вставляется сущность.</param>
      <param name="entity">Сущность, которая будет вставлена.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.IsDeferred">
      <summary>Указывает, содержит ли этот <see cref="T:System.Data.Linq.EntitySet`1" /> отложенный запрос, который еще не был выполнен.</summary>
      <returns>Значение равно true, если отложенный запрос еще не был выполнен, в противном случае значение равно false.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.Item(System.Int32)">
      <summary>Получает или задает элемент по указанному индексу.</summary>
      <returns>Параметр типа <see cref="T:System.Data.Linq.EntitySet`1" />, представляющий элемент.</returns>
      <param name="index">Индекс элемента.</param>
    </member>
    <member name="E:System.Data.Linq.EntitySet`1.ListChanged">
      <summary>Происходит в результате изменения содержимого списка.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Load">
      <summary>Загружает <see cref="T:System.Data.Linq.EntitySet`1" />.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Remove(`0)">
      <summary>Удаляет сущность.</summary>
      <returns>Значение true, если сущность успешно удалена, в противном случае — значение false.</returns>
      <param name="entity">Сущность, которая будет удалена.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.RemoveAt(System.Int32)">
      <summary>Удаляет сущность по указанному индексу.</summary>
      <param name="index">Индекс удаляемой сущности.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.SetSource(System.Collections.Generic.IEnumerable{`0})">
      <summary>Задает источник <see cref="T:System.Data.Linq.EntitySet`1" />.</summary>
      <param name="entitySource">Источник <see cref="T:System.Data.Linq.EntitySet`1" />.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Описание этого члена см. в описании <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>Значение true, если коллекция доступна только для чтения; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Описание этого члена см. в описании метода <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">Массив, в который копируются элементы коллекции.</param>
      <param name="index">Индекс массива, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Описание этого члена см. в описании <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Значение равно true, если доступ к коллекции синхронизирован (является потокобезопасным), в противном случае — значение false. </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#ICollection#SyncRoot">
      <summary>Описание этого члена см. в описании <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>Объект, который может быть использован для синхронизации доступа к коллекции.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Описание этого члена см. в описании метода <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который можно использовать для итерации коллекции.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Add(System.Object)">
      <summary>Описание этого члена см. в разделе <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>Позиция, в которую вставлен новый элемент.</returns>
      <param name="value">Объект, который требуется добавить в список.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Contains(System.Object)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true, если объект <see cref="T:System.Object" /> найден в коллекции <see cref="T:System.Collections.IList" />, в противном случае — false.</returns>
      <param name="value">Объект, который требуется найти в списке.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>Индекс <paramref name="value" />, если он найден в списке; в противном случае -1.</returns>
      <param name="value">Объект, который требуется найти в списке.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">Индекс объекта в списке.</param>
      <param name="value">Объект, вставляемый в список.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#IsFixedSize">
      <summary>Описание этого члена см. в описании свойства <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>Значение равно true, если коллекция имеет фиксированный размер; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#IsReadOnly">
      <summary>Описание этого члена см. в описании <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>Значение true, если коллекция доступна только для чтения; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#Item(System.Int32)">
      <summary>Описание этого члена см. в описании <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>Элемент с указанным индексом.</returns>
      <param name="index">Индекс, по которому нужно извлечь или задать элемент.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Remove(System.Object)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">Объект, который следует удалить из списка.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Описание этого члена см. в описании <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</summary>
      <returns>Значение true, если коллекция является коллекцией объектов <see cref="T:System.Collections.IList" />; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#GetList">
      <summary>Описание этого члена см. в описании <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
      <returns>Объект <see cref="T:System.Collections.IList" />, который может быть связан с источником данных из объекта.</returns>
    </member>
    <member name="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException">
      <summary>Представляет ошибки, которые происходят при попытке изменить внешний ключ, если сущность уже загружена.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> class with a specified message that describes the error.</summary>
      <param name="message">Сообщение с описанием исключения.Код, вызывающий этот конструктор, должен обеспечить локализацию данной строки в соответствии с текущим языком и региональными параметрами системы.</param>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">Сообщение с описанием исключения.Код, вызывающий этот конструктор, должен обеспечить локализацию данной строки в соответствии с текущим языком и региональными параметрами системы.</param>
      <param name="innerException">Исключение, являющееся причиной текущего исключения.Если значение параметра <paramref name="innerException" /> не равно null, текущее исключение вызывается в блоке catch, обрабатывающем внутреннее исключение.</param>
    </member>
    <member name="T:System.Data.Linq.IExecuteResult">
      <summary>Предоставляет доступ к возвращаемому значению или результатам выполнения запроса.</summary>
    </member>
    <member name="M:System.Data.Linq.IExecuteResult.GetParameterValue(System.Int32)">
      <summary>Предоставляет доступ к n-ному выходному параметру.</summary>
      <returns>Объект, содержащий значение указанного параметра. </returns>
      <param name="parameterIndex">Индекс извлекаемого параметра.</param>
    </member>
    <member name="P:System.Data.Linq.IExecuteResult.ReturnValue">
      <summary>Возвращает значение возврата или результат выполненного запроса.</summary>
      <returns>Значение или результат выполненного запроса.</returns>
    </member>
    <member name="T:System.Data.Linq.IFunctionResult">
      <summary>Предоставляет доступ к возвращаемому значению функции:</summary>
    </member>
    <member name="P:System.Data.Linq.IFunctionResult.ReturnValue">
      <summary>Возвращает возвращаемое значение функции.</summary>
      <returns> Значение, возвращаемое функцией.</returns>
    </member>
    <member name="T:System.Data.Linq.IMultipleResults">
      <summary>Представляет результаты сопоставляемых функций и запросов с последовательностями, возвращающими переменные.</summary>
    </member>
    <member name="M:System.Data.Linq.IMultipleResults.GetResult``1">
      <summary>Извлекает следующий результат как последовательность указанного типа.</summary>
      <returns>Перечисление для итерации результатов.</returns>
      <typeparam name="TElement">Тип возвращаемой последовательности.</typeparam>
    </member>
    <member name="T:System.Data.Linq.ISingleResult`1">
      <summary>Представляет результат сопоставленной функции, которая содержит одну возвращаемую последовательность.</summary>
      <typeparam name="T">Тип элементов второй возвращаемой последовательности.</typeparam>
    </member>
    <member name="T:System.Data.Linq.ITable">
      <summary>Используется для слабо типизированных скриптов запросов.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object)">
      <summary>Присоединяет сущность к <see cref="T:System.Data.Linq.DataContext" /> в неизмененном состоянии.</summary>
      <param name="entity">Сущность, которая будет прикреплена.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)">
      <summary>Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entity">Коллекция сущностей.</param>
      <param name="asModified">true — прикрепление сущностей в измененном состоянии.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)">
      <summary>Прикрепляет сущность к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии, указывая сущность и ее исходное состояние.</summary>
      <param name="entity">Сущность, которая будет прикреплена.</param>
      <param name="original">Экземпляр того же типа сущности с элементами данных, которые содержат исходные значения.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)">
      <summary>Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entities">Коллекция сущностей.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)">
      <summary>Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entities">Коллекция сущностей.</param>
      <param name="asModified">true — прикрепление сущностей в измененном состоянии.</param>
    </member>
    <member name="P:System.Data.Linq.ITable.Context">
      <summary>Получает контекст <see cref="T:System.Data.Linq.DataContext" />, использованный для извлечения данного объекта <see cref="T:System.Data.Linq.ITable" />.</summary>
      <returns>Контекст <see cref="T:System.Data.Linq.DataContext" />, использованный для извлечения объекта <see cref="T:System.Data.Linq.ITable" />.</returns>
    </member>
    <member name="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)">
      <summary>Помещает все сущности из коллекции в состояние pending delete.</summary>
      <param name="entities">Коллекция, из которой удалены все элементы.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)">
      <summary>Помещает сущность из таблицы в состояние pending delete.</summary>
      <param name="entity">Сущность, которая будет удалена.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)">
      <summary>Возвращает массив измененных элементов, содержащих их текущее и исходное значения.</summary>
      <param name="entity">Объект, из которого следует получить массив.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
      <summary>Извлечение исходных значений.</summary>
      <returns>Копия исходной сущности.Значение равно NULL, если передаваемый объект не отслеживается.Отключенные сущности, отправленные обратно клиентом, должны быть прикреплены до того, как <see cref="T:System.Data.Linq.DataContext" /> может начать отслеживать их состояние."Исходное значение" только что прикрепленной сущности устанавливается на основе значений, предоставленных клиентом.Контекст данных не отслеживает состояние отключенных сущностей.</returns>
      <param name="entity">Сущность, исходное значение которой будет извлечено.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)">
      <summary>Добавляет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в состояние pending insert.</summary>
      <param name="entities">Добавляемые сущности.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)">
      <summary>Добавляет сущность в состояние pending insert для этой таблицы.</summary>
      <param name="entity">Добавляемая сущность.</param>
    </member>
    <member name="P:System.Data.Linq.ITable.IsReadOnly">
      <summary>Указывает, имеет ли первичный ключ тип сущностей, содержащихся в данном экземпляре <see cref="T:System.Data.Linq.ITable" />.</summary>
      <returns>Возвращает значение true, если тип сущности не имеет первичного ключа; в противном случае — значение false.</returns>
    </member>
    <member name="T:System.Data.Linq.ITable`1">
      <summary>Представляет таблицу для определенного типа в основной базе данных. </summary>
      <typeparam name="TEntity"></typeparam>
    </member>
    <member name="M:System.Data.Linq.ITable`1.Attach(`0)">
      <summary>При переопределении прикрепляет отключенную или "отсоединенную" сущность к новому контексту <see cref="T:System.Data.Linq.DataContext" />, когда исходные значения необходимы для проверок оптимистичного параллелизма.</summary>
      <param name="entity">Добавляемый объект.</param>
    </member>
    <member name="M:System.Data.Linq.ITable`1.DeleteOnSubmit(`0)">
      <summary>При переопределении приводит сущность из данной таблицы в состояние pending delete.</summary>
      <param name="entity">Удаляемый объект.</param>
    </member>
    <member name="M:System.Data.Linq.ITable`1.InsertOnSubmit(`0)">
      <summary>При переопределении добавляет сущность в состоянии pending insert в данную таблицу <see cref="T:System.Data.Linq.ITable`1" />.</summary>
      <param name="entity">Объект, который нужно вставить.</param>
    </member>
    <member name="T:System.Data.Linq.Link`1">
      <summary>Используется для включения отложенной загрузки для отдельных свойств (сходных с <see cref="T:System.Data.Linq.EntityRef`1" />).</summary>
      <typeparam name="T">Тип элементов в отложенном источнике.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Data.Linq.Link`1" />, ссылаясь на источник.</summary>
      <param name="source">Коллекция источника.</param>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(System.Data.Linq.Link{`0})">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Data.Linq.Link`1" />, копируя внутреннее состояние из другого экземпляра <see cref="T:System.Data.Linq.Link`1" />.</summary>
      <param name="link">Экземпляр <see cref="T:System.Data.Linq.Link`1" />, из которого следует выполнить копирование.</param>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(`0)">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Data.Linq.Link`1" />, ссылаясь на значение свойства.</summary>
      <param name="value">Значение для свойства.</param>
    </member>
    <member name="P:System.Data.Linq.Link`1.HasLoadedOrAssignedValue">
      <summary>Specifies whether the <see cref="T:System.Data.Linq.Link`1" /> has loaded or assigned a value.</summary>
      <returns>true, если <see cref="T:System.Data.Linq.Link`1" /> содержит загруженное или присвоенное значение; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Link`1.HasValue">
      <summary>Возвращает значение, указывающее, содержит ли источник значение.</summary>
      <returns>Возвращает true, если источник содержит назначенного или загруженное значение (включая значение NULL).</returns>
    </member>
    <member name="P:System.Data.Linq.Link`1.Value">
      <summary>Получает или задает значение, назначенное для или загруженное с помощью <see cref="T:System.Data.Linq.Link`1" />.</summary>
      <returns>Значение этого отложенного свойства.</returns>
    </member>
    <member name="T:System.Data.Linq.MemberChangeConflict">
      <summary>Представляет ситуацию, в которой попытка обновления оказывается неудачной, так как значения элемента были обновлены с того момента, когда были в последний раз считаны клиентом.</summary>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.CurrentValue">
      <summary>Возвращает текущее значение элемента в конфликте.</summary>
      <returns>Объект в конфликте.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.DatabaseValue">
      <summary>Возвращает значение базы данных элемента в конфликте.</summary>
      <returns>Значение объекта в конфликте.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.IsModified">
      <summary>Возвращает значение, указывающее, были ли данные элемента изменены с момента последнего чтения или обновления базы данных.</summary>
      <returns>Значение True, если данные элемента были изменены.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.IsResolved">
      <summary>Возвращает значение, указывающее, был ли конфликт разрешен.</summary>
      <returns>True, если конфликт был разрешен.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.Member">
      <summary>Возвращает метаданные об элементе в конфликте.</summary>
      <returns>Сведения об элементе в конфликте.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.OriginalValue">
      <summary>Возвращает исходное значение элемента в конфликте.</summary>
      <returns>Исходное значение элемента в конфликте.</returns>
    </member>
    <member name="M:System.Data.Linq.MemberChangeConflict.Resolve(System.Data.Linq.RefreshMode)">
      <summary>Используйте параметр <see cref="T:System.Data.Linq.RefreshMode" />, чтобы автоматически указать значение, которое следует задать как текущее для элемента в конфликте.</summary>
      <param name="refreshMode">См. раздел <see cref="T:System.Data.Linq.RefreshMode" />.</param>
    </member>
    <member name="M:System.Data.Linq.MemberChangeConflict.Resolve(System.Object)">
      <summary>Указывает значение, которое следует задать как текущее значение для элемента в конфликте.</summary>
      <param name="value">Значение, которое следует задать как текущее.</param>
    </member>
    <member name="T:System.Data.Linq.ModifiedMemberInfo">
      <summary>Содержит значения элементов, которые были изменены в приложениях LINQ to SQL.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.CurrentValue">
      <summary>Возвращает текущее значение измененного элемента.</summary>
      <returns>Значение элемента.</returns>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.Member">
      <summary>Возвращает сведения об элементе для измененного элемента.</summary>
      <returns>Сведения об элементе в конфликте.</returns>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.OriginalValue">
      <summary>Возвращает исходное значение измененного элемента.</summary>
      <returns>Исходное значение для измененного элемента.</returns>
    </member>
    <member name="T:System.Data.Linq.ObjectChangeConflict">
      <summary>Представляет попытку обновления с одним или несколькими конфликтами параллелизма.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.IsDeleted">
      <summary>Возвращает значение, указывающее, был ли объект в конфликте удален из базы данных.</summary>
      <returns>Значение True, если объект был удален.</returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.IsResolved">
      <summary>Возвращает значение, указывающее, были ли конфликты для этого объекта разрешены.</summary>
      <returns>True, если конфликты были разрешены.</returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.MemberConflicts">
      <summary>Возвращает коллекцию всех конфликтов элемента, которые послужили причиной сбоя обновления.</summary>
      <returns>Коллекция конфликтов элемента.</returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.Object">
      <summary>Возвращает объект в конфликте.</summary>
      <returns>Объект в конфликте.</returns>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve">
      <summary>Решает конфликты элемента, сохранив текущие значения и переустанавливая исходные базовые значения, которые должны соответствовать последним значениям базы данных.</summary>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode)">
      <summary>Разрешает конфликты элементов, используя указанный режим <see cref="T:System.Data.Linq.RefreshMode" />.</summary>
      <param name="refreshMode">Соответствующий параметр из режима <see cref="T:System.Data.Linq.RefreshMode" />.</param>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode,System.Boolean)">
      <summary>Разрешает конфликты элемента, содержащие текущие значения и сбрасывающие основные исходные значения.</summary>
      <param name="refreshMode">Соответствующий параметр из <see cref="T:System.Data.Linq.RefreshMode" />.</param>
      <param name="autoResolveDeletes">Если значение равно true, автоматически разрешает конфликты, которые являются результатом измененного объекта, который больше не находится в базе данных. </param>
    </member>
    <member name="T:System.Data.Linq.RefreshMode">
      <summary>Определяет, как метод <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> обрабатывает конфликты оптимистичного параллелизма.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.KeepCurrentValues">
      <summary>Инициирует замену методом <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> исходного значения значениями, извлеченными из базы данных.Текущее значение не изменяется.</summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.KeepChanges">
      <summary>Инициирует хранение методом <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> текущего значения, которое было изменено, но обновляет другие значения значениями из базы данных.</summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.OverwriteCurrentValues">
      <summary>Инициирует перезапись методом <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> всех текущих значений значениями из базы данных.</summary>
    </member>
    <member name="T:System.Data.Linq.Table`1">
      <summary>Представляет таблицу для определенного типа в основной базе данных.</summary>
      <typeparam name="TEntity">Тип данных в таблице.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0)">
      <summary>Прикрепляет отключенную или "отсоединенную" сущность к новому контексту <see cref="T:System.Data.Linq.DataContext" />, когда исходные значения необходимы для проверок оптимистичного параллелизма.</summary>
      <param name="entity">Исходные значения объекта, которые следует прикрепить.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)">
      <summary>Присоединяет сущность к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entity">Сущность, которая будет прикреплена.</param>
      <param name="asModified">True - прикрепление сущности в измененном состоянии.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0,`0)">
      <summary>Прикрепляет сущность к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии, указывая сущность и ее исходное состояние.</summary>
      <param name="entity">Сущность, которая будет прикреплена.</param>
      <param name="original">Экземпляр того же типа сущности с элементами данных, которые содержат исходные значения.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entities">Коллекция сущностей.</param>
      <typeparam name="TSubEntity">Тип прикрепляемых сущностей.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
      <summary>Присоединяет все элементы коллекции к <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.</summary>
      <param name="entities">Коллекция сущностей.</param>
      <param name="asModified">true, если объект содержит временную метку или элемент RowVersion, false, если исходные значения используются для проверки оптимистичного параллелизма.</param>
      <typeparam name="TSubEntity">Тип прикрепляемых сущностей.</typeparam>
    </member>
    <member name="P:System.Data.Linq.Table`1.Context">
      <summary>Получает объект <see cref="T:System.Data.Linq.DataContext" />, использованный для извлечения данного объекта <see cref="T:System.Data.Linq.Table`1" />.</summary>
      <returns>Словарь <see cref="T:System.Data.Linq.DataContext" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Помещает все сущности из коллекции в состояние pending delete.</summary>
      <param name="entities">Удаляемые сущности.</param>
      <typeparam name="TSubEntity">Тип элементов, которые следует удалить.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
      <summary>Помещает сущность из таблицы в состояние pending delete.</summary>
      <param name="entity">Сущность, которая будет удалена.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetEnumerator">
      <summary>Возвращает перечислитель для коллекции.</summary>
      <returns>Перечислитель, с помощью которого можно осуществлять итерацию по элементам коллекции.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)">
      <summary>Возвращает массив измененных элементов, содержащих их текущее и исходное значения.</summary>
      <returns>Массив измененных элементов.</returns>
      <param name="entity">Объект, из которого следует получить массив.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetNewBindingList">
      <summary>Создает новый список для связывания с источником данных.</summary>
      <returns>Новый список <see cref="T:System.ComponentModel.IBindingList" /> для связывания с источником данных. </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)">
      <summary>Возвращает экземпляр, содержащий исходное состояние сущности.</summary>
      <returns>Экземпляр <see cref="T:System.Data.Linq.Table`1" /> в его исходном состоянии.</returns>
      <param name="entity">Сущность, исходное состояние которой возвращается.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Добавляет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в состояние pending insert.</summary>
      <param name="entities">Добавляемые сущности.</param>
      <typeparam name="TSubEntity">Тип элемента, который следует вставить.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)">
      <summary>Добавляет сущность в состояние pending insert для этого <see cref="T:System.Data.Linq.Table`1" />.</summary>
      <param name="entity">Добавляемая сущность.</param>
    </member>
    <member name="P:System.Data.Linq.Table`1.IsReadOnly">
      <summary>Указывает, имеет ли первичный ключ тип сущностей, содержащихся в данном экземпляре <see cref="T:System.Data.Linq.Table`1" />.</summary>
      <returns>Возвращает значение true, если тип сущности не имеет первичного ключа; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Описание этого члена см. в описании <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>Перечислитель, с помощью которого можно осуществлять итерацию по элементам коллекции.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Описание этого члена см. в описании <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>Перечислитель, с помощью которого можно осуществлять итерацию по элементам коллекции.</returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Описание этого элемента см. в <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />. </summary>
      <returns>Значение true, если коллекция является коллекцией объектов <see cref="T:System.Collections.IList" />; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList">
      <summary>Описание этого члена см. в описании <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
      <returns>Объект <see cref="T:System.Collections.IList" />, который может быть связан с источником данных.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Data.Linq.ITable.Attach(System.Object)" />.</summary>
      <param name="entity">Сущность, которая будет прикреплена.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)" />.</summary>
      <param name="entity">Сущность, которая будет прикреплена.</param>
      <param name="asModified">True - прикрепление сущности в измененном состоянии.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)" />.</summary>
      <param name="entity">Сущность, которая будет прикреплена.</param>
      <param name="original">Экземпляр того же типа сущности с элементами данных, которые содержат исходные значения.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)" />.</summary>
      <param name="entities">Коллекция сущностей.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)" />.</summary>
      <param name="entities">Коллекция сущностей.</param>
      <param name="asModified">True — прикрепление сущностей в измененном состоянии.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)" />.</summary>
      <param name="entities">Удаляемые сущности.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)" />.</summary>
      <param name="entity">Сущность, которая будет удалена.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)" />.</summary>
      <returns>Массив измененных элементов.</returns>
      <param name="entity">Сущность, из которой следует получать измененные элементы.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)" />.</summary>
      <returns>Копия исходной сущности. </returns>
      <param name="entity">Сущность, доступ к исходному состоянию которой будет осуществлен. </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)" />.</summary>
      <param name="entities">Коллекция сущностей.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)" />.</summary>
      <param name="entity">Добавляемая сущность.</param>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType">
      <summary>Описание этого члена см. в описании <see cref="P:System.Linq.IQueryable.ElementType" />.</summary>
      <returns>Тип <see cref="T:System.Type" />, представляющий тип элементов, которые возвращаются при выполнении дерева выражения, связанного с данным объектом. </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression">
      <summary>Описание этого члена см. в описании <see cref="P:System.Linq.IQueryable.Expression" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression" />, связанное с данным экземпляром класса <see cref="T:System.Linq.IQueryable" />. </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider">
      <summary>Описание этого члена см. в описании <see cref="P:System.Linq.IQueryable.Provider" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryProvider" />, связанный с указанным источником данных. </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</returns>
      <param name="expression">Выражение запроса.</param>
      <typeparam name="TResult">Тип данных в таблице.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</returns>
      <param name="expression">Выражение запроса.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)" />.</summary>
      <returns>Значение, получаемое в результате выполнения указанного запроса.</returns>
      <param name="expression">Выражение запроса для выполнения.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>Описание этого члена см. в описании <see cref="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)" />.</summary>
      <returns>Значение, получаемое в результате выполнения указанного запроса.</returns>
      <param name="expression">Выражение запроса для выполнения.</param>
      <typeparam name="TResult">Тип данных в таблице.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.ToString">
      <summary>Возвращает строку, представляющую таблицу.</summary>
      <returns>Строка, представляющая таблицу.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Linq.Mapping.AssociationAttribute">
      <summary>Определяет свойство как представляющее ассоциацию базы данных, такую как отношение внешнего ключа.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.AssociationAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.AssociationAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.DeleteOnNull">
      <summary>При задании данного свойства для ассоциации типа 1:1, в которой члены внешнего ключа не поддерживают значение null, при установке ассоциации в null объект удаляется.</summary>
      <returns>При установке в True объект удаляется.The default value is False.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.DeleteRule">
      <summary>Возвращает или задает для ассоциации поведение удаления.</summary>
      <returns>Строка, представляющая правило.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.IsForeignKey">
      <summary>Возвращает или задает член как внешний ключ в ассоциации, представляющей отношение базы данных.</summary>
      <returns>Значение по умолчанию — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.IsUnique">
      <summary>Возвращает или задает значение, указывающее ограничение уникальности для первичного ключа.</summary>
      <returns>Значение по умолчанию — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.OtherKey">
      <summary>Возвращает или задает один или более членов целевого класса сущности как ключевые значения с другой стороны ассоциации.</summary>
      <returns>Значение по умолчанию — идентификатор связанного класса.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.ThisKey">
      <summary>Возвращает или задает члены этого класса сущности, представляющие ключевые значения с этой стороны ассоциации.</summary>
      <returns>Значение по умолчанию — идентификатор содержащего класса.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.AttributeMappingSource">
      <summary>Источник сопоставления, использующий атрибуты контекста для создания модели сопоставления.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.AttributeMappingSource.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.AttributeMappingSource" />.</summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.AutoSync">
      <summary>Указывает исполняющей среде, как извлекать значение после выполнения операции вставки или обновления.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Default">
      <summary>Автоматически выбирает значение.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Always">
      <summary>Всегда возвращает значение.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Never">
      <summary>Никогда не возвращает значение.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.OnInsert">
      <summary>Возвращает значение только после выполнения операции вставки.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.OnUpdate">
      <summary>Возвращает значение только после выполнения операции обновления.</summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.ColumnAttribute">
      <summary>Ассоциирует класс со столбцом в таблице базы данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ColumnAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.ColumnAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.AutoSync">
      <summary>Возвращает или задает перечисление <see cref="T:System.Data.Linq.Mapping.AutoSync" />.</summary>
      <returns>Значение <see cref="T:System.Data.Linq.Mapping.AutoSync" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.CanBeNull">
      <summary>Возвращает или задает значение, указывающее, может ли столбец содержать значения null.</summary>
      <returns>Значение по умолчанию — true.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.DbType">
      <summary>Возвращает или задает тип столбца базы данных.</summary>
      <returns>См. примечания.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.Expression">
      <summary>Возвращает или задает значение, указывающее, является ли столбец вычисляемым столбцом в базе данных.</summary>
      <returns>По умолчанию пусто.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated">
      <summary>Возвращает или задает значение, определяющее, содержит ли столбец значения, автоматически генерируемые базой данных.</summary>
      <returns>Значение по умолчанию — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsDiscriminator">
      <summary>Возвращает или задает значение, указывающее, содержит ли столбец дискриминаторное значение для иерархии наследования LINQ to SQL.</summary>
      <returns>Значение по умолчанию — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsPrimaryKey">
      <summary>Возвращает или задает значение, указывающее, представляет ли этот член класса столбец, входящий в состав первичного ключа таблицы.</summary>
      <returns>Значение по умолчанию — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion">
      <summary>Возвращает или задает значение, указывающее, является ли тип столбца члена штампом времени или версией строки в базе данных.</summary>
      <returns>Значение по умолчанию — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck">
      <summary>Возвращает или задает для LINQ to SQL способ выявления конфликтов оптимистического параллельного выполнения.</summary>
      <returns>По умолчанию — <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Always" />, если свойство <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" /> члена не равно true.Другими значениями являются <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Never" /> и <see cref="F:System.Data.Linq.Mapping.UpdateCheck.WhenChanged" />.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.DataAttribute">
      <summary>Предоставляет члены для описания атрибутов данных в столбцах.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.DataAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.DataAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.DataAttribute.Name">
      <summary>Возвращает или задает имя столбца.</summary>
      <returns>Имя.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.DataAttribute.Storage">
      <summary>Возвращает или задает закрытое поле для хранения значения из столбца.</summary>
      <returns>Имя поля хранения. </returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.DatabaseAttribute">
      <summary>Задает определенные атрибуты класса, представляющего базу данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.DatabaseAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.DatabaseAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.DatabaseAttribute.Name">
      <summary>Gets or sets the name of the database.</summary>
      <returns>Имя.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.FunctionAttribute">
      <summary>Связывает метод с хранимой процедурой или пользовательской функцией в базе данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.FunctionAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.FunctionAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.FunctionAttribute.IsComposable">
      <summary>Возвращает или задает значение, указывающее, чему сопоставлен метод — функции или хранимой процедуре.</summary>
      <returns>true, если функции; false, если хранимой процедуре.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.FunctionAttribute.Name">
      <summary>Возвращает или задает имя функции.</summary>
      <returns>Имя функции или хранимой процедуры.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.InheritanceMappingAttribute">
      <summary>Сопоставляет иерархию наследования в приложении LINQ to SQL. </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.InheritanceMappingAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Code">
      <summary>Возвращает или задает дискриминаторный код в сопоставляемой иерархии наследования.</summary>
      <returns>Должен задаваться пользователем.Значение по умолчанию отсутствует.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault">
      <summary>Возвращает или задает значение, указывающее, создается ли объект данного типа, когда значение дискриминатора не соответствует заданному значению.</summary>
      <returns>Default = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Type">
      <summary>Возвращает или задает тип класса в иерархии.</summary>
      <returns>Должен задаваться пользователем.Значение по умолчанию отсутствует.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MappingSource">
      <summary>Представляет источник информации сопоставления.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MappingSource" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.CreateModel(System.Type)">
      <summary>Создает новую модель сопоставления.</summary>
      <returns>Мета-модель, созданная для отражения текущей схемы соответствия.</returns>
      <param name="dataContextType">Тип <see cref="T:System.Data.Linq.DataContext" />, на котором должно основываться сопоставление.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.GetModel(System.Type)">
      <summary>Возвращает модель сопоставления.</summary>
      <returns>Модель отображения, ассоциированная с этим источником сопоставления.</returns>
      <param name="dataContextType">Тип <see cref="T:System.Data.Linq.DataContext" /> возвращаемой модели.</param>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAccessor">
      <summary>Представляет метод доступа члена.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaAccessor" />.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.GetBoxedValue(System.Object)">
      <summary>Задает объект, для которого нужно задать или из которого нужно прочитать значение.</summary>
      <returns>Упакованное значение этого экземпляра.</returns>
      <param name="instance">Экземпляр, для которого нужно задать или из которого нужно прочитать значение.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasAssignedValue(System.Object)">
      <summary>Указывает, присвоено ли данному экземпляру значение.</summary>
      <returns>true, если экземпляру присвоено значение; в противном случае — false.</returns>
      <param name="instance">Проверяемый экземпляр.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasLoadedValue(System.Object)">
      <summary>Указывает, содержит ли экземпляр значение, загруженное из отложенного источника.</summary>
      <returns>true, если экземпляр содержит значение, загруженное из отложенного источника; в противном случае — false. </returns>
      <param name="instance">Проверяемый экземпляр.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasValue(System.Object)">
      <summary>Указывает, какое значение содержит экземпляр: загруженное или присвоенное.</summary>
      <returns>true, если экземпляр содержит загруженное или присвоенное значение; в противном случае — false. </returns>
      <param name="instance">Проверяемый экземпляр.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.SetBoxedValue(System.Object@,System.Object)">
      <summary>Задает значение как объект.</summary>
      <param name="instance">The instance into which to set the value.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAccessor.Type">
      <summary>Возвращает тип члена, которому принадлежит данный метод доступа.</summary>
      <returns>Тип члена.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAccessor`2">
      <summary>Строго типизированная версия класса <see cref="T:System.Data.Linq.Mapping.MetaAccessor" />.</summary>
      <typeparam name="TEntity">Тип источника.</typeparam>
      <typeparam name="TMember">Тип члена данного источника.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaAccessor`2" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.GetBoxedValue(System.Object)">
      <summary>Задает объект, для которого нужно задать или из которого нужно прочитать значение.</summary>
      <returns>Упакованное значение этого экземпляра.</returns>
      <param name="instance">Экземпляр, для которого нужно задать или из которого нужно прочитать значение.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.GetValue(`0)">
      <summary>Задает строго типизированное значение.</summary>
      <returns>Значение этого экземпляра.</returns>
      <param name="instance">Экземпляр, из которого следует получить значение.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.SetBoxedValue(System.Object@,System.Object)">
      <summary>Задает экземпляр, для которого задается упакованное значение.</summary>
      <param name="instance">Экземпляр, для которого задается упакованное значение.</param>
      <param name="value">Задаваемое значение.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.SetValue(`0@,`1)">
      <summary>Задает экземпляр, для которого задается строго типизированное значение.</summary>
      <param name="instance">The instance into which to set the value.</param>
      <param name="value">Строго типизированное значение, которое следует задать.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAccessor`2.Type">
      <summary>Возвращает тип члена, которому принадлежит данный метод доступа. </summary>
      <returns>Тип члена.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAssociation">
      <summary>Представляет отношение ассоциации между двумя типами сущностей.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAssociation.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaAssociation" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.DeleteOnNull">
      <summary>Возвращает значение, указывающее, следует ли удалить объект, когда ассоциация будет установлена в null.</summary>
      <returns>Если true, объекты удаляются, когда ассоциация устанавливается в null.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.DeleteRule">
      <summary>Возвращает значение, определяющее поведение при удалении дочернего типа.</summary>
      <returns>Строка, представляющая правило, или значение null, если при удалении не задано никакого действия.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsForeignKey">
      <summary>Возвращает значение, указывающее, является ли второй тип родительским для данного типа.</summary>
      <returns>Возвращает значение true, если второй тип является родительским для данного типа.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsMany">
      <summary>Возвращает значение, указывающее, представляет ли ассоциация отношение "один-ко-многим".</summary>
      <returns>Возвращает значение true, если ассоциация представляет отношение "один-ко-многим".</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsNullable">
      <summary>Возвращает значение, указывающее, может ли ассоциация иметь значение null.</summary>
      <returns>Возвращает значение true, если ассоциация может иметь значение null.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsUnique">
      <summary>Возвращает значение, указывающее, является ли ассоциация уникальной.</summary>
      <returns>Возвращает значение true, если ассоциация является уникальной.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey">
      <summary>Возвращает список членов, представляющих значения с другой стороны ассоциации.</summary>
      <returns>Возвращает коллекцию, представляющую значения с другой стороны ассоциации.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherKeyIsPrimaryKey">
      <summary>Возвращает значение, указывающее, образует ли <see cref="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey" /> идентификатор другого типа.</summary>
      <returns>true, если <see cref="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey" /> образует идентификатор (первичный ключ) другого типа.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherMember">
      <summary>Возвращает член, с другой стороны ассоциации, представляющий обратную ассоциацию.</summary>
      <returns>Член с другой стороны.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherType">
      <summary>Возвращает тип с другой стороны ассоциации.</summary>
      <returns>Тип.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey">
      <summary>Возвращает список членов, представляющих значения с этой стороны ассоциации.</summary>
      <returns>Коллекция.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisKeyIsPrimaryKey">
      <summary>Возвращает значение, указывающее, образует ли <see cref="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey" /> идентификатор этого типа.</summary>
      <returns>true, если <see cref="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey" /> образует идентификатор (первичный ключ) ассоциации.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisMember">
      <summary>Возвращает член с этой стороны, представляющий ассоциацию.</summary>
      <returns>Член.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaDataMember">
      <summary>Представляет сопоставление между полем или свойством объекта домена с одной стороны и столбцом таблицы базы данных с другой стороны.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaDataMember.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaDataMember" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Association">
      <summary>Возвращает объект <see cref="T:System.Data.Linq.Mapping.MetaAssociation" />, соответствующий этому члену.</summary>
      <returns>Соответствующий объект <see cref="T:System.Data.Linq.Mapping.MetaAssociation" />, если таковой имеется; в противном случае — null.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.AutoSync">
      <summary>Возвращает значение, идентифицирующее поведение этого члена, связанное с чтением после записи, для операций вставки и обновления. </summary>
      <returns>Перечисление <see cref="T:System.Data.Linq.Mapping.AutoSync" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.CanBeNull">
      <summary>Возвращает значение, указывающее, может ли этому члену быть присвоено значение null.</summary>
      <returns>true, если этому члену может быть присвоено значение null; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DbType">
      <summary>Возвращает тип соответствующего столбца базы данных.</summary>
      <returns>Тип столбца базы данных в виде строки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeclaringType">
      <summary>Возвращает <see cref="T:System.Data.Linq.Mapping.MetaType" />, содержащий этот член данных.</summary>
      <returns>Мета-тип, содержащий текущий член.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeferredSourceAccessor">
      <summary>Возвращает метод доступа, используемый для возврата и задания отложенного источника для этого члена.</summary>
      <returns>Метод доступа, используемый для доступа к отложенному источнику для этого члена.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeferredValueAccessor">
      <summary>Возвращает метод доступа, используемый для возврата и задания отложенного значения этого члена (без обращения к базе данных).</summary>
      <returns>Метод доступа, используемый для доступа к отложенному значению для этого члена.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Expression">
      <summary>Возвращает выражение, определяющее значение вычисляемого столбца.</summary>
      <returns>Возвращает выражение для вычисляемого столбца в виде строки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsAssociation">
      <summary>Возвращает значение, указывающее, определяет ли данный член отношение ассоциации.</summary>
      <returns>true, если данный член определяет отношение ассоциации; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDbGenerated">
      <summary>Возвращает значение, указывающее, был ли данный член автоматически сгенерирован базой данных.</summary>
      <returns>true, если этот член был данный член автоматически сгенерирован базой данных; в противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaDataMember.IsDeclaredBy(System.Data.Linq.Mapping.MetaType)">
      <summary>Указывает, объявлен ли этот член в заданном типе.</summary>
      <returns>true, если этот член объявлен в заданном типе; в противном случае — false.</returns>
      <param name="type">Проверяемый тип.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDeferred">
      <summary>Возвращает значение, указывающее, является ли поведением по умолчанию отложенная загрузка данного члена.</summary>
      <returns>true, если для этого члена по умолчанию выполняется отложенная загрузка; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDiscriminator">
      <summary>Возвращает значение, указывающее, представляет ли этот член дискриминатор наследования.</summary>
      <returns>true, если представляет этот член представляет дискриминатор наследования; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsPersistent">
      <summary>Возвращает значение, указывающее, сопоставляется ли этот член столбцу (или ограничению).</summary>
      <returns>true, если этот член сопоставляется столбцу (или ограничению); в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsPrimaryKey">
      <summary>Возвращает значение, указывающее, является ли этот член частью идентификатора типа.</summary>
      <returns>true, этот член является частью идентификатора типа; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsVersion">
      <summary>Возвращает значение, указывающее, представляет ли этот член версию строки или штамп времени.</summary>
      <returns>true, если представляет этот член представляет версию строки или штамп времени; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.LoadMethod">
      <summary>Возвращает метод <see cref="T:System.Data.Linq.DataContext" />, используемый для выполнения операций загрузки.</summary>
      <returns>Метод загрузки как <see cref="T:System.Reflection.MethodInfo" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.MappedName">
      <summary>Возвращает имя столбца (или ограничения) в базе данных.</summary>
      <returns>Имя столбца (или ограничения) в виде строки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Member">
      <summary>Получает основной объект <see cref="T:System.Reflection.MemberInfo" />.</summary>
      <returns>Атрибут элемента и сведения о метаданных.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.MemberAccessor">
      <summary>Возвращает метод доступа, используемый для возврата или задания отложенного значения этого члена.</summary>
      <returns>Метод доступа.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Name">
      <summary>Возвращает или задает имя члена, совпадающее с именем <see cref="T:System.Reflection.MemberInfo" />.</summary>
      <returns>Имя, совпадающее с именем <see cref="T:System.Reflection.MemberInfo" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Ordinal">
      <summary>Возвращает исходную позицию этого члена в структуре по умолчанию результатов запроса.</summary>
      <returns>Исходная позиция.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.StorageAccessor">
      <summary>Возвращает метод доступа, используемый для возврата или задания хранимого значения этого члена.</summary>
      <returns>Метод доступа, используемый для доступа к хранимому значению этого члена.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.StorageMember">
      <summary>Возвращает член, хранящий данные этого члена.</summary>
      <returns>Член, используемый для хранения.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Type">
      <summary>Возвращает тип данного члена.</summary>
      <returns>Тип текущего члена.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.UpdateCheck">
      <summary>Возвращает политику контроля оптимистического параллельного выполнения для данного члена.</summary>
      <returns>Перечисление <see cref="T:System.Data.Linq.Mapping.UpdateCheck" />.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaFunction">
      <summary>Представляет сопоставление между методом контекста и функцией базы данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaFunction.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaFunction" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.HasMultipleResults">
      <summary>Возвращает значение, указывающее, имеет ли хранимая процедура несколько типов результатов.</summary>
      <returns>true, если хранимая процедура имеет несколько типов результатов.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.IsComposable">
      <summary>Возвращает значение, указывающее, может ли данная функция использоваться в запросе.</summary>
      <returns>true, если данная функция может использоваться в запросе.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.MappedName">
      <summary>Возвращает имя функции или процедуры базы данных.</summary>
      <returns>Строка, представляющая имя функции или процедуры базы данных.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Method">
      <summary>Возвращает соответствующий метод контекста.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, соответствующий базовому контекстному методу.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Model">
      <summary>Возвращает <see cref="T:System.Data.Linq.Mapping.MetaModel" />, где содержится данная функция.</summary>
      <returns>Объект <see cref="T:System.Data.Linq.Mapping.MetaModel" />, содержащий данную функцию.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Name">
      <summary>Получает имя метода.</summary>
      <returns>Строка string, представляющая имя метода.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Parameters">
      <summary>Возвращает перечисление параметров функции.</summary>
      <returns>Коллекция параметров.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.ResultRowTypes">
      <summary>Возвращает перечисление возможных типов строк результатов.</summary>
      <returns>Коллекция возможных типов.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.ReturnParameter">
      <summary>Возвращает выходной параметр.</summary>
      <returns>Объект <see cref="T:System.Data.Linq.Mapping.MetaParameter" />, соответствующий возвращаемому параметру.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaModel">
      <summary>Абстракция, представляющая сопоставление между базой данных и объектами домена.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaModel" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.ContextType">
      <summary>Возвращает тип типа <see cref="T:System.Data.Linq.DataContext" />, который описывает данная модель.</summary>
      <returns>Тип контекста данных.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.DatabaseName">
      <summary>Возвращает имя базы данных.</summary>
      <returns>Имя базы данных в виде строки.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetFunction(System.Reflection.MethodInfo)">
      <summary>Возвращает объект <see cref="T:System.Data.Linq.Mapping.MetaFunction" />, соответствующий функции базы данных.</summary>
      <returns>Метафункция, представляющая функцию базы данных.</returns>
      <param name="method">Метод, определенный для <see cref="T:System.Data.Linq.DataContext" /> или подчиненного класса, представляющий функцию базы данных.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetFunctions">
      <summary>Возвращает перечисление всех функций.</summary>
      <returns>Перечисление, которое может использоваться для перебора всех функций.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetMetaType(System.Type)">
      <summary>Возвращает <see cref="T:System.Data.Linq.Mapping.MetaType" /> для заданного <see cref="T:System.Type" />.</summary>
      <returns>Метатип, соответствующий указанному типу.</returns>
      <param name="type">Тип, для которого выполняется поиск <see cref="T:System.Data.Linq.Mapping.MetaType" />.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetTable(System.Type)">
      <summary>Возвращает класс <see cref="T:System.Data.Linq.Mapping.MetaTable" />, связанный с заданным <see cref="T:System.Type" />.</summary>
      <returns>Метатаблица, ассоциированная с указанным типом строки.</returns>
      <param name="rowType">Тип строки среды CLR.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetTables">
      <summary>Возвращает перечисление всех таблиц.</summary>
      <returns>Перечислитель, который может использоваться для перебора таблиц. </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.MappingSource">
      <summary>Возвращает источник сопоставления, на основе которого была создана эта модель.</summary>
      <returns>Исходный источник сопоставления.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.ProviderType">
      <summary>Возвращает или задает тип поставщика.</summary>
      <returns>Тип поставщика.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaParameter">
      <summary>Представляет сопоставление между параметром метода и параметром функции базы данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaParameter" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.DbType">
      <summary>Gets the database type of the parameter.</summary>
      <returns>Тип параметра в базе данных в виде строки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.MappedName">
      <summary>Возвращает имя параметра функции в базе данных.</summary>
      <returns>Имя в виде строки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.Name">
      <summary>Возвращает имя параметра.</summary>
      <returns>Имя параметра в виде строки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.Parameter">
      <summary>Возвращает соответствующий параметр метода.</summary>
      <returns>Соответствующий параметр метода.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.ParameterType">
      <summary>Возвращает CLR-тип параметра.</summary>
      <returns>Тип.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaTable">
      <summary>Представляет абстракцию таблицы или представления базы данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaTable.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaTable" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.DeleteMethod">
      <summary>Возвращает метод <see cref="T:System.Data.Linq.DataContext" />, используемый для выполнения операций удаления.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, соответствующий методу, используемому для операций удаления.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.InsertMethod">
      <summary>Возвращает метод <see cref="T:System.Data.Linq.DataContext" />, используемый для выполнения операций вставки.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, соответствующий методу, используемому для операций вставки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.Model">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaModel" /> that contains this <see cref="T:System.Data.Linq.Mapping.MetaTable" />.</summary>
      <returns>Объект <see cref="T:System.Data.Linq.Mapping.MetaModel" />, который содержит данный объект MetaTable.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.RowType">
      <summary>Возвращает <see cref="T:System.Data.Linq.Mapping.MetaType" />, описывающий тип строк таблицы.</summary>
      <returns>Тип строк в таблице.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.TableName">
      <summary>Возвращает таблицы, как оно определено в базе данных.</summary>
      <returns>Значение типа string, представляющее имя таблицы.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.UpdateMethod">
      <summary>Возвращает метод <see cref="T:System.Data.Linq.DataContext" />, используемый для выполнения операций обновления.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, соответствующий методу, используемому для операций обновления.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaType">
      <summary>Представляет сопоставление типа объекта домена с одной столбцам таблицы базы данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaType" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Associations">
      <summary>Возвращает перечисление всех ассоциаций.</summary>
      <returns>Коллекция ассоциаций.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.CanInstantiate">
      <summary>Возвращает значение, указывающее, может ли быть создан экземпляр соответствующего типа как результат запроса.</summary>
      <returns>true, если экземпляр соответствующего типа может быть создан как результат запроса; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DataMembers">
      <summary>Возвращает перечисление всех членов-данных (полей и свойств).</summary>
      <returns>Коллекция членов-данных.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DBGeneratedIdentityMember">
      <summary>Возвращает член, представляющий автоматически сгенерированный столбец идентификатора. </summary>
      <returns>Член, представляющий автоматически сгенерированный столбец идентификатора, или null, если такого столбца не существует.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DerivedTypes">
      <summary>Возвращает перечисление непосредственно производных типов в иерархии наследования.</summary>
      <returns>Перечисление метатипов.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Discriminator">
      <summary>Возвращает член, представляющий столбец-дискриминатор наследования.</summary>
      <returns>Член, представляющий столбец-дискриминатор наследования, или null, если такового не имеется.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetDataMember(System.Reflection.MemberInfo)">
      <summary>Возвращает объект <see cref="T:System.Data.Linq.Mapping.MetaDataMember" />, связанный с заданным элементом.</summary>
      <returns>Объект <see cref="T:System.Data.Linq.Mapping.MetaDataMember" />, если он связан с заданным членом; в противном случае — null. </returns>
      <param name="member">Элемент, для которого выполняется поиск ассоциированного объекта <see cref="T:System.Data.Linq.Mapping.MetaDataMember" />.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetInheritanceType(System.Type)">
      <summary>Возвращает <see cref="T:System.Data.Linq.Mapping.MetaType" /> для подтипа наследования.</summary>
      <returns>
        <see cref="T:System.Data.Linq.Mapping.MetaType" /> для подтипа наследования.</returns>
      <param name="type">Подтип.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetTypeForInheritanceCode(System.Object)">
      <summary>Возвращает метатип, ассоциированный с указанным кодом наследования.</summary>
      <returns>Метатип, ассоциированный с указанным кодом наследования.</returns>
      <param name="code">Код наследования.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasAnyLoadMethod">
      <summary>Возвращает значение, указывающее, содержит ли текущий объект <see cref="T:System.Data.Linq.Mapping.MetaType" /> или какой-либо из его базовых типов метод OnLoaded.</summary>
      <returns>true, если метатип или какой-либо из его базовых метатипов содержит метод OnLoaded; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasAnyValidateMethod">
      <summary>Возвращает значение, указывающее, содержит ли текущий объект <see cref="T:System.Data.Linq.Mapping.MetaType" /> или какой-либо из его базовых типов метод OnValidate.</summary>
      <returns>true, если метатип или какой-либо из его базовых метатипов содержит метод OnValidate; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasInheritance">
      <summary>Возвращает значение, указывающее, является ли тип частью сопоставляемой иерархии наследования.</summary>
      <returns>true если тип является частью сопоставляемой иерархии наследования; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasInheritanceCode">
      <summary>Возвращает значение, указывающее, определяет ли тип код наследования.</summary>
      <returns>true, если тип определяет код наследования; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasUpdateCheck">
      <summary>Возвращает значение, указывающее, имеется ли у типа постоянный член, для которого может потребоваться проверка на наличие конфликтов оптимистического параллельного выполнения. </summary>
      <returns>Значение true, если у типа имеется постоянный элемент с политикой <see cref="T:System.Data.Linq.Mapping.UpdateCheck" />, отличной от <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Never" />; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IdentityMembers">
      <summary>Возвращает перечисление всех членов-данных, определяющих уникальный идентификатор типа.</summary>
      <returns>Перечисление всех членов-данных, определяющих уникальный идентификатор типа.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceBase">
      <summary>Возвращает базовый метатип иерархии наследования.</summary>
      <returns>Возвращает базовый метатип текущей иерархии наследования.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceCode">
      <summary>Возвращает значение, указывающее, определяет ли тип код наследования.</summary>
      <returns>true, если тип определяет код наследования; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceDefault">
      <summary>Возвращает значение, указывающее, является ли тип используемым по умолчанию для иерархии наследования.</summary>
      <returns>Метаданные для типа по умолчанию в сопоставлении наследования.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceRoot">
      <summary>Возвращает корневой тип иерархии наследования.</summary>
      <returns>Корневой тип.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceTypes">
      <summary>Возвращает коллекцию всех типов, определенных иерархией наследования.</summary>
      <returns>Коллекция метатипов в текущей иерархии наследования.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IsEntity">
      <summary>Возвращает значение, указывающее, является ли <see cref="T:System.Data.Linq.Mapping.MetaType" /> типом сущности.</summary>
      <returns>Значение true, если <see cref="T:System.Data.Linq.Mapping.MetaType" /> является типом сущности; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IsInheritanceDefault">
      <summary>Возвращает значение, указывающее, является ли тип используемым по умолчанию для иерархии наследования.</summary>
      <returns>true если тип является используемым по умолчанию для иерархии наследования; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Model">
      <summary>Возвращает объект <see cref="T:System.Data.Linq.Mapping.MetaModel" />, содержащий этот экземпляр <see cref="T:System.Data.Linq.Mapping.MetaType" />.</summary>
      <returns>Включающая метамодель.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Name">
      <summary>Получает имя объекта <see cref="T:System.Data.Linq.Mapping.MetaType" />.</summary>
      <returns>Имя текущего метатипа.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.OnLoadedMethod">
      <summary>Возвращает сведения о методе OnLoaded, который содержится в этом метатипе.</summary>
      <returns>Описание метода OnLoaded для этого метатипа.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.OnValidateMethod">
      <summary>Возвращает сведения о методе OnValidate, который содержится в этом метатипе.</summary>
      <returns>Описание метода OnValidate для этого метатипа.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.PersistentDataMembers">
      <summary>Возвращает коллекцию всех постоянных членов-данных.</summary>
      <returns>Коллекция всех членов-метаданных в текущем типе.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Table">
      <summary>Возвращает таблицу <see cref="T:System.Data.Linq.Mapping.MetaTable" />, использующую этот объект <see cref="T:System.Data.Linq.Mapping.MetaType" /> для определения строк.</summary>
      <returns>Метатаблица, использующая текущий метатип для определения строк. </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Type">
      <summary>Возвращает соответствующий тип среды CLR.</summary>
      <returns>Ассоциированный тип среды CLR.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.VersionMember">
      <summary>Возвращает столбец версии строки или штампа времени для этого объекта <see cref="T:System.Data.Linq.Mapping.MetaType" />.</summary>
      <returns>Элемент метаданных, представляющий столбец версии строки или штампа времени для этого метатипа, или null, если такового не имеется.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.ParameterAttribute">
      <summary>Разрешает задание деталей сопоставления для параметра метода хранимой процедуры.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ParameterAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.ParameterAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.ParameterAttribute.DbType">
      <summary>Возвращает или задает тип параметра для базы данных, специфической для поставщика.</summary>
      <returns>Тип в виде строки.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ParameterAttribute.Name">
      <summary>Gets or sets the name of the parameter.</summary>
      <returns>Имя в виде строки.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.ProviderAttribute">
      <summary>Определяет, какой поставщик базы данных следует использовать.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ProviderAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ProviderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" /> class.</summary>
      <param name="type">Тип поставщика, который следует использовать для формирования <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.ProviderAttribute.Type">
      <summary>Возвращает тип поставщика, используемого для формирования <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />.</summary>
      <returns>Тип поставщика.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.ResultTypeAttribute">
      <summary>Используется для задания каждого из типов результатов (для функций с различными типами результатов).</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ResultTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.ResultTypeAttribute" /> class.</summary>
      <param name="type">Тип результата, возвращаемого функцией с различными типами результатов.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.ResultTypeAttribute.Type">
      <summary>Получает допустимое или ожидаемое сопоставление типов для функции с различными типами результатов.</summary>
      <returns>Тип результата (<see cref="T:System.Type" />).</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.TableAttribute">
      <summary>Определяет класс как класс сущности, ассоциированный с таблицей базы данных.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.TableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.TableAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.TableAttribute.Name">
      <summary>Возвращает или задает имя таблицы или представления.</summary>
      <returns>По умолчанию значение совпадает с именем класса.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.UpdateCheck">
      <summary>Указывает, когда объекты должны проверяться на конфликты параллелизма.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.Always">
      <summary>Всегда проверять.Это значение по умолчанию за исключением случаев, когда свойство <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" /> члена имеет значение true.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.Never">
      <summary>Никогда не проверять.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.WhenChanged">
      <summary>Проверять только в случае изменения объектов.</summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.XmlMappingSource">
      <summary>Представляет источник сопоставления, в котором для создания модели используется внешний XML-файл сопоставления.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromReader(System.Xml.XmlReader)">
      <summary>Создает источник сопоставления для средства чтения XML.</summary>
      <returns>Новый XML-источник сопоставления, типа <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
      <param name="reader">Средство чтения XML.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromStream(System.IO.Stream)">
      <summary>Создает источник сопоставления из XML-потока.</summary>
      <returns>Новый XML-источник сопоставления, типа <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
      <param name="stream">XML-поток.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromUrl(System.String)">
      <summary>Создает источник сопоставления из XML, находящегося по указанному URL.</summary>
      <returns>Новый XML-источник сопоставления, типа <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
      <param name="url">URL, указывающий на XML.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromXml(System.String)">
      <summary>Создает источник сопоставления из XML-строки. </summary>
      <returns>Новый XML-источник сопоставления, типа <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
      <param name="xml">Строка, содержащая XML.</param>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2000Provider">
      <summary>Содержит функциональность для подключения и взаимодействия с SQL Server 2000.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2000Provider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.SqlClient.Sql2000Provider" />. </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2005Provider">
      <summary>Содержит функциональность для подключения и взаимодействия с SQL Server 2005.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2005Provider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.SqlClient.Sql2005Provider" />. </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2008Provider">
      <summary>Содержит функциональность для подключения и взаимодействия с SQL Server 2008.  </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2008Provider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.SqlClient.Sql2008Provider" />.</summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlHelpers">
      <summary>Предоставляет вспомогательные методы для выполнения операций с использованием строковых шаблонов.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringContainsPattern(System.String,System.Char)">
      <summary>Создает строку шаблона поиска, где заданному тексту может предшествовать и за ним может следовать другой текст.</summary>
      <returns>Строка шаблона поиска, содержащая заданную строку и символ "%" до и после нее.</returns>
      <param name="text">Строка, вставляемая в строку шаблона поиска.</param>
      <param name="escape">Символ, который будет использоваться для интерпретации подстановочного знака как обычного.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringEndsWithPattern(System.String,System.Char)">
      <summary>Создает строку шаблона поиска, где заданному тексту может предшествовать, но следовать не за ним, другой текст.</summary>
      <returns>Строка шаблона поиска, содержащая символ "%", за которым следует заданная строка.</returns>
      <param name="text">Строка, вставляемая в строку шаблона поиска.</param>
      <param name="escape">Символ, который будет использоваться для интерпретации подстановочного знака как обычного.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringStartsWithPattern(System.String,System.Char)">
      <summary>Создает строку шаблона поиска, где за заданным текстом может следовать, но не предшествовать ему, другой текст.</summary>
      <returns>Строка шаблона поиска, содержащая заданную строку, за которой следует символ "%".</returns>
      <param name="text">Строка, вставляемая в строку шаблона поиска.</param>
      <param name="escape">Символ, который будет использоваться для интерпретации подстановочного знака как обычного.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.TranslateVBLikePattern(System.String,System.Char)">
      <summary>Преобразует шаблон поиска для оператора Visual Basic Like в шаблон поиска для оператора SQL Server LIKE.</summary>
      <returns>Шаблон поиска SQL Server для оператора LIKE, соответствующий заданному шаблону поиска Visual Basic оператора Like.</returns>
      <param name="pattern">Шаблон поиска Visual Basic оператора Like, который следует преобразовать в шаблон поиска SQL Server оператора LIKE.</param>
      <param name="escape">Символ, который будет использоваться для интерпретации специальных знаков SQL или самого escape-символа как обычных знаков.</param>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlMethods">
      <summary>Предоставляет методы, соответствующие функциям SQL Server.Методы класса <see cref="T:System.Data.Linq.SqlClient.SqlMethods" /> поддерживаются только в запросах LINQ to SQL.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ суток между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ суток между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ суток между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ суток между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ суток между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ дней между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ суток между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ дней между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ часов между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ часов между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ часов между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ часов между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ часов между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ часов между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ часов между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ часов между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ микросекунд между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ микросекунд между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ микросекунд между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ микросекунд между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ микросекунд между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ микросекунд между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ микросекунд между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ микросекунд между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ миллисекунд между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ миллисекунд между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ миллисекунд между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ миллисекунд между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ миллисекунд между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ миллисекунд между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ миллисекунд между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ миллисекунд между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ минут между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ минут между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ минут между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ минут между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ минут между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ минут между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ минут между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ минут между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ месяцев между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ месяцев между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ месяцев между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ месяцев между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ месяцев между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ месяцев между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ месяцев между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ месяцев между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ наносекунд между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ наносекунд между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ наносекунд между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ наносекунд между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ наносекунд между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ наносекунд между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ наносекунд между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ наносекунд между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ секунд между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ секунд между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ секунд между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ секунд между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ секунд между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ секунд между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ секунд между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ секунд между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.DateTime,System.DateTime)">
      <summary>Подсчитывает количество границ лет между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ лет между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Подсчитывает количество границ лет между двумя датами, которые не могут быть равными null.</summary>
      <returns>Количество границ лет между двумя заданными датами.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Подсчитывает количество границ лет между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ годов между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Подсчитывает количество границ лет между двумя датами, которые могут быть равными null.</summary>
      <returns>Если оба параметра имеют значение, отличное от null, возвращает число границ годов между двумя указанными датами.Если один или оба параметра равны null, возвращает значение null.</returns>
      <param name="startDate">Начальная дата периода времени.</param>
      <param name="endDate">Конечная дата периода времени.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.Like(System.String,System.String)">
      <summary>Определяет, соответствует ли заданная строка символов заданному шаблону.Этот метод в настоящее время поддерживается только в запросах LINQ to SQL.</summary>
      <returns>true, если <paramref name="matchExpression" /> соответствует шаблону; в противном случае — false.</returns>
      <param name="matchExpression">Строка, в которой следует искать вхождение.</param>
      <param name="pattern">Шаблон, возможно, включающий символы подстановки, которому должно соответствовать <paramref name="matchExpression" />.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.Like(System.String,System.String,System.Char)">
      <summary>Определяет, соответствует ли заданная строка символов заданному шаблону.Этот метод в настоящее время поддерживается только в запросах LINQ to SQL.</summary>
      <returns>true, если <paramref name="matchExpression" /> соответствует шаблону; в противном случае — false.</returns>
      <param name="matchExpression">Строка, в которой следует искать вхождение.</param>
      <param name="pattern">Шаблон, возможно, включающий символы подстановки, которому должно соответствовать <paramref name="matchExpression" />.</param>
      <param name="escapeCharacter">Символ, который, будучи размещенным перед подстановочным знаком, указывает, что последний следует интерпретировать как обычный символ, а не как подстановочный знак.</param>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlProvider">
      <summary>Содержит функциональность для подключения и взаимодействия с SQL Server.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.SqlClient.SqlProvider" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.Dispose">
      <summary>Освобождает управляемые ссылки и закрывает подключения, открытые объектом <see cref="T:System.Data.Linq.SqlClient.SqlProvider" />.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.Dispose(System.Boolean)">
      <summary>Освобождает — не обязательно — управляемые ссылки и закрывает подключения, открытые объектом <see cref="T:System.Data.Linq.SqlClient.SqlProvider" />.</summary>
      <param name="disposing">true, чтобы освободить управляемые ссылки и закрыть подключения; в противном случае — false.</param>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1">
      <summary>Defines methods for dynamically materializing objects.</summary>
      <typeparam name="TDataReader">The type of the data reader.</typeparam>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1" /> class. </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Arguments">
      <summary>Captures internal state for the fast materializer.</summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.BufferReader">
      <summary>Represents a reader that reads data rows in a forward-only manner. </summary>
    </member>
    <member name="P:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CanDeferLoad">
      <summary>When overridden in a derived class, gets a value that indicates whether deferred loading is enabled.</summary>
      <returns>true if deferred loading is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Convert``1(System.Collections.IEnumerable)">
      <summary>Changes the type of each element in a specified sequence.</summary>
      <returns>A sequence that contains the type-converted elements.</returns>
      <param name="source">A sequence that contains elements to convert.</param>
      <typeparam name="TOutput">The type to convert the elements to.</typeparam>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CreateGroup``2(``0,System.Collections.Generic.IEnumerable{``1})">
      <summary>Creates a group from a specified key and collection of values.</summary>
      <returns>A group that has the specified key and the specified collection of values.</returns>
      <param name="key">The key for the group.</param>
      <param name="items">The values for the group.</param>
      <typeparam name="TKey">The type of the key of the group.</typeparam>
      <typeparam name="TElement">The type of the values in the group.</typeparam>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CreateOrderedEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates an ordered sequence from a specified collection of values.</summary>
      <returns>An ordered sequence that contains the specified values.</returns>
      <param name="items">The values to put in the ordered sequence.</param>
      <typeparam name="TElement">The type of the values in the ordered sequence.</typeparam>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.DataReader">
      <summary>Represents a data reader.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.ErrorAssignmentToNull(System.Type)">
      <summary>Returns an exception that indicates that a null value was tried to be assigned to a non-nullable value type.</summary>
      <returns>An exception that indicates that a null value was attempted to be assigned to a non-nullable value type.</returns>
      <param name="type">The type to which a null value was attempted to be assigned.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.ExecuteSubQuery(System.Int32,System.Object[])">
      <summary>When overridden in a derived class, executes a query.</summary>
      <returns>The results from executing the query.</returns>
      <param name="iSubQuery">The index of the query.</param>
      <param name="args">The arguments to the query.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.GetLinkSource``1(System.Int32,System.Int32,System.Object[])">
      <summary>When overridden in a derived class, creates a new deferred source.</summary>
      <returns>An enumerable deferred source.</returns>
      <param name="globalLink">The index of the link.</param>
      <param name="localFactory">The index of the factory.</param>
      <param name="keyValues">The key values for the deferred source.</param>
      <typeparam name="T">The type of the result elements.</typeparam>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.GetNestedLinkSource``1(System.Int32,System.Int32,System.Object)">
      <summary>When overridden in a derived class, creates a new deferred source.</summary>
      <returns>An enumerable deferred source.</returns>
      <param name="globalLink">The index of the link.</param>
      <param name="localFactory">The index of the factory.</param>
      <param name="instance">The instance for the deferred source.</param>
      <typeparam name="T">The type of the result elements.</typeparam>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Globals">
      <summary>Captures internal state for the fast materializer.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.InsertLookup(System.Int32,System.Object)">
      <summary>When overridden in a derived class, inserts a value into a data structure.</summary>
      <returns>The value that was inserted into the data structure.</returns>
      <param name="globalMetaType">The index of the <see cref="T:System.Data.Linq.Mapping.MetaType" />.</param>
      <param name="instance">The object to insert into the data structure.</param>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Locals">
      <summary>Captures internal state for the fast materializer.</summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Ordinals">
      <summary>Represents column ordinals of a data reader.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Read">
      <summary>When overridden in a derived class, advances the reader to the next record.</summary>
      <returns>true if there are more rows; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.SendEntityMaterialized(System.Int32,System.Object)">
      <summary>When overridden in a derived class, invokes the method represented by <see cref="P:System.Data.Linq.Mapping.MetaType.OnLoadedMethod" />.</summary>
      <param name="globalMetaType">The index of the <see cref="T:System.Data.Linq.Mapping.MetaType" />.</param>
      <param name="instance">The parameter to pass to the invoked method.</param>
    </member>
  </members>
</doc>