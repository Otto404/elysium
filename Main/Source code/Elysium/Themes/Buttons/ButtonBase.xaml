<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sw="clr-namespace:System.Windows"
                    xmlns:root="clr-namespace:Elysium"
                    xmlns:params="clr-namespace:Elysium.Parameters">
    
    <ResourceDictionary.MergedDictionaries>
        <sw:CachedResourceDictionary Source="/Elysium;component/Themes/SharedResources.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ButtonBase}, ResourceId=MetroStyle}" TargetType="{x:Type ButtonBase}">        
        <Setter Property="Background" Value="{DynamicResource {x:Static root:Resources.AccentBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static root:Resources.AccentBrushKey}}"/>
        <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:General.DefaultThickness), Mode=OneWay}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static root:Resources.ContrastBrushKey}}"/>
        <Setter Property="FontSize" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:General.ContentFontSize), Mode=OneWay}"/>
        <Setter Property="FontStretch" Value="Medium"/>
        <Setter Property="FontStyle" Value="Normal"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type root:Resources}, ResourceId=FocusVisualStyle}}"/>        
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(params:General.BoldPadding), Mode=OneWay}"/>        
        <Setter Property="MinWidth" Value="70"/>        
        <Setter Property="SnapsToDevicePixels" Value="True"/>        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">                    
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            TextBlock.Foreground="{TemplateBinding Foreground}"
                            TextBlock.FontFamily="{TemplateBinding FontFamily}"
                            TextBlock.FontSize="{TemplateBinding FontSize}"
                            TextBlock.FontStretch="{TemplateBinding FontStretch}"
                            TextBlock.FontStyle="{TemplateBinding FontStyle}"
                            TextBlock.FontWeight="{TemplateBinding FontWeight}"
                            TextOptions.TextFormattingMode="{TemplateBinding TextOptions.TextFormattingMode}"
                            TextOptions.TextRenderingMode="{TemplateBinding TextOptions.TextRenderingMode}"
                            RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=FontSize, Mode=OneWay, Converter={StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type root:Resources}, ResourceId=IsGreaterThanConverter}}, ConverterParameter=18}">
                <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static root:Resources.ForegroundBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static root:Resources.ForegroundBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static root:Resources.BackgroundBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static root:Resources.LowLightBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static root:Resources.LowLightBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static root:Resources.BackgroundBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {x:Static root:Resources.DisabledBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static root:Resources.DisabledBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static root:Resources.BackgroundBrushKey}}"/>
            </Trigger>
        </Style.Triggers>        
    </Style>
    
</ResourceDictionary>