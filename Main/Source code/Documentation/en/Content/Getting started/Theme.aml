<?xml version="1.0" encoding="utf-8"?>
<topic id="2ac0683a-9c20-4cc9-86e2-48a3e25696ed" revisionNumber="1">
  <developerUIReferenceDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
                                xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Elysium has a special API set, designed to work with application&apos;s theme settings of the control&apos;s style.</para>
    </introduction>

    <taskList>
      <content>
        <procedure address="Project">
          <title>How to add and edit project&apos;s theme</title>
          <steps class="ordered">
            <step>
              <content>
                <para>Open the file <legacyBold>App.xaml</legacyBold>.</para>
              </content>
            </step>
            <step>
              <content>
                <para>
                  Add the <legacyBold>Generic.xaml</legacyBold> dictionary to the application resourses, add the following event handler to your code <codeEntityReference>E:System.Windows.Application.Startup</codeEntityReference>.
                  In the event hander call one of the overloads of the method <codeEntityReference>M:Elysium.Manager.Apply</codeEntityReference> and set necessary parameters.
                </para>
                <code language="xaml">
                  &lt;Application x:Class="Elysium.Test.App"
                               xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                               StartupUri="MainWindow.xaml" Startup="StartupHandler"&gt;
                      &lt;Application.Resources&gt;
                          &lt;ResourceDictionary&gt;
                              &lt;ResourceDictionary.MergedDictionaries&gt;
                                  &lt;ResourceDictionary Source="/Elysium;component/Themes/Generic.xaml"/&gt;
                              &lt;/ResourceDictionary.MergedDictionaries&gt;
                          &lt;/ResourceDictionary&gt;
                      &lt;/Application.Resources&gt;
                  &lt;/Application&gt;
                </code>
                <code language="csharp">
                  public sealed partial class App : System.Windows.Application
                  {
                      private void StartupHandler(object sender, System.Windows.StartupEventArgs e)
                      {
                          Elysium.Manager.ApplyTheme(this, Elysium.Theme.Dark, Elysium.AccentBrushes.Blue, Elysium.Brushes.White);
                      }
                  }
                </code>
              </content>
            </step>
          </steps>
        </procedure>
        <procedure address="Control">
          <title>How to add and edit control&apos;s theme</title>
          <steps class="ordered">
            <step>
              <content>
                <para>Open the markup file of the control (for example, MainWindow.xaml)</para>
              </content>
            </step>
            <step>
              <content>
                <para>
                  Add <codeInline>xmlns:metro="http://schemas.codeplex.com/elysium"</codeInline> and <codeInline>xmlns:params="http://schemas.codeplex.com/elysium/params"</codeInline> XAML namespaces.
                  Set values to the attached dependency properties from the class <codeInline>params:</codeInline><codeEntityReference>T:Elysium.Parameters.Manager</codeEntityReference>.
                </para>
                <alert class="tip">
                  <para>Values of accent colors can be taken from the class <codeInline>params:</codeInline><codeEntityReference>T:Elysium.AccentBrushes</codeEntityReference>.</para>
                </alert>
                <alert class="important">
                  <para>
                    All theme&apos;s resourses (for example, brushes like <codeInline>BackgroundBrush</codeInline> or control&apos;s styles)  are <legacyBold>dynamic</legacyBold>.
                    To use them, use <codeInline>DynamicResource</codeInline> markup extension.
                  </para>
                  <para>Only icons and converters in Elysium are static.</para>
                </alert>
                <code language="xaml">
                  &lt;metro:Window x:Class="Elysium.Test.MainWindow"
                                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                                xmlns:metro="http://schemas.codeplex.com/elysium"
                                xmlns:params="http://schemas.codeplex.com/elysium/params"
                                params:Manager.Theme="Dark"
                                params:Manager.AccentBrush="{x:Static metro:AccentBrushes.Blue}"
                                params:Manager.ContrastBrush="White"
                                Background="{DynamicResource BackgroundBrush}"&gt;
                        ...
                  &lt;/metro:Window&gt;
                </code>
              </content>
            </step>
          </steps>
        </procedure>    
        <procedure address="DesignTime">
          <title>Design-time mode</title>
          <steps class="ordered">
            <step>
              <content>
                <para>
                  Set values to the attached dependency properties from the class <codeInline>params:</codeInline><codeEntityReference>T:Elysium.Parameters.Design</codeEntityReference> to display
                  styles correctly during working in constructor mode.
              </para>
              </content>
            </step>
            <step>
              <content>
                <code language="xaml">
                  &lt;metro:Window x:Class="Elysium.Test.MainWindow"
                                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                                xmlns:metro="http://schemas.codeplex.com/elysium"
                                xmlns:params="http://schemas.codeplex.com/elysium/params"
                                params:Design.Theme="Dark"
                                params:Design.AccentBrush="{x:Static metro:AccentBrushes.Blue}"
                                params:Design.ContrastBrush="White"&gt;
                        ...
                  &lt;/metro:Window&gt;
                </code>
              </content>
            </step>
          </steps>
        </procedure>
      </content>
    </taskList>

    <uiElementList address="Appendix">
      <content>
        <table>
          <title>List of the theme&apos;s resources.</title>
          <tableHeader>
            <row>
              <entry>
                <para>A name of the resource.</para>
              </entry>
              <entry>
                <para>A purpose of the resource.</para>
              </entry>
            </row>
          </tableHeader>
          <row>
            <entry>
              <para>TransparentBrush</para>
            </entry>
            <entry>
              <para>Used to make transparent background.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>SemitransparentBrush</para>
            </entry>
            <entry>
              <para>Semitransparent brush.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>BackgroundBrush</para>
            </entry>
            <entry>
              <para>Used to set a background to controls.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>ForegroundBrush</para>
            </entry>
            <entry>
              <para>Used to places which are contrast to the background (for example, for text).</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>HighlightBrush</para>
            </entry>
            <entry>
              <para>The most pale (relative to the background) brush. Used when it&apos;s needed to highlight the control (for example, background is filled with the brush when user hovers a pointer over the control)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>MiddleLightBrush</para>
            </entry>
            <entry>
              <para>A brush with average contrast relative to the background. Used to highlight some element moderately  (for example, this brush is used to select a piece of text)</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>LowlightBrush</para>
            </entry>
            <entry>
              <para>
                The most contrast brush relative to the background, but less than ForegroundBrush. Used to contrast highlighting of the elements
                (for example, borders of many elements are highlighted with this brush, as well as backgrounds of the button and slider when they are pressed).
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>DisabledBrush</para>
            </entry>
            <entry>
              <para>A brush with the &quot;dirty&quot; color, used to indicate that the control is inactive.</para>
            </entry>
          </row>
        </table>
        <table>
          <title>A list of icons.</title>
          <tableHeader>
            <row>
              <entry>
                <para>Name of the resource with the icon</para>
              </entry>
              <entry>
                <para>Icon&apos;s purpose</para>
              </entry>
            </row>
          </tableHeader>
          <row>
            <entry>
              <para>AdvancedIcon</para>
            </entry>
            <entry>
              <para>
                If you need to move some items from the ApplicationBar to a separate menu (for example, default size is too small),
                you can create a button <legacyItalic>Additionally</legacyItalic> with a pulldown menu and set the icon for it.
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>MinimizeIcon</para>
            </entry>
            <entry>
              <para>An icon for window&apos;s collapsing.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>MaximizeIcon</para>
            </entry>
            <entry>
              <para>An icon for window&apos;s maximizing for the whole display.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>RestoreIcon</para>
            </entry>
            <entry>
              <para>An icon for restoring an old size of the window.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>CloseIcon</para>
            </entry>
            <entry>
              <para>An icon for window&apos;s closing</para>
            </entry>
          </row>
        </table>
      </content>
    </uiElementList>
      
    <relatedTopics>
      <codeEntityReference>N:Elysium</codeEntityReference>
      <codeEntityReference>T:Elysium.Manager</codeEntityReference>
      <codeEntityReference>T:Elysium.Parameters.Manager</codeEntityReference>
      <codeEntityReference>T:Elysium.Parameters.Design</codeEntityReference>
    </relatedTopics>
  </developerUIReferenceDocument>
</topic>