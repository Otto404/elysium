<#@ template language="C#" hostSpecific="true" #>
<#@ output extension=".xml" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ assembly name="System.Xml.Linq.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#
    var root = Host.ResolvePath(@"..\..\");
	
	var paths = new List<string>();
	
	paths.Add(@"AccentBrushes.ru.xml");
	paths.Add(@"Theme.ru.xml");
	paths.Add(@"ThemeManager.ru.xml");
	paths.Add(@"Parameters.ru.xml");
	
	paths.Add(@"Extensions\Tree helpers\LogicalTreeHelperExtensions.ru.xml");
	paths.Add(@"Extensions\Tree helpers\VisualTreeHelperExtensions.ru.xml");
	
	paths.Add(@"Converters\AngleToCoordinateConverter.ru.xml");
	paths.Add(@"Converters\PercentToAngleConverter.ru.xml");
	
	paths.Add(@"Converters\IsGreaterThanConverter.ru.xml");
	paths.Add(@"Converters\NumberPositiveToNegativeConverter.ru.xml");
	paths.Add(@"Converters\ThicknessPositiveToNegativeConverter.ru.xml");
	
	paths.Add(@"Converters\DoubleToGridLengthConverter.ru.xml");
	paths.Add(@"Converters\GridLengthToDoubleConverter.ru.xml");
	paths.Add(@"Converters\DoubleToThicknessConverter.ru.xml");
	paths.Add(@"Converters\ThicknessToDoubleConverter.ru.xml");
	
	paths.Add(@"Controls\ApplicationBar\ApplicationBarDock.ru.xml");
	paths.Add(@"Controls\ApplicationBar\ApplicationBarTransitionMode.ru.xml");
	
	paths.Add(@"Controls\CommandButtons\DropDownDirection.ru.xml");
	
	paths.Add(@"Controls\ProgressBars\ProgressBarState.ru.xml");
	
	paths.Add(@"Controls\ToastNotification\ToastNotificationAnimation.ru.xml");
	paths.Add(@"Controls\ToastNotification\HorizontalPlacement.ru.xml");
	paths.Add(@"Controls\ToastNotification\VerticalPlacement.ru.xml");
	
	var documentation = new XDocument(new XDeclaration("1.0", "utf-8", "yes"));
	
	var doc = new XElement("doc");
	doc.Add(new XElement("assembly", new XElement("name", "Elysium")));
	
	var members = new XElement("members");
	
    foreach (var path in paths)
    {
		var partOfDocumentation = XDocument.Load(Path.Combine(root, path)).Root.Element("members").Elements();
		foreach (var declaration in partOfDocumentation)
		{
			declaration.Name = "member";
			members.Add(declaration);
		}
    }
	
	doc.Add(members);
	
	documentation.Add(doc);
#>
<#= documentation.Declaration #>
<#= documentation #>